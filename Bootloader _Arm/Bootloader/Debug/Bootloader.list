
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005714  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ad8  080058dc  080058dc  000158dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073b4  080073b4  00020040  2**0
                  CONTENTS
  4 .ARM          00000008  080073b4  080073b4  000173b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073bc  080073bc  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073bc  080073bc  000173bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073c0  080073c0  000173c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  080073c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  20000040  08007404  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08007404  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013047  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e4e  00000000  00000000  000330b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001138  00000000  00000000  00035f08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fa8  00000000  00000000  00037040  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002720b  00000000  00000000  00037fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f15f  00000000  00000000  0005f1f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ed7c8  00000000  00000000  0006e352  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015bb1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000462c  00000000  00000000  0015bb98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000040 	.word	0x20000040
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080058c4 	.word	0x080058c4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000044 	.word	0x20000044
 8000204:	080058c4 	.word	0x080058c4

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800050c:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000510:	4b05      	ldr	r3, [pc, #20]	; (8000528 <__NVIC_SystemReset+0x20>)
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000518:	4903      	ldr	r1, [pc, #12]	; (8000528 <__NVIC_SystemReset+0x20>)
 800051a:	4b04      	ldr	r3, [pc, #16]	; (800052c <__NVIC_SystemReset+0x24>)
 800051c:	4313      	orrs	r3, r2
 800051e:	60cb      	str	r3, [r1, #12]
 8000520:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000524:	bf00      	nop
 8000526:	e7fd      	b.n	8000524 <__NVIC_SystemReset+0x1c>
 8000528:	e000ed00 	.word	0xe000ed00
 800052c:	05fa0004 	.word	0x05fa0004

08000530 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
 8000534:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000538:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800053c:	4b0b      	ldr	r3, [pc, #44]	; (800056c <SCB_EnableICache+0x3c>)
 800053e:	2200      	movs	r2, #0
 8000540:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000544:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000548:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800054c:	4b07      	ldr	r3, [pc, #28]	; (800056c <SCB_EnableICache+0x3c>)
 800054e:	695b      	ldr	r3, [r3, #20]
 8000550:	4a06      	ldr	r2, [pc, #24]	; (800056c <SCB_EnableICache+0x3c>)
 8000552:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000556:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000558:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800055c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	e000ed00 	.word	0xe000ed00

08000570 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000576:	4b1d      	ldr	r3, [pc, #116]	; (80005ec <SCB_EnableDCache+0x7c>)
 8000578:	2200      	movs	r2, #0
 800057a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800057e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000582:	4b1a      	ldr	r3, [pc, #104]	; (80005ec <SCB_EnableDCache+0x7c>)
 8000584:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000588:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	0b5b      	lsrs	r3, r3, #13
 800058e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000592:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	08db      	lsrs	r3, r3, #3
 8000598:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800059c:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	015a      	lsls	r2, r3, #5
 80005a2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80005a6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80005a8:	68ba      	ldr	r2, [r7, #8]
 80005aa:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005ac:	490f      	ldr	r1, [pc, #60]	; (80005ec <SCB_EnableDCache+0x7c>)
 80005ae:	4313      	orrs	r3, r2
 80005b0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	1e5a      	subs	r2, r3, #1
 80005b8:	60ba      	str	r2, [r7, #8]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d1ef      	bne.n	800059e <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	1e5a      	subs	r2, r3, #1
 80005c2:	60fa      	str	r2, [r7, #12]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d1e5      	bne.n	8000594 <SCB_EnableDCache+0x24>
 80005c8:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005cc:	4b07      	ldr	r3, [pc, #28]	; (80005ec <SCB_EnableDCache+0x7c>)
 80005ce:	695b      	ldr	r3, [r3, #20]
 80005d0:	4a06      	ldr	r2, [pc, #24]	; (80005ec <SCB_EnableDCache+0x7c>)
 80005d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005d6:	6153      	str	r3, [r2, #20]
 80005d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005dc:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 80005e0:	bf00      	nop
 80005e2:	3714      	adds	r7, #20
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	e000ed00 	.word	0xe000ed00

080005f0 <boot_to_app>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void boot_to_app(uint32_t app_addr)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	volatile uint32_t jump_addr;
	void (*ResetHandler)(void) = NULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]

	jump_addr = *(__IO uint32_t*) (app_addr + 4);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3304      	adds	r3, #4
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	60fb      	str	r3, [r7, #12]
	ResetHandler = (void (*)(void)) jump_addr;
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	617b      	str	r3, [r7, #20]
	__set_MSP(*(__IO uint32_t*) app_addr);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800060e:	693b      	ldr	r3, [r7, #16]
 8000610:	f383 8808 	msr	MSP, r3

	ResetHandler();
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	4798      	blx	r3
}
 8000618:	bf00      	nop
 800061a:	3718      	adds	r7, #24
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <system_restart>:

extern void system_restart(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000624:	b672      	cpsid	i
	__disable_irq();
	NVIC_SystemReset();
 8000626:	f7ff ff6f 	bl	8000508 <__NVIC_SystemReset>
	...

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	/* Enable I-Cache */
	SCB_EnableICache();
 8000632:	f7ff ff7d 	bl	8000530 <SCB_EnableICache>
	/* Enable D-Cache */
	SCB_EnableDCache();
 8000636:	f7ff ff9b 	bl	8000570 <SCB_EnableDCache>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063a:	f000 ff98 	bl	800156e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063e:	f000 f869 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000642:	f000 f927 	bl	8000894 <MX_GPIO_Init>
  MX_CRC_Init();
 8000646:	f000 f8d1 	bl	80007ec <MX_CRC_Init>
  MX_DMA2D_Init();
 800064a:	f000 f8f1 	bl	8000830 <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */
  BSP_SDRAM_Init(); /* Initializes the SDRAM device */
 800064e:	f004 ff17 	bl	8005480 <BSP_SDRAM_Init>
    __HAL_RCC_CRC_CLK_ENABLE(); /* Enable the CRC Module */
 8000652:	4b2b      	ldr	r3, [pc, #172]	; (8000700 <main+0xd4>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a2a      	ldr	r2, [pc, #168]	; (8000700 <main+0xd4>)
 8000658:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b28      	ldr	r3, [pc, #160]	; (8000700 <main+0xd4>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	683b      	ldr	r3, [r7, #0]

    BSP_TS_Init(480, 272);
 800066a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800066e:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8000672:	f005 f8bb 	bl	80057ec <BSP_TS_Init>

    BSP_LCD_Init();
 8000676:	f004 f92d 	bl	80048d4 <BSP_LCD_Init>
    BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800067a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800067e:	2000      	movs	r0, #0
 8000680:	f004 f9c0 	bl	8004a04 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_DisplayOn();
 8000684:	f004 fce4 	bl	8005050 <BSP_LCD_DisplayOn>

    BSP_LCD_SelectLayer(0);
 8000688:	2000      	movs	r0, #0
 800068a:	f004 fa1b 	bl	8004ac4 <BSP_LCD_SelectLayer>
     BSP_LCD_Clear(LCD_COLOR_LIGHTGREEN);
 800068e:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
 8000692:	f004 fa73 	bl	8004b7c <BSP_LCD_Clear>
     BSP_LCD_SetBackColor(LCD_COLOR_LIGHTGREEN);
 8000696:	f06f 107f 	mvn.w	r0, #8323199	; 0x7f007f
 800069a:	f004 fa3b 	bl	8004b14 <BSP_LCD_SetBackColor>
     BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800069e:	4819      	ldr	r0, [pc, #100]	; (8000704 <main+0xd8>)
 80006a0:	f004 fa20 	bl	8004ae4 <BSP_LCD_SetTextColor>
     BSP_LCD_SetFont(&Font24);
 80006a4:	4818      	ldr	r0, [pc, #96]	; (8000708 <main+0xdc>)
 80006a6:	f004 fa4f 	bl	8004b48 <BSP_LCD_SetFont>
     BSP_LCD_DisplayStringAt(170,120, (uint8_t *)"BOOTING",LEFT_MODE);
 80006aa:	2303      	movs	r3, #3
 80006ac:	4a17      	ldr	r2, [pc, #92]	; (800070c <main+0xe0>)
 80006ae:	2178      	movs	r1, #120	; 0x78
 80006b0:	20aa      	movs	r0, #170	; 0xaa
 80006b2:	f004 facf 	bl	8004c54 <BSP_LCD_DisplayStringAt>
     HAL_Delay(1500);
 80006b6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80006ba:	f000 ffb5 	bl	8001628 <HAL_Delay>
     /* USER CODE END 2 */
     for (int i = 0; i < 25; i++)
 80006be:	2300      	movs	r3, #0
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	e013      	b.n	80006ec <main+0xc0>
     {
   	  BSP_LCD_DrawRect(165+i*5, 150,5,10);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	461a      	mov	r2, r3
 80006ca:	0092      	lsls	r2, r2, #2
 80006cc:	4413      	add	r3, r2
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	33a5      	adds	r3, #165	; 0xa5
 80006d2:	b298      	uxth	r0, r3
 80006d4:	230a      	movs	r3, #10
 80006d6:	2205      	movs	r2, #5
 80006d8:	2196      	movs	r1, #150	; 0x96
 80006da:	f004 fc3f 	bl	8004f5c <BSP_LCD_DrawRect>
   	  HAL_Delay(350);
 80006de:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80006e2:	f000 ffa1 	bl	8001628 <HAL_Delay>
     for (int i = 0; i < 25; i++)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	3301      	adds	r3, #1
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2b18      	cmp	r3, #24
 80006f0:	dde8      	ble.n	80006c4 <main+0x98>
     }
  /* USER CODE END 2 */
     boot_to_app(Application_Address);
 80006f2:	4807      	ldr	r0, [pc, #28]	; (8000710 <main+0xe4>)
 80006f4:	f7ff ff7c 	bl	80005f0 <boot_to_app>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  system_restart();
 80006f8:	f7ff ff92 	bl	8000620 <system_restart>
 80006fc:	e7fc      	b.n	80006f8 <main+0xcc>
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800
 8000704:	ffff0000 	.word	0xffff0000
 8000708:	2000000c 	.word	0x2000000c
 800070c:	080058dc 	.word	0x080058dc
 8000710:	08040000 	.word	0x08040000

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b094      	sub	sp, #80	; 0x50
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 0320 	add.w	r3, r7, #32
 800071e:	2230      	movs	r2, #48	; 0x30
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f005 f8c6 	bl	80058b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000738:	4b2a      	ldr	r3, [pc, #168]	; (80007e4 <SystemClock_Config+0xd0>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073c:	4a29      	ldr	r2, [pc, #164]	; (80007e4 <SystemClock_Config+0xd0>)
 800073e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000742:	6413      	str	r3, [r2, #64]	; 0x40
 8000744:	4b27      	ldr	r3, [pc, #156]	; (80007e4 <SystemClock_Config+0xd0>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000750:	4b25      	ldr	r3, [pc, #148]	; (80007e8 <SystemClock_Config+0xd4>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a24      	ldr	r2, [pc, #144]	; (80007e8 <SystemClock_Config+0xd4>)
 8000756:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800075a:	6013      	str	r3, [r2, #0]
 800075c:	4b22      	ldr	r3, [pc, #136]	; (80007e8 <SystemClock_Config+0xd4>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000768:	2301      	movs	r3, #1
 800076a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800076c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000772:	2302      	movs	r3, #2
 8000774:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000776:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800077a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800077c:	230c      	movs	r3, #12
 800077e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000780:	23c0      	movs	r3, #192	; 0xc0
 8000782:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000784:	2302      	movs	r3, #2
 8000786:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000788:	2302      	movs	r3, #2
 800078a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078c:	f107 0320 	add.w	r3, r7, #32
 8000790:	4618      	mov	r0, r3
 8000792:	f002 fcef 	bl	8003174 <HAL_RCC_OscConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800079c:	f000 f8b8 	bl	8000910 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007a0:	f002 fc98 	bl	80030d4 <HAL_PWREx_EnableOverDrive>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007aa:	f000 f8b1 	bl	8000910 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ae:	230f      	movs	r3, #15
 80007b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b2:	2302      	movs	r3, #2
 80007b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	2106      	movs	r1, #6
 80007cc:	4618      	mov	r0, r3
 80007ce:	f002 ff75 	bl	80036bc <HAL_RCC_ClockConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80007d8:	f000 f89a 	bl	8000910 <Error_Handler>
  }
}
 80007dc:	bf00      	nop
 80007de:	3750      	adds	r7, #80	; 0x50
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40007000 	.word	0x40007000

080007ec <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007f0:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <MX_CRC_Init+0x3c>)
 80007f2:	4a0e      	ldr	r2, [pc, #56]	; (800082c <MX_CRC_Init+0x40>)
 80007f4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_CRC_Init+0x3c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80007fc:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <MX_CRC_Init+0x3c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_CRC_Init+0x3c>)
 8000804:	2200      	movs	r2, #0
 8000806:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <MX_CRC_Init+0x3c>)
 800080a:	2200      	movs	r2, #0
 800080c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_CRC_Init+0x3c>)
 8000810:	2201      	movs	r2, #1
 8000812:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000814:	4804      	ldr	r0, [pc, #16]	; (8000828 <MX_CRC_Init+0x3c>)
 8000816:	f001 f83b 	bl	8001890 <HAL_CRC_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000820:	f000 f876 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000228 	.word	0x20000228
 800082c:	40023000 	.word	0x40023000

08000830 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000834:	4b15      	ldr	r3, [pc, #84]	; (800088c <MX_DMA2D_Init+0x5c>)
 8000836:	4a16      	ldr	r2, [pc, #88]	; (8000890 <MX_DMA2D_Init+0x60>)
 8000838:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_DMA2D_Init+0x5c>)
 800083c:	2200      	movs	r2, #0
 800083e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <MX_DMA2D_Init+0x5c>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_DMA2D_Init+0x5c>)
 8000848:	2200      	movs	r2, #0
 800084a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_DMA2D_Init+0x5c>)
 800084e:	2200      	movs	r2, #0
 8000850:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_DMA2D_Init+0x5c>)
 8000854:	2200      	movs	r2, #0
 8000856:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_DMA2D_Init+0x5c>)
 800085a:	2200      	movs	r2, #0
 800085c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <MX_DMA2D_Init+0x5c>)
 8000860:	2200      	movs	r2, #0
 8000862:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000864:	4809      	ldr	r0, [pc, #36]	; (800088c <MX_DMA2D_Init+0x5c>)
 8000866:	f001 fab9 	bl	8001ddc <HAL_DMA2D_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000870:	f000 f84e 	bl	8000910 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000874:	2101      	movs	r1, #1
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_DMA2D_Init+0x5c>)
 8000878:	f001 fc0e 	bl	8002098 <HAL_DMA2D_ConfigLayer>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000882:	f000 f845 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	2000024c 	.word	0x2000024c
 8000890:	4002b000 	.word	0x4002b000

08000894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b088      	sub	sp, #32
 8000898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089a:	f107 030c 	add.w	r3, r7, #12
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80008aa:	4b17      	ldr	r3, [pc, #92]	; (8000908 <MX_GPIO_Init+0x74>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a16      	ldr	r2, [pc, #88]	; (8000908 <MX_GPIO_Init+0x74>)
 80008b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b14      	ldr	r3, [pc, #80]	; (8000908 <MX_GPIO_Init+0x74>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_GPIO_Init+0x74>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a10      	ldr	r2, [pc, #64]	; (8000908 <MX_GPIO_Init+0x74>)
 80008c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_GPIO_Init+0x74>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2101      	movs	r1, #1
 80008de:	480b      	ldr	r0, [pc, #44]	; (800090c <MX_GPIO_Init+0x78>)
 80008e0:	f001 feb2 	bl	8002648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80008e4:	2301      	movs	r3, #1
 80008e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	4619      	mov	r1, r3
 80008fa:	4804      	ldr	r0, [pc, #16]	; (800090c <MX_GPIO_Init+0x78>)
 80008fc:	f001 fcfa 	bl	80022f4 <HAL_GPIO_Init>

}
 8000900:	bf00      	nop
 8000902:	3720      	adds	r7, #32
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40023800 	.word	0x40023800
 800090c:	40022000 	.word	0x40022000

08000910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
	...

08000920 <HAL_LTDC_Init>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, tmp1 = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	2300      	movs	r3, #0
 800092e:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d101      	bne.n	800093a <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 8000936:	2301      	movs	r3, #1
 8000938:	e0c7      	b.n	8000aca <HAL_LTDC_Init+0x1aa>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8000940:	b2db      	uxtb	r3, r3
 8000942:	2b00      	cmp	r3, #0
 8000944:	d106      	bne.n	8000954 <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2200      	movs	r2, #0
 800094a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f000 f8c2 	bl	8000ad8 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2202      	movs	r2, #2
 8000958:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	699a      	ldr	r2, [r3, #24]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800096a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	6999      	ldr	r1, [r3, #24]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	685a      	ldr	r2, [r3, #4]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	689b      	ldr	r3, [r3, #8]
 800097a:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8000980:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	691b      	ldr	r3, [r3, #16]
 8000986:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	430a      	orrs	r2, r1
 800098e:	619a      	str	r2, [r3, #24]

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	6899      	ldr	r1, [r3, #8]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	4b4e      	ldr	r3, [pc, #312]	; (8000ad4 <HAL_LTDC_Init+0x1b4>)
 800099c:	400b      	ands	r3, r1
 800099e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	695b      	ldr	r3, [r3, #20]
 80009a4:	041b      	lsls	r3, r3, #16
 80009a6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	6899      	ldr	r1, [r3, #8]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	699a      	ldr	r2, [r3, #24]
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	431a      	orrs	r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	430a      	orrs	r2, r1
 80009bc:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	68d9      	ldr	r1, [r3, #12]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	4b42      	ldr	r3, [pc, #264]	; (8000ad4 <HAL_LTDC_Init+0x1b4>)
 80009ca:	400b      	ands	r3, r1
 80009cc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	69db      	ldr	r3, [r3, #28]
 80009d2:	041b      	lsls	r3, r3, #16
 80009d4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	68d9      	ldr	r1, [r3, #12]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6a1a      	ldr	r2, [r3, #32]
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	431a      	orrs	r2, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	430a      	orrs	r2, r1
 80009ea:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	6919      	ldr	r1, [r3, #16]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	4b37      	ldr	r3, [pc, #220]	; (8000ad4 <HAL_LTDC_Init+0x1b4>)
 80009f8:	400b      	ands	r3, r1
 80009fa:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a00:	041b      	lsls	r3, r3, #16
 8000a02:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	6919      	ldr	r1, [r3, #16]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	431a      	orrs	r2, r3
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	430a      	orrs	r2, r1
 8000a18:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	6959      	ldr	r1, [r3, #20]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	4b2b      	ldr	r3, [pc, #172]	; (8000ad4 <HAL_LTDC_Init+0x1b4>)
 8000a26:	400b      	ands	r3, r1
 8000a28:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a2e:	041b      	lsls	r3, r3, #16
 8000a30:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	6959      	ldr	r1, [r3, #20]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	431a      	orrs	r2, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	430a      	orrs	r2, r1
 8000a46:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000a4e:	021b      	lsls	r3, r3, #8
 8000a50:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000a58:	041b      	lsls	r3, r3, #16
 8000a5a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8000a6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8000a7e:	431a      	orrs	r2, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	430a      	orrs	r2, r1
 8000a86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f042 0204 	orr.w	r2, r2, #4
 8000a96:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f042 0202 	orr.w	r2, r2, #2
 8000aa6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	699a      	ldr	r2, [r3, #24]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f042 0201 	orr.w	r2, r2, #1
 8000ab6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2200      	movs	r2, #0
 8000abc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	f000f800 	.word	0xf000f800

08000ad8 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */ 
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <HAL_LTDC_IRQHandler>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.  
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_TE) != RESET)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000afa:	f003 0304 	and.w	r3, r3, #4
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d025      	beq.n	8000b4e <HAL_LTDC_IRQHandler+0x62>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_TE) != RESET)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b08:	f003 0304 	and.w	r3, r3, #4
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d01e      	beq.n	8000b4e <HAL_LTDC_IRQHandler+0x62>
    {
      /* Disable the transfer Error interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f022 0204 	bic.w	r2, r2, #4
 8000b1e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the transfer error flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2204      	movs	r2, #4
 8000b26:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Update error code */
      hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000b2e:	f043 0201 	orr.w	r2, r3, #1
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_ERROR;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2204      	movs	r2, #4
 8000b3c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2200      	movs	r2, #0
 8000b44:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

      /* Transfer error Callback */
      HAL_LTDC_ErrorCallback(hltdc);
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f000 f87b 	bl	8000c44 <HAL_LTDC_ErrorCallback>
    }
  }
  /* FIFO underrun Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_FU) != RESET)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b54:	f003 0302 	and.w	r3, r3, #2
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d025      	beq.n	8000ba8 <HAL_LTDC_IRQHandler+0xbc>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_FU) != RESET)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b62:	f003 0302 	and.w	r3, r3, #2
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d01e      	beq.n	8000ba8 <HAL_LTDC_IRQHandler+0xbc>
    {
      /* Disable the FIFO underrun interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f022 0202 	bic.w	r2, r2, #2
 8000b78:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the FIFO underrun flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2202      	movs	r2, #2
 8000b80:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Update error code */
      hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000b88:	f043 0202 	orr.w	r2, r3, #2
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_ERROR;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2204      	movs	r2, #4
 8000b96:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
      /* Transfer error Callback */
      HAL_LTDC_ErrorCallback(hltdc);
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f000 f84e 	bl	8000c44 <HAL_LTDC_ErrorCallback>
    }
  }
  /* Line Interrupt management ************************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_LI) != RESET)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d01d      	beq.n	8000bf2 <HAL_LTDC_IRQHandler+0x106>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_LI) != RESET)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d016      	beq.n	8000bf2 <HAL_LTDC_IRQHandler+0x106>
    {
      /* Disable the Line interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f022 0201 	bic.w	r2, r2, #1
 8000bd2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the Line interrupt flag */  
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2201      	movs	r2, #1
 8000bda:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_READY;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2201      	movs	r2, #1
 8000be0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2200      	movs	r2, #0
 8000be8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

      /* Line interrupt Callback */
      HAL_LTDC_LineEventCallback(hltdc);
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f000 f833 	bl	8000c58 <HAL_LTDC_LineEventCallback>
    }
  }
  /* Register reload Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_RR) != RESET)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bf8:	f003 0308 	and.w	r3, r3, #8
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d01d      	beq.n	8000c3c <HAL_LTDC_IRQHandler+0x150>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_RR) != RESET)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c06:	f003 0308 	and.w	r3, r3, #8
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d016      	beq.n	8000c3c <HAL_LTDC_IRQHandler+0x150>
    {
      /* Disable the register reload interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f022 0208 	bic.w	r2, r2, #8
 8000c1c:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Clear the register reload flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2208      	movs	r2, #8
 8000c24:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_READY;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2201      	movs	r2, #1
 8000c2a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
      
      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2200      	movs	r2, #0
 8000c32:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
      /* Register reload interrupt Callback */
      HAL_LTDC_ReloadEventCallback(hltdc);
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f000 f818 	bl	8000c6c <HAL_LTDC_ReloadEventCallback>
    }
  }  
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 8000c80:	b5b0      	push	{r4, r5, r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d101      	bne.n	8000c9a <HAL_LTDC_ConfigLayer+0x1a>
 8000c96:	2302      	movs	r3, #2
 8000c98:	e02c      	b.n	8000cf4 <HAL_LTDC_ConfigLayer+0x74>
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	2202      	movs	r2, #2
 8000ca6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2134      	movs	r1, #52	; 0x34
 8000cb0:	fb01 f303 	mul.w	r3, r1, r3
 8000cb4:	4413      	add	r3, r2
 8000cb6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	4614      	mov	r4, r2
 8000cbe:	461d      	mov	r5, r3
 8000cc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ccc:	682b      	ldr	r3, [r5, #0]
 8000cce:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	68b9      	ldr	r1, [r7, #8]
 8000cd4:	68f8      	ldr	r0, [r7, #12]
 8000cd6:	f000 f81f 	bl	8000d18 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2201      	movs	r2, #1
 8000ce0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	2200      	movs	r2, #0
 8000cee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8000cf2:	2300      	movs	r3, #0
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bdb0      	pop	{r4, r5, r7, pc}

08000cfc <HAL_LTDC_GetState>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8000d0a:	b2db      	uxtb	r3, r3
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b089      	sub	sp, #36	; 0x24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	685a      	ldr	r2, [r3, #4]
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	0c1b      	lsrs	r3, r3, #16
 8000d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d40:	4413      	add	r3, r2
 8000d42:	041b      	lsls	r3, r3, #16
 8000d44:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	01db      	lsls	r3, r3, #7
 8000d50:	4413      	add	r3, r2
 8000d52:	3384      	adds	r3, #132	; 0x84
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	6812      	ldr	r2, [r2, #0]
 8000d5a:	4611      	mov	r1, r2
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	01d2      	lsls	r2, r2, #7
 8000d60:	440a      	add	r2, r1
 8000d62:	3284      	adds	r2, #132	; 0x84
 8000d64:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8000d68:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	0c1b      	lsrs	r3, r3, #16
 8000d76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d7a:	4413      	add	r3, r2
 8000d7c:	1c5a      	adds	r2, r3, #1
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4619      	mov	r1, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	01db      	lsls	r3, r3, #7
 8000d88:	440b      	add	r3, r1
 8000d8a:	3384      	adds	r3, #132	; 0x84
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	604b      	str	r3, [r1, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	68da      	ldr	r2, [r3, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000da2:	4413      	add	r3, r2
 8000da4:	041b      	lsls	r3, r3, #16
 8000da6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	461a      	mov	r2, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	01db      	lsls	r3, r3, #7
 8000db2:	4413      	add	r3, r2
 8000db4:	3384      	adds	r3, #132	; 0x84
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	68fa      	ldr	r2, [r7, #12]
 8000dba:	6812      	ldr	r2, [r2, #0]
 8000dbc:	4611      	mov	r1, r2
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	01d2      	lsls	r2, r2, #7
 8000dc2:	440a      	add	r2, r1
 8000dc4:	3284      	adds	r2, #132	; 0x84
 8000dc6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8000dca:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	689a      	ldr	r2, [r3, #8]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000dda:	4413      	add	r3, r2
 8000ddc:	1c5a      	adds	r2, r3, #1
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4619      	mov	r1, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	01db      	lsls	r3, r3, #7
 8000de8:	440b      	add	r3, r1
 8000dea:	3384      	adds	r3, #132	; 0x84
 8000dec:	4619      	mov	r1, r3
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	01db      	lsls	r3, r3, #7
 8000dfe:	4413      	add	r3, r2
 8000e00:	3384      	adds	r3, #132	; 0x84
 8000e02:	691b      	ldr	r3, [r3, #16]
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	6812      	ldr	r2, [r2, #0]
 8000e08:	4611      	mov	r1, r2
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	01d2      	lsls	r2, r2, #7
 8000e0e:	440a      	add	r2, r1
 8000e10:	3284      	adds	r2, #132	; 0x84
 8000e12:	f023 0307 	bic.w	r3, r3, #7
 8000e16:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	01db      	lsls	r3, r3, #7
 8000e22:	4413      	add	r3, r2
 8000e24:	3384      	adds	r3, #132	; 0x84
 8000e26:	461a      	mov	r2, r3
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	691b      	ldr	r3, [r3, #16]
 8000e2c:	6113      	str	r3, [r2, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000e34:	021b      	lsls	r3, r3, #8
 8000e36:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000e3e:	041b      	lsls	r3, r3, #16
 8000e40:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	061b      	lsls	r3, r3, #24
 8000e48:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	01db      	lsls	r3, r3, #7
 8000e54:	4413      	add	r3, r2
 8000e56:	3384      	adds	r3, #132	; 0x84
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	01db      	lsls	r3, r3, #7
 8000e64:	4413      	add	r3, r2
 8000e66:	3384      	adds	r3, #132	; 0x84
 8000e68:	461a      	mov	r2, r3
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000e74:	461a      	mov	r2, r3
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	431a      	orrs	r2, r3
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	431a      	orrs	r2, r3
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4619      	mov	r1, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	01db      	lsls	r3, r3, #7
 8000e88:	440b      	add	r3, r1
 8000e8a:	3384      	adds	r3, #132	; 0x84
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	01db      	lsls	r3, r3, #7
 8000e9e:	4413      	add	r3, r2
 8000ea0:	3384      	adds	r3, #132	; 0x84
 8000ea2:	695b      	ldr	r3, [r3, #20]
 8000ea4:	68fa      	ldr	r2, [r7, #12]
 8000ea6:	6812      	ldr	r2, [r2, #0]
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	01d2      	lsls	r2, r2, #7
 8000eae:	440a      	add	r2, r1
 8000eb0:	3284      	adds	r2, #132	; 0x84
 8000eb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000eb6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	01db      	lsls	r3, r3, #7
 8000ec2:	4413      	add	r3, r2
 8000ec4:	3384      	adds	r3, #132	; 0x84
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	695b      	ldr	r3, [r3, #20]
 8000ecc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	01db      	lsls	r3, r3, #7
 8000ed8:	4413      	add	r3, r2
 8000eda:	3384      	adds	r3, #132	; 0x84
 8000edc:	69da      	ldr	r2, [r3, #28]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	01db      	lsls	r3, r3, #7
 8000ee8:	440b      	add	r3, r1
 8000eea:	3384      	adds	r3, #132	; 0x84
 8000eec:	4619      	mov	r1, r3
 8000eee:	4b58      	ldr	r3, [pc, #352]	; (8001050 <LTDC_SetConfig+0x338>)
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	69da      	ldr	r2, [r3, #28]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	6a1b      	ldr	r3, [r3, #32]
 8000efc:	68f9      	ldr	r1, [r7, #12]
 8000efe:	6809      	ldr	r1, [r1, #0]
 8000f00:	4608      	mov	r0, r1
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	01c9      	lsls	r1, r1, #7
 8000f06:	4401      	add	r1, r0
 8000f08:	3184      	adds	r1, #132	; 0x84
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61cb      	str	r3, [r1, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	01db      	lsls	r3, r3, #7
 8000f18:	4413      	add	r3, r2
 8000f1a:	3384      	adds	r3, #132	; 0x84
 8000f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	461a      	mov	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	01db      	lsls	r3, r3, #7
 8000f28:	4413      	add	r3, r2
 8000f2a:	3384      	adds	r3, #132	; 0x84
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	2300      	movs	r3, #0
 8000f30:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	461a      	mov	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	01db      	lsls	r3, r3, #7
 8000f3c:	4413      	add	r3, r2
 8000f3e:	3384      	adds	r3, #132	; 0x84
 8000f40:	461a      	mov	r2, r3
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f46:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	691b      	ldr	r3, [r3, #16]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d102      	bne.n	8000f56 <LTDC_SetConfig+0x23e>
  {
    tmp = 4;
 8000f50:	2304      	movs	r3, #4
 8000f52:	61fb      	str	r3, [r7, #28]
 8000f54:	e01b      	b.n	8000f8e <LTDC_SetConfig+0x276>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	691b      	ldr	r3, [r3, #16]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d102      	bne.n	8000f64 <LTDC_SetConfig+0x24c>
  {
    tmp = 3;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	61fb      	str	r3, [r7, #28]
 8000f62:	e014      	b.n	8000f8e <LTDC_SetConfig+0x276>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	691b      	ldr	r3, [r3, #16]
 8000f68:	2b04      	cmp	r3, #4
 8000f6a:	d00b      	beq.n	8000f84 <LTDC_SetConfig+0x26c>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d007      	beq.n	8000f84 <LTDC_SetConfig+0x26c>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8000f78:	2b03      	cmp	r3, #3
 8000f7a:	d003      	beq.n	8000f84 <LTDC_SetConfig+0x26c>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8000f80:	2b07      	cmp	r3, #7
 8000f82:	d102      	bne.n	8000f8a <LTDC_SetConfig+0x272>
  {
    tmp = 2;
 8000f84:	2302      	movs	r3, #2
 8000f86:	61fb      	str	r3, [r7, #28]
 8000f88:	e001      	b.n	8000f8e <LTDC_SetConfig+0x276>
  }
  else
  {
    tmp = 1;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	61fb      	str	r3, [r7, #28]
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	01db      	lsls	r3, r3, #7
 8000f98:	4413      	add	r3, r2
 8000f9a:	3384      	adds	r3, #132	; 0x84
 8000f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	6812      	ldr	r2, [r2, #0]
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	01d2      	lsls	r2, r2, #7
 8000fa8:	440a      	add	r2, r1
 8000faa:	3284      	adds	r2, #132	; 0x84
 8000fac:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8000fb0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb6:	69fa      	ldr	r2, [r7, #28]
 8000fb8:	fb02 f303 	mul.w	r3, r2, r3
 8000fbc:	041a      	lsls	r2, r3, #16
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	6859      	ldr	r1, [r3, #4]
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	1acb      	subs	r3, r1, r3
 8000fc8:	69f9      	ldr	r1, [r7, #28]
 8000fca:	fb01 f303 	mul.w	r3, r1, r3
 8000fce:	3303      	adds	r3, #3
 8000fd0:	68f9      	ldr	r1, [r7, #12]
 8000fd2:	6809      	ldr	r1, [r1, #0]
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	01c9      	lsls	r1, r1, #7
 8000fda:	4401      	add	r1, r0
 8000fdc:	3184      	adds	r1, #132	; 0x84
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	01db      	lsls	r3, r3, #7
 8000fec:	4413      	add	r3, r2
 8000fee:	3384      	adds	r3, #132	; 0x84
 8000ff0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	01db      	lsls	r3, r3, #7
 8000ffc:	440b      	add	r3, r1
 8000ffe:	3384      	adds	r3, #132	; 0x84
 8001000:	4619      	mov	r1, r3
 8001002:	4b14      	ldr	r3, [pc, #80]	; (8001054 <LTDC_SetConfig+0x33c>)
 8001004:	4013      	ands	r3, r2
 8001006:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	01db      	lsls	r3, r3, #7
 8001012:	4413      	add	r3, r2
 8001014:	3384      	adds	r3, #132	; 0x84
 8001016:	461a      	mov	r2, r3
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800101c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	461a      	mov	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	01db      	lsls	r3, r3, #7
 8001028:	4413      	add	r3, r2
 800102a:	3384      	adds	r3, #132	; 0x84
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	6812      	ldr	r2, [r2, #0]
 8001032:	4611      	mov	r1, r2
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	01d2      	lsls	r2, r2, #7
 8001038:	440a      	add	r2, r1
 800103a:	3284      	adds	r2, #132	; 0x84
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6013      	str	r3, [r2, #0]
}
 8001042:	bf00      	nop
 8001044:	3724      	adds	r7, #36	; 0x24
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	fffff8f8 	.word	0xfffff8f8
 8001054:	fffff800 	.word	0xfffff800

08001058 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800105e:	4b0f      	ldr	r3, [pc, #60]	; (800109c <HAL_MspInit+0x44>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	4a0e      	ldr	r2, [pc, #56]	; (800109c <HAL_MspInit+0x44>)
 8001064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001068:	6413      	str	r3, [r2, #64]	; 0x40
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <HAL_MspInit+0x44>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <HAL_MspInit+0x44>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	4a08      	ldr	r2, [pc, #32]	; (800109c <HAL_MspInit+0x44>)
 800107c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001080:	6453      	str	r3, [r2, #68]	; 0x44
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_MspInit+0x44>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800108a:	603b      	str	r3, [r7, #0]
 800108c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	40023800 	.word	0x40023800

080010a0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <HAL_CRC_MspInit+0x38>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d10b      	bne.n	80010ca <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80010b2:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <HAL_CRC_MspInit+0x3c>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a09      	ldr	r2, [pc, #36]	; (80010dc <HAL_CRC_MspInit+0x3c>)
 80010b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b07      	ldr	r3, [pc, #28]	; (80010dc <HAL_CRC_MspInit+0x3c>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80010ca:	bf00      	nop
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	40023000 	.word	0x40023000
 80010dc:	40023800 	.word	0x40023800

080010e0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <HAL_DMA2D_MspInit+0x38>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d10b      	bne.n	800110a <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80010f2:	4b0a      	ldr	r3, [pc, #40]	; (800111c <HAL_DMA2D_MspInit+0x3c>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a09      	ldr	r2, [pc, #36]	; (800111c <HAL_DMA2D_MspInit+0x3c>)
 80010f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b07      	ldr	r3, [pc, #28]	; (800111c <HAL_DMA2D_MspInit+0x3c>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800110a:	bf00      	nop
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	4002b000 	.word	0x4002b000
 800111c:	40023800 	.word	0x40023800

08001120 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d101      	bne.n	8001134 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e025      	b.n	8001180 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	d106      	bne.n	800114e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 f81d 	bl	8001188 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2202      	movs	r2, #2
 8001152:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3304      	adds	r3, #4
 800115e:	4619      	mov	r1, r3
 8001160:	4610      	mov	r0, r2
 8001162:	f000 f89f 	bl	80012a4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6818      	ldr	r0, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	461a      	mov	r2, r3
 8001170:	6839      	ldr	r1, [r7, #0]
 8001172:	f000 f909 	bl	8001388 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2201      	movs	r2, #1
 800117a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800117e:	2300      	movs	r3, #0
}
 8001180:	4618      	mov	r0, r3
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d101      	bne.n	80011b8 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80011b4:	2302      	movs	r3, #2
 80011b6:	e018      	b.n	80011ea <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	2202      	movs	r2, #2
 80011bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	68b9      	ldr	r1, [r7, #8]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 f95d 	bl	8001488 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d104      	bne.n	80011e0 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2205      	movs	r2, #5
 80011da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80011de:	e003      	b.n	80011e8 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2201      	movs	r2, #1
 80011e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
 80011fa:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d101      	bne.n	800120c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8001208:	2302      	movs	r3, #2
 800120a:	e00e      	b.n	800122a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2202      	movs	r2, #2
 8001210:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	6839      	ldr	r1, [r7, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f000 f955 	bl	80014ca <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2201      	movs	r2, #1
 8001224:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <LTDC_IRQHandler>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */
void LTDC_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  HAL_LTDC_IRQHandler(&hLtdcHandler);
 8001238:	4802      	ldr	r0, [pc, #8]	; (8001244 <LTDC_IRQHandler+0x10>)
 800123a:	f7ff fc57 	bl	8000aec <HAL_LTDC_IRQHandler>
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000290 	.word	0x20000290

08001248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125a:	e7fe      	b.n	800125a <HardFault_Handler+0x4>

0800125c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <MemManage_Handler+0x4>

08001262 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001266:	e7fe      	b.n	8001266 <BusFault_Handler+0x4>

08001268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800126c:	e7fe      	b.n	800126c <UsageFault_Handler+0x4>

0800126e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800129c:	f000 f9a4 	bl	80015e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d027      	beq.n	800130e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80012c4:	68fa      	ldr	r2, [r7, #12]
 80012c6:	4b2f      	ldr	r3, [pc, #188]	; (8001384 <FMC_SDRAM_Init+0xe0>)
 80012c8:	4013      	ands	r3, r2
 80012ca:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80012d4:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 80012da:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 80012e0:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 80012e6:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 80012ec:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 80012f2:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 80012f8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80012fe:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8001300:	68fa      	ldr	r2, [r7, #12]
 8001302:	4313      	orrs	r3, r2
 8001304:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	68fa      	ldr	r2, [r7, #12]
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	e032      	b.n	8001374 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800131a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8001324:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800132a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	4313      	orrs	r3, r2
 8001330:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8001338:	68ba      	ldr	r2, [r7, #8]
 800133a:	4b12      	ldr	r3, [pc, #72]	; (8001384 <FMC_SDRAM_Init+0xe0>)
 800133c:	4013      	ands	r3, r2
 800133e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8001348:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800134e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8001354:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800135a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8001360:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	4313      	orrs	r3, r2
 8001366:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	68ba      	ldr	r2, [r7, #8]
 8001372:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	ffff8000 	.word	0xffff8000

08001388 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8001388:	b480      	push	{r7}
 800138a:	b087      	sub	sp, #28
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d02e      	beq.n	8001400 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80013ae:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80013be:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	3b01      	subs	r3, #1
 80013c6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80013c8:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80013d2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	3b01      	subs	r3, #1
 80013da:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80013dc:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80013e6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	3b01      	subs	r3, #1
 80013ee:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80013f0:	4313      	orrs	r3, r2
 80013f2:	697a      	ldr	r2, [r7, #20]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	e039      	b.n	8001474 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	4b1e      	ldr	r3, [pc, #120]	; (8001484 <FMC_SDRAM_Timing_Init+0xfc>)
 800140a:	4013      	ands	r3, r2
 800140c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	3b01      	subs	r3, #1
 8001414:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	3b01      	subs	r3, #1
 800141c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800141e:	4313      	orrs	r3, r2
 8001420:	697a      	ldr	r2, [r7, #20]
 8001422:	4313      	orrs	r3, r2
 8001424:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001432:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	3b01      	subs	r3, #1
 8001440:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8001442:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	3b01      	subs	r3, #1
 800144a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800144c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	3b01      	subs	r3, #1
 8001454:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8001456:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	3b01      	subs	r3, #1
 800145e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8001460:	4313      	orrs	r3, r2
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	697a      	ldr	r2, [r7, #20]
 800146c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	371c      	adds	r7, #28
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	ff0f0fff 	.word	0xff0f0fff

08001488 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8001488:	b480      	push	{r7}
 800148a:	b087      	sub	sp, #28
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80014a0:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80014aa:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80014b2:	4313      	orrs	r3, r2
 80014b4:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	371c      	adds	r7, #28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b083      	sub	sp, #12
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
 80014d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	695a      	ldr	r2, [r3, #20]
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	431a      	orrs	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <SystemInit+0x28>)
 80014f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014fa:	4a07      	ldr	r2, [pc, #28]	; (8001518 <SystemInit+0x28>)
 80014fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001500:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001504:	4b04      	ldr	r3, [pc, #16]	; (8001518 <SystemInit+0x28>)
 8001506:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800150a:	609a      	str	r2, [r3, #8]
#endif
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800151c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001554 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001520:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001522:	e003      	b.n	800152c <LoopCopyDataInit>

08001524 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001524:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001526:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001528:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800152a:	3104      	adds	r1, #4

0800152c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800152c:	480b      	ldr	r0, [pc, #44]	; (800155c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001530:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001532:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001534:	d3f6      	bcc.n	8001524 <CopyDataInit>
  ldr  r2, =_sbss
 8001536:	4a0b      	ldr	r2, [pc, #44]	; (8001564 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001538:	e002      	b.n	8001540 <LoopFillZerobss>

0800153a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800153a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800153c:	f842 3b04 	str.w	r3, [r2], #4

08001540 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001542:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001544:	d3f9      	bcc.n	800153a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001546:	f7ff ffd3 	bl	80014f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800154a:	f004 f98f 	bl	800586c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800154e:	f7ff f86d 	bl	800062c <main>
  bx  lr    
 8001552:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001554:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001558:	080073c4 	.word	0x080073c4
  ldr  r0, =_sdata
 800155c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001560:	20000040 	.word	0x20000040
  ldr  r2, =_sbss
 8001564:	20000040 	.word	0x20000040
  ldr  r3, = _ebss
 8001568:	2000036c 	.word	0x2000036c

0800156c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800156c:	e7fe      	b.n	800156c <ADC_IRQHandler>

0800156e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001572:	2003      	movs	r0, #3
 8001574:	f000 f94a 	bl	800180c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001578:	2000      	movs	r0, #0
 800157a:	f000 f805 	bl	8001588 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800157e:	f7ff fd6b 	bl	8001058 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	bd80      	pop	{r7, pc}

08001588 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <HAL_InitTick+0x54>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_InitTick+0x58>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	4619      	mov	r1, r3
 800159a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159e:	fbb3 f3f1 	udiv	r3, r3, r1
 80015a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 f965 	bl	8001876 <HAL_SYSTICK_Config>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e00e      	b.n	80015d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b0f      	cmp	r3, #15
 80015ba:	d80a      	bhi.n	80015d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015bc:	2200      	movs	r2, #0
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015c4:	f000 f92d 	bl	8001822 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c8:	4a06      	ldr	r2, [pc, #24]	; (80015e4 <HAL_InitTick+0x5c>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
 80015d0:	e000      	b.n	80015d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000000 	.word	0x20000000
 80015e0:	20000008 	.word	0x20000008
 80015e4:	20000004 	.word	0x20000004

080015e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_IncTick+0x20>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	461a      	mov	r2, r3
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_IncTick+0x24>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4413      	add	r3, r2
 80015f8:	4a04      	ldr	r2, [pc, #16]	; (800160c <HAL_IncTick+0x24>)
 80015fa:	6013      	str	r3, [r2, #0]
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	20000008 	.word	0x20000008
 800160c:	2000028c 	.word	0x2000028c

08001610 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return uwTick;
 8001614:	4b03      	ldr	r3, [pc, #12]	; (8001624 <HAL_GetTick+0x14>)
 8001616:	681b      	ldr	r3, [r3, #0]
}
 8001618:	4618      	mov	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	2000028c 	.word	0x2000028c

08001628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001630:	f7ff ffee 	bl	8001610 <HAL_GetTick>
 8001634:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001640:	d005      	beq.n	800164e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <HAL_Delay+0x40>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	461a      	mov	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4413      	add	r3, r2
 800164c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800164e:	bf00      	nop
 8001650:	f7ff ffde 	bl	8001610 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	429a      	cmp	r2, r3
 800165e:	d8f7      	bhi.n	8001650 <HAL_Delay+0x28>
  {
  }
}
 8001660:	bf00      	nop
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000008 	.word	0x20000008

0800166c <__NVIC_SetPriorityGrouping>:
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800167c:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <__NVIC_SetPriorityGrouping+0x40>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001688:	4013      	ands	r3, r2
 800168a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <__NVIC_SetPriorityGrouping+0x44>)
 8001696:	4313      	orrs	r3, r2
 8001698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800169a:	4a04      	ldr	r2, [pc, #16]	; (80016ac <__NVIC_SetPriorityGrouping+0x40>)
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	60d3      	str	r3, [r2, #12]
}
 80016a0:	bf00      	nop
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	e000ed00 	.word	0xe000ed00
 80016b0:	05fa0000 	.word	0x05fa0000

080016b4 <__NVIC_GetPriorityGrouping>:
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b8:	4b04      	ldr	r3, [pc, #16]	; (80016cc <__NVIC_GetPriorityGrouping+0x18>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	0a1b      	lsrs	r3, r3, #8
 80016be:	f003 0307 	and.w	r3, r3, #7
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <__NVIC_EnableIRQ>:
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	db0b      	blt.n	80016fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	f003 021f 	and.w	r2, r3, #31
 80016e8:	4907      	ldr	r1, [pc, #28]	; (8001708 <__NVIC_EnableIRQ+0x38>)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	095b      	lsrs	r3, r3, #5
 80016f0:	2001      	movs	r0, #1
 80016f2:	fa00 f202 	lsl.w	r2, r0, r2
 80016f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000e100 	.word	0xe000e100

0800170c <__NVIC_SetPriority>:
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	6039      	str	r1, [r7, #0]
 8001716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171c:	2b00      	cmp	r3, #0
 800171e:	db0a      	blt.n	8001736 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	b2da      	uxtb	r2, r3
 8001724:	490c      	ldr	r1, [pc, #48]	; (8001758 <__NVIC_SetPriority+0x4c>)
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	0112      	lsls	r2, r2, #4
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	440b      	add	r3, r1
 8001730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001734:	e00a      	b.n	800174c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	b2da      	uxtb	r2, r3
 800173a:	4908      	ldr	r1, [pc, #32]	; (800175c <__NVIC_SetPriority+0x50>)
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	3b04      	subs	r3, #4
 8001744:	0112      	lsls	r2, r2, #4
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	440b      	add	r3, r1
 800174a:	761a      	strb	r2, [r3, #24]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	e000e100 	.word	0xe000e100
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <NVIC_EncodePriority>:
{
 8001760:	b480      	push	{r7}
 8001762:	b089      	sub	sp, #36	; 0x24
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f1c3 0307 	rsb	r3, r3, #7
 800177a:	2b04      	cmp	r3, #4
 800177c:	bf28      	it	cs
 800177e:	2304      	movcs	r3, #4
 8001780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3304      	adds	r3, #4
 8001786:	2b06      	cmp	r3, #6
 8001788:	d902      	bls.n	8001790 <NVIC_EncodePriority+0x30>
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3b03      	subs	r3, #3
 800178e:	e000      	b.n	8001792 <NVIC_EncodePriority+0x32>
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001794:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43da      	mvns	r2, r3
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	401a      	ands	r2, r3
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	fa01 f303 	lsl.w	r3, r1, r3
 80017b2:	43d9      	mvns	r1, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b8:	4313      	orrs	r3, r2
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3724      	adds	r7, #36	; 0x24
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
	...

080017c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017d8:	d301      	bcc.n	80017de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017da:	2301      	movs	r3, #1
 80017dc:	e00f      	b.n	80017fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017de:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <SysTick_Config+0x40>)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017e6:	210f      	movs	r1, #15
 80017e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017ec:	f7ff ff8e 	bl	800170c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f0:	4b05      	ldr	r3, [pc, #20]	; (8001808 <SysTick_Config+0x40>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017f6:	4b04      	ldr	r3, [pc, #16]	; (8001808 <SysTick_Config+0x40>)
 80017f8:	2207      	movs	r2, #7
 80017fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	e000e010 	.word	0xe000e010

0800180c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff ff29 	bl	800166c <__NVIC_SetPriorityGrouping>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001822:	b580      	push	{r7, lr}
 8001824:	b086      	sub	sp, #24
 8001826:	af00      	add	r7, sp, #0
 8001828:	4603      	mov	r3, r0
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	607a      	str	r2, [r7, #4]
 800182e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001834:	f7ff ff3e 	bl	80016b4 <__NVIC_GetPriorityGrouping>
 8001838:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	68b9      	ldr	r1, [r7, #8]
 800183e:	6978      	ldr	r0, [r7, #20]
 8001840:	f7ff ff8e 	bl	8001760 <NVIC_EncodePriority>
 8001844:	4602      	mov	r2, r0
 8001846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184a:	4611      	mov	r1, r2
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ff5d 	bl	800170c <__NVIC_SetPriority>
}
 8001852:	bf00      	nop
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	4603      	mov	r3, r0
 8001862:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ff31 	bl	80016d0 <__NVIC_EnableIRQ>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff ffa2 	bl	80017c8 <SysTick_Config>
 8001884:	4603      	mov	r3, r0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e054      	b.n	800194c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	7f5b      	ldrb	r3, [r3, #29]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d105      	bne.n	80018b8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff fbf4 	bl	80010a0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2202      	movs	r2, #2
 80018bc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	791b      	ldrb	r3, [r3, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10c      	bne.n	80018e0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a22      	ldr	r2, [pc, #136]	; (8001954 <HAL_CRC_Init+0xc4>)
 80018cc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 0218 	bic.w	r2, r2, #24
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	e00c      	b.n	80018fa <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6899      	ldr	r1, [r3, #8]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	461a      	mov	r2, r3
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 f834 	bl	8001958 <HAL_CRCEx_Polynomial_Set>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e028      	b.n	800194c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	795b      	ldrb	r3, [r3, #5]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d105      	bne.n	800190e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800190a:	611a      	str	r2, [r3, #16]
 800190c:	e004      	b.n	8001918 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	6912      	ldr	r2, [r2, #16]
 8001916:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	695a      	ldr	r2, [r3, #20]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	430a      	orrs	r2, r1
 800192c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	699a      	ldr	r2, [r3, #24]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	430a      	orrs	r2, r1
 8001942:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	04c11db7 	.word	0x04c11db7

08001958 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001958:	b480      	push	{r7}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001964:	2300      	movs	r3, #0
 8001966:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001968:	231f      	movs	r3, #31
 800196a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800196c:	bf00      	nop
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1e5a      	subs	r2, r3, #1
 8001972:	613a      	str	r2, [r7, #16]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d009      	beq.n	800198c <HAL_CRCEx_Polynomial_Set+0x34>
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	f003 031f 	and.w	r3, r3, #31
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	fa22 f303 	lsr.w	r3, r2, r3
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0f0      	beq.n	800196e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b18      	cmp	r3, #24
 8001990:	d846      	bhi.n	8001a20 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001992:	a201      	add	r2, pc, #4	; (adr r2, 8001998 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001998:	08001a27 	.word	0x08001a27
 800199c:	08001a21 	.word	0x08001a21
 80019a0:	08001a21 	.word	0x08001a21
 80019a4:	08001a21 	.word	0x08001a21
 80019a8:	08001a21 	.word	0x08001a21
 80019ac:	08001a21 	.word	0x08001a21
 80019b0:	08001a21 	.word	0x08001a21
 80019b4:	08001a21 	.word	0x08001a21
 80019b8:	08001a15 	.word	0x08001a15
 80019bc:	08001a21 	.word	0x08001a21
 80019c0:	08001a21 	.word	0x08001a21
 80019c4:	08001a21 	.word	0x08001a21
 80019c8:	08001a21 	.word	0x08001a21
 80019cc:	08001a21 	.word	0x08001a21
 80019d0:	08001a21 	.word	0x08001a21
 80019d4:	08001a21 	.word	0x08001a21
 80019d8:	08001a09 	.word	0x08001a09
 80019dc:	08001a21 	.word	0x08001a21
 80019e0:	08001a21 	.word	0x08001a21
 80019e4:	08001a21 	.word	0x08001a21
 80019e8:	08001a21 	.word	0x08001a21
 80019ec:	08001a21 	.word	0x08001a21
 80019f0:	08001a21 	.word	0x08001a21
 80019f4:	08001a21 	.word	0x08001a21
 80019f8:	080019fd 	.word	0x080019fd
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	2b06      	cmp	r3, #6
 8001a00:	d913      	bls.n	8001a2a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001a06:	e010      	b.n	8001a2a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	2b07      	cmp	r3, #7
 8001a0c:	d90f      	bls.n	8001a2e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001a12:	e00c      	b.n	8001a2e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	2b0f      	cmp	r3, #15
 8001a18:	d90b      	bls.n	8001a32 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001a1e:	e008      	b.n	8001a32 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	75fb      	strb	r3, [r7, #23]
      break;
 8001a24:	e006      	b.n	8001a34 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001a26:	bf00      	nop
 8001a28:	e004      	b.n	8001a34 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001a2a:	bf00      	nop
 8001a2c:	e002      	b.n	8001a34 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001a2e:	bf00      	nop
 8001a30:	e000      	b.n	8001a34 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001a32:	bf00      	nop
  }
  if (status == HAL_OK)
 8001a34:	7dfb      	ldrb	r3, [r7, #23]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10d      	bne.n	8001a56 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f023 0118 	bic.w	r1, r3, #24
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	371c      	adds	r7, #28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a70:	f7ff fdce 	bl	8001610 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e099      	b.n	8001bb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f022 0201 	bic.w	r2, r2, #1
 8001a9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aa0:	e00f      	b.n	8001ac2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001aa2:	f7ff fdb5 	bl	8001610 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b05      	cmp	r3, #5
 8001aae:	d908      	bls.n	8001ac2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2220      	movs	r2, #32
 8001ab4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2203      	movs	r2, #3
 8001aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e078      	b.n	8001bb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1e8      	bne.n	8001aa2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	4b38      	ldr	r3, [pc, #224]	; (8001bbc <HAL_DMA_Init+0x158>)
 8001adc:	4013      	ands	r3, r2
 8001ade:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001afa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b18:	2b04      	cmp	r3, #4
 8001b1a:	d107      	bne.n	8001b2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b24:	4313      	orrs	r3, r2
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f023 0307 	bic.w	r3, r3, #7
 8001b42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d117      	bne.n	8001b86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d00e      	beq.n	8001b86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f8bd 	bl	8001ce8 <DMA_CheckFifoParam>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d008      	beq.n	8001b86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2240      	movs	r2, #64	; 0x40
 8001b78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b82:	2301      	movs	r3, #1
 8001b84:	e016      	b.n	8001bb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f874 	bl	8001c7c <DMA_CalcBaseAndBitshift>
 8001b94:	4603      	mov	r3, r0
 8001b96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b9c:	223f      	movs	r2, #63	; 0x3f
 8001b9e:	409a      	lsls	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	f010803f 	.word	0xf010803f

08001bc0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e050      	b.n	8001c74 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d101      	bne.n	8001be2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001bde:	2302      	movs	r3, #2
 8001be0:	e048      	b.n	8001c74 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 0201 	bic.w	r2, r2, #1
 8001bf0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2200      	movs	r2, #0
 8001c18:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2221      	movs	r2, #33	; 0x21
 8001c20:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f82a 	bl	8001c7c <DMA_CalcBaseAndBitshift>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c30:	223f      	movs	r2, #63	; 0x3f
 8001c32:	409a      	lsls	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	3b10      	subs	r3, #16
 8001c8c:	4a13      	ldr	r2, [pc, #76]	; (8001cdc <DMA_CalcBaseAndBitshift+0x60>)
 8001c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c92:	091b      	lsrs	r3, r3, #4
 8001c94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c96:	4a12      	ldr	r2, [pc, #72]	; (8001ce0 <DMA_CalcBaseAndBitshift+0x64>)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2b03      	cmp	r3, #3
 8001ca8:	d908      	bls.n	8001cbc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <DMA_CalcBaseAndBitshift+0x68>)
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	1d1a      	adds	r2, r3, #4
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	659a      	str	r2, [r3, #88]	; 0x58
 8001cba:	e006      	b.n	8001cca <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <DMA_CalcBaseAndBitshift+0x68>)
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	aaaaaaab 	.word	0xaaaaaaab
 8001ce0:	080058f4 	.word	0x080058f4
 8001ce4:	fffffc00 	.word	0xfffffc00

08001ce8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d11f      	bne.n	8001d42 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	2b03      	cmp	r3, #3
 8001d06:	d855      	bhi.n	8001db4 <DMA_CheckFifoParam+0xcc>
 8001d08:	a201      	add	r2, pc, #4	; (adr r2, 8001d10 <DMA_CheckFifoParam+0x28>)
 8001d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d0e:	bf00      	nop
 8001d10:	08001d21 	.word	0x08001d21
 8001d14:	08001d33 	.word	0x08001d33
 8001d18:	08001d21 	.word	0x08001d21
 8001d1c:	08001db5 	.word	0x08001db5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d045      	beq.n	8001db8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d30:	e042      	b.n	8001db8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d3a:	d13f      	bne.n	8001dbc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d40:	e03c      	b.n	8001dbc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d4a:	d121      	bne.n	8001d90 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	d836      	bhi.n	8001dc0 <DMA_CheckFifoParam+0xd8>
 8001d52:	a201      	add	r2, pc, #4	; (adr r2, 8001d58 <DMA_CheckFifoParam+0x70>)
 8001d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d58:	08001d69 	.word	0x08001d69
 8001d5c:	08001d6f 	.word	0x08001d6f
 8001d60:	08001d69 	.word	0x08001d69
 8001d64:	08001d81 	.word	0x08001d81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8001d6c:	e02f      	b.n	8001dce <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d024      	beq.n	8001dc4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d7e:	e021      	b.n	8001dc4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d88:	d11e      	bne.n	8001dc8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d8e:	e01b      	b.n	8001dc8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d902      	bls.n	8001d9c <DMA_CheckFifoParam+0xb4>
 8001d96:	2b03      	cmp	r3, #3
 8001d98:	d003      	beq.n	8001da2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d9a:	e018      	b.n	8001dce <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8001da0:	e015      	b.n	8001dce <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00e      	beq.n	8001dcc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	73fb      	strb	r3, [r7, #15]
      break;
 8001db2:	e00b      	b.n	8001dcc <DMA_CheckFifoParam+0xe4>
      break;
 8001db4:	bf00      	nop
 8001db6:	e00a      	b.n	8001dce <DMA_CheckFifoParam+0xe6>
      break;
 8001db8:	bf00      	nop
 8001dba:	e008      	b.n	8001dce <DMA_CheckFifoParam+0xe6>
      break;
 8001dbc:	bf00      	nop
 8001dbe:	e006      	b.n	8001dce <DMA_CheckFifoParam+0xe6>
      break;
 8001dc0:	bf00      	nop
 8001dc2:	e004      	b.n	8001dce <DMA_CheckFifoParam+0xe6>
      break;
 8001dc4:	bf00      	nop
 8001dc6:	e002      	b.n	8001dce <DMA_CheckFifoParam+0xe6>
      break;   
 8001dc8:	bf00      	nop
 8001dca:	e000      	b.n	8001dce <DMA_CheckFifoParam+0xe6>
      break;
 8001dcc:	bf00      	nop
    }
  } 
  
  return status; 
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e039      	b.n	8001e62 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d106      	bne.n	8001e08 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff f96c 	bl	80010e0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e2c:	f023 0107 	bic.w	r1, r3, #7
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e42:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <HAL_DMA2D_Init+0x90>)
 8001e44:	4013      	ands	r3, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	68d1      	ldr	r1, [r2, #12]
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6812      	ldr	r2, [r2, #0]
 8001e4e:	430b      	orrs	r3, r1
 8001e50:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	ffffc000 	.word	0xffffc000

08001e70 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af02      	add	r7, sp, #8
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
 8001e7c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <HAL_DMA2D_Start+0x1c>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e018      	b.n	8001ebe <HAL_DMA2D_Start+0x4e>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2202      	movs	r2, #2
 8001e98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	68b9      	ldr	r1, [r7, #8]
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f000 f988 	bl	80021bc <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0201 	orr.w	r2, r2, #1
 8001eba:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b086      	sub	sp, #24
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d056      	beq.n	8001f90 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8001ee2:	f7ff fb95 	bl	8001610 <HAL_GetTick>
 8001ee6:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001ee8:	e04b      	b.n	8001f82 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d023      	beq.n	8001f44 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f003 0320 	and.w	r3, r3, #32
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d005      	beq.n	8001f12 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f0a:	f043 0202 	orr.w	r2, r3, #2
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d005      	beq.n	8001f28 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f20:	f043 0201 	orr.w	r2, r3, #1
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2221      	movs	r2, #33	; 0x21
 8001f2e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2204      	movs	r2, #4
 8001f34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e0a5      	b.n	8002090 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f4a:	d01a      	beq.n	8001f82 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8001f4c:	f7ff fb60 	bl	8001610 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d302      	bcc.n	8001f62 <HAL_DMA2D_PollForTransfer+0x9c>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10f      	bne.n	8001f82 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f66:	f043 0220 	orr.w	r2, r3, #32
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2203      	movs	r2, #3
 8001f72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e086      	b.n	8002090 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0ac      	beq.n	8001eea <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	f003 0320 	and.w	r3, r3, #32
 8001f9a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa2:	f003 0320 	and.w	r3, r3, #32
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d061      	beq.n	8002076 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001fb2:	f7ff fb2d 	bl	8001610 <HAL_GetTick>
 8001fb6:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001fb8:	e056      	b.n	8002068 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d02e      	beq.n	800202a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d005      	beq.n	8001fe2 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fda:	f043 0204 	orr.w	r2, r3, #4
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f003 0320 	and.w	r3, r3, #32
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d005      	beq.n	8001ff8 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff0:	f043 0202 	orr.w	r2, r3, #2
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d005      	beq.n	800200e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002006:	f043 0201 	orr.w	r2, r3, #1
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2229      	movs	r2, #41	; 0x29
 8002014:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2204      	movs	r2, #4
 800201a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e032      	b.n	8002090 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002030:	d01a      	beq.n	8002068 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002032:	f7ff faed 	bl	8001610 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	429a      	cmp	r2, r3
 8002040:	d302      	bcc.n	8002048 <HAL_DMA2D_PollForTransfer+0x182>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d10f      	bne.n	8002068 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204c:	f043 0220 	orr.w	r2, r3, #32
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2203      	movs	r2, #3
 8002058:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e013      	b.n	8002090 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 0310 	and.w	r3, r3, #16
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0a1      	beq.n	8001fba <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2212      	movs	r2, #18
 800207c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002098:	b480      	push	{r7}
 800209a:	b087      	sub	sp, #28
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d101      	bne.n	80020b8 <HAL_DMA2D_ConfigLayer+0x20>
 80020b4:	2302      	movs	r3, #2
 80020b6:	e079      	b.n	80021ac <HAL_DMA2D_ConfigLayer+0x114>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2202      	movs	r2, #2
 80020c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	011b      	lsls	r3, r3, #4
 80020cc:	3318      	adds	r3, #24
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	4413      	add	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	041b      	lsls	r3, r3, #16
 80020de:	4313      	orrs	r3, r2
 80020e0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80020e2:	4b35      	ldr	r3, [pc, #212]	; (80021b8 <HAL_DMA2D_ConfigLayer+0x120>)
 80020e4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b0a      	cmp	r3, #10
 80020ec:	d003      	beq.n	80020f6 <HAL_DMA2D_ConfigLayer+0x5e>
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b09      	cmp	r3, #9
 80020f4:	d107      	bne.n	8002106 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	4313      	orrs	r3, r2
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	e005      	b.n	8002112 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	061b      	lsls	r3, r3, #24
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	4313      	orrs	r3, r2
 8002110:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d120      	bne.n	800215a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	43db      	mvns	r3, r3
 8002122:	ea02 0103 	and.w	r1, r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	430a      	orrs	r2, r1
 800212e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	6812      	ldr	r2, [r2, #0]
 8002138:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b0a      	cmp	r3, #10
 8002140:	d003      	beq.n	800214a <HAL_DMA2D_ConfigLayer+0xb2>
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b09      	cmp	r3, #9
 8002148:	d127      	bne.n	800219a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002156:	629a      	str	r2, [r3, #40]	; 0x28
 8002158:	e01f      	b.n	800219a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	69da      	ldr	r2, [r3, #28]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	43db      	mvns	r3, r3
 8002164:	ea02 0103 	and.w	r1, r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	430a      	orrs	r2, r1
 8002170:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	6812      	ldr	r2, [r2, #0]
 800217a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b0a      	cmp	r3, #10
 8002182:	d003      	beq.n	800218c <HAL_DMA2D_ConfigLayer+0xf4>
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b09      	cmp	r3, #9
 800218a:	d106      	bne.n	800219a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	68da      	ldr	r2, [r3, #12]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002198:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	371c      	adds	r7, #28
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	ff03000f 	.word	0xff03000f

080021bc <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80021bc:	b480      	push	{r7}
 80021be:	b08b      	sub	sp, #44	; 0x2c
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
 80021c8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	041a      	lsls	r2, r3, #16
 80021d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021da:	431a      	orrs	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80021f4:	d174      	bne.n	80022e0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80021fc:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002204:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800220c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	b2db      	uxtb	r3, r3
 8002212:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d108      	bne.n	800222e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	431a      	orrs	r2, r3
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	4313      	orrs	r3, r2
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	4313      	orrs	r3, r2
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
 800222c:	e053      	b.n	80022d6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d106      	bne.n	8002244 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	4313      	orrs	r3, r2
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	4313      	orrs	r3, r2
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
 8002242:	e048      	b.n	80022d6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	2b02      	cmp	r3, #2
 800224a:	d111      	bne.n	8002270 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	0cdb      	lsrs	r3, r3, #19
 8002250:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	0a9b      	lsrs	r3, r3, #10
 8002256:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	08db      	lsrs	r3, r3, #3
 800225c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	015a      	lsls	r2, r3, #5
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	02db      	lsls	r3, r3, #11
 8002266:	4313      	orrs	r3, r2
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	4313      	orrs	r3, r2
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
 800226e:	e032      	b.n	80022d6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	2b03      	cmp	r3, #3
 8002276:	d117      	bne.n	80022a8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	0fdb      	lsrs	r3, r3, #31
 800227c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	0cdb      	lsrs	r3, r3, #19
 8002282:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	0adb      	lsrs	r3, r3, #11
 8002288:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	08db      	lsrs	r3, r3, #3
 800228e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	015a      	lsls	r2, r3, #5
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	029b      	lsls	r3, r3, #10
 8002298:	431a      	orrs	r2, r3
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	03db      	lsls	r3, r3, #15
 800229e:	4313      	orrs	r3, r2
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
 80022a6:	e016      	b.n	80022d6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80022a8:	6a3b      	ldr	r3, [r7, #32]
 80022aa:	0f1b      	lsrs	r3, r3, #28
 80022ac:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	0d1b      	lsrs	r3, r3, #20
 80022b2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	0b1b      	lsrs	r3, r3, #12
 80022b8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	091b      	lsrs	r3, r3, #4
 80022be:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	011a      	lsls	r2, r3, #4
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	021b      	lsls	r3, r3, #8
 80022c8:	431a      	orrs	r2, r3
 80022ca:	6a3b      	ldr	r3, [r7, #32]
 80022cc:	031b      	lsls	r3, r3, #12
 80022ce:	4313      	orrs	r3, r2
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022dc:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80022de:	e003      	b.n	80022e8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	60da      	str	r2, [r3, #12]
}
 80022e8:	bf00      	nop
 80022ea:	372c      	adds	r7, #44	; 0x2c
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b089      	sub	sp, #36	; 0x24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002306:	2300      	movs	r3, #0
 8002308:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800230a:	2300      	movs	r3, #0
 800230c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
 8002312:	e175      	b.n	8002600 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002314:	2201      	movs	r2, #1
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	4013      	ands	r3, r2
 8002326:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	429a      	cmp	r2, r3
 800232e:	f040 8164 	bne.w	80025fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d00b      	beq.n	8002352 <HAL_GPIO_Init+0x5e>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d007      	beq.n	8002352 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002346:	2b11      	cmp	r3, #17
 8002348:	d003      	beq.n	8002352 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b12      	cmp	r3, #18
 8002350:	d130      	bne.n	80023b4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	2203      	movs	r2, #3
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43db      	mvns	r3, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4013      	ands	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	68da      	ldr	r2, [r3, #12]
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4313      	orrs	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002388:	2201      	movs	r2, #1
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	091b      	lsrs	r3, r3, #4
 800239e:	f003 0201 	and.w	r2, r3, #1
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	2203      	movs	r2, #3
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	43db      	mvns	r3, r3
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4013      	ands	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4313      	orrs	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d003      	beq.n	80023f4 <HAL_GPIO_Init+0x100>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b12      	cmp	r3, #18
 80023f2:	d123      	bne.n	800243c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	08da      	lsrs	r2, r3, #3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3208      	adds	r2, #8
 80023fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	220f      	movs	r2, #15
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	08da      	lsrs	r2, r3, #3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3208      	adds	r2, #8
 8002436:	69b9      	ldr	r1, [r7, #24]
 8002438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	2203      	movs	r2, #3
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0203 	and.w	r2, r3, #3
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 80be 	beq.w	80025fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247e:	4b65      	ldr	r3, [pc, #404]	; (8002614 <HAL_GPIO_Init+0x320>)
 8002480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002482:	4a64      	ldr	r2, [pc, #400]	; (8002614 <HAL_GPIO_Init+0x320>)
 8002484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002488:	6453      	str	r3, [r2, #68]	; 0x44
 800248a:	4b62      	ldr	r3, [pc, #392]	; (8002614 <HAL_GPIO_Init+0x320>)
 800248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002496:	4a60      	ldr	r2, [pc, #384]	; (8002618 <HAL_GPIO_Init+0x324>)
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	089b      	lsrs	r3, r3, #2
 800249c:	3302      	adds	r3, #2
 800249e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	220f      	movs	r2, #15
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43db      	mvns	r3, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4013      	ands	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a57      	ldr	r2, [pc, #348]	; (800261c <HAL_GPIO_Init+0x328>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d037      	beq.n	8002532 <HAL_GPIO_Init+0x23e>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a56      	ldr	r2, [pc, #344]	; (8002620 <HAL_GPIO_Init+0x32c>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d031      	beq.n	800252e <HAL_GPIO_Init+0x23a>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a55      	ldr	r2, [pc, #340]	; (8002624 <HAL_GPIO_Init+0x330>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d02b      	beq.n	800252a <HAL_GPIO_Init+0x236>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a54      	ldr	r2, [pc, #336]	; (8002628 <HAL_GPIO_Init+0x334>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d025      	beq.n	8002526 <HAL_GPIO_Init+0x232>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a53      	ldr	r2, [pc, #332]	; (800262c <HAL_GPIO_Init+0x338>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d01f      	beq.n	8002522 <HAL_GPIO_Init+0x22e>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a52      	ldr	r2, [pc, #328]	; (8002630 <HAL_GPIO_Init+0x33c>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d019      	beq.n	800251e <HAL_GPIO_Init+0x22a>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a51      	ldr	r2, [pc, #324]	; (8002634 <HAL_GPIO_Init+0x340>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d013      	beq.n	800251a <HAL_GPIO_Init+0x226>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a50      	ldr	r2, [pc, #320]	; (8002638 <HAL_GPIO_Init+0x344>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d00d      	beq.n	8002516 <HAL_GPIO_Init+0x222>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a4f      	ldr	r2, [pc, #316]	; (800263c <HAL_GPIO_Init+0x348>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d007      	beq.n	8002512 <HAL_GPIO_Init+0x21e>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a4e      	ldr	r2, [pc, #312]	; (8002640 <HAL_GPIO_Init+0x34c>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d101      	bne.n	800250e <HAL_GPIO_Init+0x21a>
 800250a:	2309      	movs	r3, #9
 800250c:	e012      	b.n	8002534 <HAL_GPIO_Init+0x240>
 800250e:	230a      	movs	r3, #10
 8002510:	e010      	b.n	8002534 <HAL_GPIO_Init+0x240>
 8002512:	2308      	movs	r3, #8
 8002514:	e00e      	b.n	8002534 <HAL_GPIO_Init+0x240>
 8002516:	2307      	movs	r3, #7
 8002518:	e00c      	b.n	8002534 <HAL_GPIO_Init+0x240>
 800251a:	2306      	movs	r3, #6
 800251c:	e00a      	b.n	8002534 <HAL_GPIO_Init+0x240>
 800251e:	2305      	movs	r3, #5
 8002520:	e008      	b.n	8002534 <HAL_GPIO_Init+0x240>
 8002522:	2304      	movs	r3, #4
 8002524:	e006      	b.n	8002534 <HAL_GPIO_Init+0x240>
 8002526:	2303      	movs	r3, #3
 8002528:	e004      	b.n	8002534 <HAL_GPIO_Init+0x240>
 800252a:	2302      	movs	r3, #2
 800252c:	e002      	b.n	8002534 <HAL_GPIO_Init+0x240>
 800252e:	2301      	movs	r3, #1
 8002530:	e000      	b.n	8002534 <HAL_GPIO_Init+0x240>
 8002532:	2300      	movs	r3, #0
 8002534:	69fa      	ldr	r2, [r7, #28]
 8002536:	f002 0203 	and.w	r2, r2, #3
 800253a:	0092      	lsls	r2, r2, #2
 800253c:	4093      	lsls	r3, r2
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4313      	orrs	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002544:	4934      	ldr	r1, [pc, #208]	; (8002618 <HAL_GPIO_Init+0x324>)
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	089b      	lsrs	r3, r3, #2
 800254a:	3302      	adds	r3, #2
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002552:	4b3c      	ldr	r3, [pc, #240]	; (8002644 <HAL_GPIO_Init+0x350>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	43db      	mvns	r3, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4013      	ands	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002576:	4a33      	ldr	r2, [pc, #204]	; (8002644 <HAL_GPIO_Init+0x350>)
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800257c:	4b31      	ldr	r3, [pc, #196]	; (8002644 <HAL_GPIO_Init+0x350>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025a0:	4a28      	ldr	r2, [pc, #160]	; (8002644 <HAL_GPIO_Init+0x350>)
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025a6:	4b27      	ldr	r3, [pc, #156]	; (8002644 <HAL_GPIO_Init+0x350>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	43db      	mvns	r3, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4013      	ands	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025ca:	4a1e      	ldr	r2, [pc, #120]	; (8002644 <HAL_GPIO_Init+0x350>)
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025d0:	4b1c      	ldr	r3, [pc, #112]	; (8002644 <HAL_GPIO_Init+0x350>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025f4:	4a13      	ldr	r2, [pc, #76]	; (8002644 <HAL_GPIO_Init+0x350>)
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	3301      	adds	r3, #1
 80025fe:	61fb      	str	r3, [r7, #28]
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	2b0f      	cmp	r3, #15
 8002604:	f67f ae86 	bls.w	8002314 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002608:	bf00      	nop
 800260a:	3724      	adds	r7, #36	; 0x24
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	40023800 	.word	0x40023800
 8002618:	40013800 	.word	0x40013800
 800261c:	40020000 	.word	0x40020000
 8002620:	40020400 	.word	0x40020400
 8002624:	40020800 	.word	0x40020800
 8002628:	40020c00 	.word	0x40020c00
 800262c:	40021000 	.word	0x40021000
 8002630:	40021400 	.word	0x40021400
 8002634:	40021800 	.word	0x40021800
 8002638:	40021c00 	.word	0x40021c00
 800263c:	40022000 	.word	0x40022000
 8002640:	40022400 	.word	0x40022400
 8002644:	40013c00 	.word	0x40013c00

08002648 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	460b      	mov	r3, r1
 8002652:	807b      	strh	r3, [r7, #2]
 8002654:	4613      	mov	r3, r2
 8002656:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002658:	787b      	ldrb	r3, [r7, #1]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800265e:	887a      	ldrh	r2, [r7, #2]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002664:	e003      	b.n	800266e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002666:	887b      	ldrh	r3, [r7, #2]
 8002668:	041a      	lsls	r2, r3, #16
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	619a      	str	r2, [r3, #24]
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
	...

0800267c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e07f      	b.n	800278e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d106      	bne.n	80026a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f8a9 	bl	80027fa <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2224      	movs	r2, #36	; 0x24
 80026ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 0201 	bic.w	r2, r2, #1
 80026be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d107      	bne.n	80026f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026f2:	609a      	str	r2, [r3, #8]
 80026f4:	e006      	b.n	8002704 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002702:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	2b02      	cmp	r3, #2
 800270a:	d104      	bne.n	8002716 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002714:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6859      	ldr	r1, [r3, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	4b1d      	ldr	r3, [pc, #116]	; (8002798 <HAL_I2C_Init+0x11c>)
 8002722:	430b      	orrs	r3, r1
 8002724:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002734:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691a      	ldr	r2, [r3, #16]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	ea42 0103 	orr.w	r1, r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	021a      	lsls	r2, r3, #8
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	69d9      	ldr	r1, [r3, #28]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a1a      	ldr	r2, [r3, #32]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0201 	orr.w	r2, r2, #1
 800276e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2220      	movs	r2, #32
 800277a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	02008000 	.word	0x02008000

0800279c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e021      	b.n	80027f2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2224      	movs	r2, #36	; 0x24
 80027b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0201 	bic.w	r2, r2, #1
 80027c4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f821 	bl	800280e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
	...

08002824 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b088      	sub	sp, #32
 8002828:	af02      	add	r7, sp, #8
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	4608      	mov	r0, r1
 800282e:	4611      	mov	r1, r2
 8002830:	461a      	mov	r2, r3
 8002832:	4603      	mov	r3, r0
 8002834:	817b      	strh	r3, [r7, #10]
 8002836:	460b      	mov	r3, r1
 8002838:	813b      	strh	r3, [r7, #8]
 800283a:	4613      	mov	r3, r2
 800283c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b20      	cmp	r3, #32
 8002848:	f040 80f9 	bne.w	8002a3e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d002      	beq.n	8002858 <HAL_I2C_Mem_Write+0x34>
 8002852:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002854:	2b00      	cmp	r3, #0
 8002856:	d105      	bne.n	8002864 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800285e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e0ed      	b.n	8002a40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800286a:	2b01      	cmp	r3, #1
 800286c:	d101      	bne.n	8002872 <HAL_I2C_Mem_Write+0x4e>
 800286e:	2302      	movs	r3, #2
 8002870:	e0e6      	b.n	8002a40 <HAL_I2C_Mem_Write+0x21c>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800287a:	f7fe fec9 	bl	8001610 <HAL_GetTick>
 800287e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	9300      	str	r3, [sp, #0]
 8002884:	2319      	movs	r3, #25
 8002886:	2201      	movs	r2, #1
 8002888:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f000 fad1 	bl	8002e34 <I2C_WaitOnFlagUntilTimeout>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e0d1      	b.n	8002a40 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2221      	movs	r2, #33	; 0x21
 80028a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2240      	movs	r2, #64	; 0x40
 80028a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a3a      	ldr	r2, [r7, #32]
 80028b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80028bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028c4:	88f8      	ldrh	r0, [r7, #6]
 80028c6:	893a      	ldrh	r2, [r7, #8]
 80028c8:	8979      	ldrh	r1, [r7, #10]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	9301      	str	r3, [sp, #4]
 80028ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	4603      	mov	r3, r0
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 f9e1 	bl	8002c9c <I2C_RequestMemoryWrite>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d005      	beq.n	80028ec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e0a9      	b.n	8002a40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	2bff      	cmp	r3, #255	; 0xff
 80028f4:	d90e      	bls.n	8002914 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	22ff      	movs	r2, #255	; 0xff
 80028fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002900:	b2da      	uxtb	r2, r3
 8002902:	8979      	ldrh	r1, [r7, #10]
 8002904:	2300      	movs	r3, #0
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 fbb3 	bl	8003078 <I2C_TransferConfig>
 8002912:	e00f      	b.n	8002934 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002918:	b29a      	uxth	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002922:	b2da      	uxtb	r2, r3
 8002924:	8979      	ldrh	r1, [r7, #10]
 8002926:	2300      	movs	r3, #0
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 fba2 	bl	8003078 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f000 fabb 	bl	8002eb4 <I2C_WaitOnTXISFlagUntilTimeout>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e07b      	b.n	8002a40 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	781a      	ldrb	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002962:	b29b      	uxth	r3, r3
 8002964:	3b01      	subs	r3, #1
 8002966:	b29a      	uxth	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002970:	3b01      	subs	r3, #1
 8002972:	b29a      	uxth	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800297c:	b29b      	uxth	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d034      	beq.n	80029ec <HAL_I2C_Mem_Write+0x1c8>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002986:	2b00      	cmp	r3, #0
 8002988:	d130      	bne.n	80029ec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002990:	2200      	movs	r2, #0
 8002992:	2180      	movs	r1, #128	; 0x80
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 fa4d 	bl	8002e34 <I2C_WaitOnFlagUntilTimeout>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e04d      	b.n	8002a40 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	2bff      	cmp	r3, #255	; 0xff
 80029ac:	d90e      	bls.n	80029cc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	22ff      	movs	r2, #255	; 0xff
 80029b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	8979      	ldrh	r1, [r7, #10]
 80029bc:	2300      	movs	r3, #0
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 fb57 	bl	8003078 <I2C_TransferConfig>
 80029ca:	e00f      	b.n	80029ec <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	8979      	ldrh	r1, [r7, #10]
 80029de:	2300      	movs	r3, #0
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 fb46 	bl	8003078 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d19e      	bne.n	8002934 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 fa9a 	bl	8002f34 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e01a      	b.n	8002a40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6859      	ldr	r1, [r3, #4]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <HAL_I2C_Mem_Write+0x224>)
 8002a1e:	400b      	ands	r3, r1
 8002a20:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2220      	movs	r2, #32
 8002a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	e000      	b.n	8002a40 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002a3e:	2302      	movs	r3, #2
  }
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3718      	adds	r7, #24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	fe00e800 	.word	0xfe00e800

08002a4c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b088      	sub	sp, #32
 8002a50:	af02      	add	r7, sp, #8
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	4608      	mov	r0, r1
 8002a56:	4611      	mov	r1, r2
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	817b      	strh	r3, [r7, #10]
 8002a5e:	460b      	mov	r3, r1
 8002a60:	813b      	strh	r3, [r7, #8]
 8002a62:	4613      	mov	r3, r2
 8002a64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b20      	cmp	r3, #32
 8002a70:	f040 80fd 	bne.w	8002c6e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d002      	beq.n	8002a80 <HAL_I2C_Mem_Read+0x34>
 8002a7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d105      	bne.n	8002a8c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a86:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e0f1      	b.n	8002c70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <HAL_I2C_Mem_Read+0x4e>
 8002a96:	2302      	movs	r3, #2
 8002a98:	e0ea      	b.n	8002c70 <HAL_I2C_Mem_Read+0x224>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002aa2:	f7fe fdb5 	bl	8001610 <HAL_GetTick>
 8002aa6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	2319      	movs	r3, #25
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f000 f9bd 	bl	8002e34 <I2C_WaitOnFlagUntilTimeout>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e0d5      	b.n	8002c70 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2222      	movs	r2, #34	; 0x22
 8002ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2240      	movs	r2, #64	; 0x40
 8002ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6a3a      	ldr	r2, [r7, #32]
 8002ade:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ae4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002aec:	88f8      	ldrh	r0, [r7, #6]
 8002aee:	893a      	ldrh	r2, [r7, #8]
 8002af0:	8979      	ldrh	r1, [r7, #10]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	9301      	str	r3, [sp, #4]
 8002af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	4603      	mov	r3, r0
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 f921 	bl	8002d44 <I2C_RequestMemoryRead>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0ad      	b.n	8002c70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	2bff      	cmp	r3, #255	; 0xff
 8002b1c:	d90e      	bls.n	8002b3c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	22ff      	movs	r2, #255	; 0xff
 8002b22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	8979      	ldrh	r1, [r7, #10]
 8002b2c:	4b52      	ldr	r3, [pc, #328]	; (8002c78 <HAL_I2C_Mem_Read+0x22c>)
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 fa9f 	bl	8003078 <I2C_TransferConfig>
 8002b3a:	e00f      	b.n	8002b5c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	8979      	ldrh	r1, [r7, #10]
 8002b4e:	4b4a      	ldr	r3, [pc, #296]	; (8002c78 <HAL_I2C_Mem_Read+0x22c>)
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 fa8e 	bl	8003078 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b62:	2200      	movs	r2, #0
 8002b64:	2104      	movs	r1, #4
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 f964 	bl	8002e34 <I2C_WaitOnFlagUntilTimeout>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e07c      	b.n	8002c70 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	1c5a      	adds	r2, r3, #1
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b92:	3b01      	subs	r3, #1
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d034      	beq.n	8002c1c <HAL_I2C_Mem_Read+0x1d0>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d130      	bne.n	8002c1c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	2180      	movs	r1, #128	; 0x80
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f000 f935 	bl	8002e34 <I2C_WaitOnFlagUntilTimeout>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e04d      	b.n	8002c70 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	2bff      	cmp	r3, #255	; 0xff
 8002bdc:	d90e      	bls.n	8002bfc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	22ff      	movs	r2, #255	; 0xff
 8002be2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	8979      	ldrh	r1, [r7, #10]
 8002bec:	2300      	movs	r3, #0
 8002bee:	9300      	str	r3, [sp, #0]
 8002bf0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 fa3f 	bl	8003078 <I2C_TransferConfig>
 8002bfa:	e00f      	b.n	8002c1c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	8979      	ldrh	r1, [r7, #10]
 8002c0e:	2300      	movs	r3, #0
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 fa2e 	bl	8003078 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d19a      	bne.n	8002b5c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 f982 	bl	8002f34 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e01a      	b.n	8002c70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6859      	ldr	r1, [r3, #4]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <HAL_I2C_Mem_Read+0x230>)
 8002c4e:	400b      	ands	r3, r1
 8002c50:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2220      	movs	r2, #32
 8002c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	e000      	b.n	8002c70 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002c6e:	2302      	movs	r3, #2
  }
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	80002400 	.word	0x80002400
 8002c7c:	fe00e800 	.word	0xfe00e800

08002c80 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c8e:	b2db      	uxtb	r3, r3
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af02      	add	r7, sp, #8
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	4608      	mov	r0, r1
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	461a      	mov	r2, r3
 8002caa:	4603      	mov	r3, r0
 8002cac:	817b      	strh	r3, [r7, #10]
 8002cae:	460b      	mov	r3, r1
 8002cb0:	813b      	strh	r3, [r7, #8]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002cb6:	88fb      	ldrh	r3, [r7, #6]
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	8979      	ldrh	r1, [r7, #10]
 8002cbc:	4b20      	ldr	r3, [pc, #128]	; (8002d40 <I2C_RequestMemoryWrite+0xa4>)
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 f9d7 	bl	8003078 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cca:	69fa      	ldr	r2, [r7, #28]
 8002ccc:	69b9      	ldr	r1, [r7, #24]
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 f8f0 	bl	8002eb4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e02c      	b.n	8002d38 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cde:	88fb      	ldrh	r3, [r7, #6]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d105      	bne.n	8002cf0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ce4:	893b      	ldrh	r3, [r7, #8]
 8002ce6:	b2da      	uxtb	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	629a      	str	r2, [r3, #40]	; 0x28
 8002cee:	e015      	b.n	8002d1c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002cf0:	893b      	ldrh	r3, [r7, #8]
 8002cf2:	0a1b      	lsrs	r3, r3, #8
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cfe:	69fa      	ldr	r2, [r7, #28]
 8002d00:	69b9      	ldr	r1, [r7, #24]
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 f8d6 	bl	8002eb4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e012      	b.n	8002d38 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d12:	893b      	ldrh	r3, [r7, #8]
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	2200      	movs	r2, #0
 8002d24:	2180      	movs	r1, #128	; 0x80
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 f884 	bl	8002e34 <I2C_WaitOnFlagUntilTimeout>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e000      	b.n	8002d38 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	80002000 	.word	0x80002000

08002d44 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af02      	add	r7, sp, #8
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	4608      	mov	r0, r1
 8002d4e:	4611      	mov	r1, r2
 8002d50:	461a      	mov	r2, r3
 8002d52:	4603      	mov	r3, r0
 8002d54:	817b      	strh	r3, [r7, #10]
 8002d56:	460b      	mov	r3, r1
 8002d58:	813b      	strh	r3, [r7, #8]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002d5e:	88fb      	ldrh	r3, [r7, #6]
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	8979      	ldrh	r1, [r7, #10]
 8002d64:	4b20      	ldr	r3, [pc, #128]	; (8002de8 <I2C_RequestMemoryRead+0xa4>)
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	2300      	movs	r3, #0
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 f984 	bl	8003078 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d70:	69fa      	ldr	r2, [r7, #28]
 8002d72:	69b9      	ldr	r1, [r7, #24]
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 f89d 	bl	8002eb4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e02c      	b.n	8002dde <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d84:	88fb      	ldrh	r3, [r7, #6]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d105      	bne.n	8002d96 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d8a:	893b      	ldrh	r3, [r7, #8]
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	629a      	str	r2, [r3, #40]	; 0x28
 8002d94:	e015      	b.n	8002dc2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d96:	893b      	ldrh	r3, [r7, #8]
 8002d98:	0a1b      	lsrs	r3, r3, #8
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002da4:	69fa      	ldr	r2, [r7, #28]
 8002da6:	69b9      	ldr	r1, [r7, #24]
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f000 f883 	bl	8002eb4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e012      	b.n	8002dde <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002db8:	893b      	ldrh	r3, [r7, #8]
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	9300      	str	r3, [sp, #0]
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	2140      	movs	r1, #64	; 0x40
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f000 f831 	bl	8002e34 <I2C_WaitOnFlagUntilTimeout>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e000      	b.n	8002dde <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	80002000 	.word	0x80002000

08002dec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d103      	bne.n	8002e0a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2200      	movs	r2, #0
 8002e08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d007      	beq.n	8002e28 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	699a      	ldr	r2, [r3, #24]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0201 	orr.w	r2, r2, #1
 8002e26:	619a      	str	r2, [r3, #24]
  }
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	603b      	str	r3, [r7, #0]
 8002e40:	4613      	mov	r3, r2
 8002e42:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e44:	e022      	b.n	8002e8c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e4c:	d01e      	beq.n	8002e8c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e4e:	f7fe fbdf 	bl	8001610 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d302      	bcc.n	8002e64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d113      	bne.n	8002e8c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e68:	f043 0220 	orr.w	r2, r3, #32
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2220      	movs	r2, #32
 8002e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e00f      	b.n	8002eac <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699a      	ldr	r2, [r3, #24]
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	4013      	ands	r3, r2
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	bf0c      	ite	eq
 8002e9c:	2301      	moveq	r3, #1
 8002e9e:	2300      	movne	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	79fb      	ldrb	r3, [r7, #7]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d0cd      	beq.n	8002e46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ec0:	e02c      	b.n	8002f1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	68b9      	ldr	r1, [r7, #8]
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 f870 	bl	8002fac <I2C_IsAcknowledgeFailed>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e02a      	b.n	8002f2c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002edc:	d01e      	beq.n	8002f1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ede:	f7fe fb97 	bl	8001610 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d302      	bcc.n	8002ef4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d113      	bne.n	8002f1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef8:	f043 0220 	orr.w	r2, r3, #32
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e007      	b.n	8002f2c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d1cb      	bne.n	8002ec2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f40:	e028      	b.n	8002f94 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	68b9      	ldr	r1, [r7, #8]
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 f830 	bl	8002fac <I2C_IsAcknowledgeFailed>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e026      	b.n	8002fa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f56:	f7fe fb5b 	bl	8001610 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d302      	bcc.n	8002f6c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d113      	bne.n	8002f94 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f70:	f043 0220 	orr.w	r2, r3, #32
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e007      	b.n	8002fa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	f003 0320 	and.w	r3, r3, #32
 8002f9e:	2b20      	cmp	r3, #32
 8002fa0:	d1cf      	bne.n	8002f42 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	f003 0310 	and.w	r3, r3, #16
 8002fc2:	2b10      	cmp	r3, #16
 8002fc4:	d151      	bne.n	800306a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fc6:	e022      	b.n	800300e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fce:	d01e      	beq.n	800300e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd0:	f7fe fb1e 	bl	8001610 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d302      	bcc.n	8002fe6 <I2C_IsAcknowledgeFailed+0x3a>
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d113      	bne.n	800300e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fea:	f043 0220 	orr.w	r2, r3, #32
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e02e      	b.n	800306c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	f003 0320 	and.w	r3, r3, #32
 8003018:	2b20      	cmp	r3, #32
 800301a:	d1d5      	bne.n	8002fc8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2210      	movs	r2, #16
 8003022:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2220      	movs	r2, #32
 800302a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f7ff fedd 	bl	8002dec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6859      	ldr	r1, [r3, #4]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	4b0d      	ldr	r3, [pc, #52]	; (8003074 <I2C_IsAcknowledgeFailed+0xc8>)
 800303e:	400b      	ands	r3, r1
 8003040:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003046:	f043 0204 	orr.w	r2, r3, #4
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	fe00e800 	.word	0xfe00e800

08003078 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	607b      	str	r3, [r7, #4]
 8003082:	460b      	mov	r3, r1
 8003084:	817b      	strh	r3, [r7, #10]
 8003086:	4613      	mov	r3, r2
 8003088:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	0d5b      	lsrs	r3, r3, #21
 8003094:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003098:	4b0d      	ldr	r3, [pc, #52]	; (80030d0 <I2C_TransferConfig+0x58>)
 800309a:	430b      	orrs	r3, r1
 800309c:	43db      	mvns	r3, r3
 800309e:	ea02 0103 	and.w	r1, r2, r3
 80030a2:	897b      	ldrh	r3, [r7, #10]
 80030a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030a8:	7a7b      	ldrb	r3, [r7, #9]
 80030aa:	041b      	lsls	r3, r3, #16
 80030ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	431a      	orrs	r2, r3
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	431a      	orrs	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80030c2:	bf00      	nop
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	03ff63ff 	.word	0x03ff63ff

080030d4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80030da:	2300      	movs	r3, #0
 80030dc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80030de:	4b23      	ldr	r3, [pc, #140]	; (800316c <HAL_PWREx_EnableOverDrive+0x98>)
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	4a22      	ldr	r2, [pc, #136]	; (800316c <HAL_PWREx_EnableOverDrive+0x98>)
 80030e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e8:	6413      	str	r3, [r2, #64]	; 0x40
 80030ea:	4b20      	ldr	r3, [pc, #128]	; (800316c <HAL_PWREx_EnableOverDrive+0x98>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f2:	603b      	str	r3, [r7, #0]
 80030f4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80030f6:	4b1e      	ldr	r3, [pc, #120]	; (8003170 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a1d      	ldr	r2, [pc, #116]	; (8003170 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003100:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003102:	f7fe fa85 	bl	8001610 <HAL_GetTick>
 8003106:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003108:	e009      	b.n	800311e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800310a:	f7fe fa81 	bl	8001610 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003118:	d901      	bls.n	800311e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e022      	b.n	8003164 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800311e:	4b14      	ldr	r3, [pc, #80]	; (8003170 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800312a:	d1ee      	bne.n	800310a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800312c:	4b10      	ldr	r3, [pc, #64]	; (8003170 <HAL_PWREx_EnableOverDrive+0x9c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a0f      	ldr	r2, [pc, #60]	; (8003170 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003132:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003136:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003138:	f7fe fa6a 	bl	8001610 <HAL_GetTick>
 800313c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800313e:	e009      	b.n	8003154 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003140:	f7fe fa66 	bl	8001610 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800314e:	d901      	bls.n	8003154 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e007      	b.n	8003164 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003154:	4b06      	ldr	r3, [pc, #24]	; (8003170 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003160:	d1ee      	bne.n	8003140 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	40023800 	.word	0x40023800
 8003170:	40007000 	.word	0x40007000

08003174 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800317c:	2300      	movs	r3, #0
 800317e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e291      	b.n	80036ae <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 8087 	beq.w	80032a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003198:	4b96      	ldr	r3, [pc, #600]	; (80033f4 <HAL_RCC_OscConfig+0x280>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f003 030c 	and.w	r3, r3, #12
 80031a0:	2b04      	cmp	r3, #4
 80031a2:	d00c      	beq.n	80031be <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031a4:	4b93      	ldr	r3, [pc, #588]	; (80033f4 <HAL_RCC_OscConfig+0x280>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 030c 	and.w	r3, r3, #12
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d112      	bne.n	80031d6 <HAL_RCC_OscConfig+0x62>
 80031b0:	4b90      	ldr	r3, [pc, #576]	; (80033f4 <HAL_RCC_OscConfig+0x280>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031bc:	d10b      	bne.n	80031d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031be:	4b8d      	ldr	r3, [pc, #564]	; (80033f4 <HAL_RCC_OscConfig+0x280>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d06c      	beq.n	80032a4 <HAL_RCC_OscConfig+0x130>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d168      	bne.n	80032a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e26b      	b.n	80036ae <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031de:	d106      	bne.n	80031ee <HAL_RCC_OscConfig+0x7a>
 80031e0:	4b84      	ldr	r3, [pc, #528]	; (80033f4 <HAL_RCC_OscConfig+0x280>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a83      	ldr	r2, [pc, #524]	; (80033f4 <HAL_RCC_OscConfig+0x280>)
 80031e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ea:	6013      	str	r3, [r2, #0]
 80031ec:	e02e      	b.n	800324c <HAL_RCC_OscConfig+0xd8>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10c      	bne.n	8003210 <HAL_RCC_OscConfig+0x9c>
 80031f6:	4b7f      	ldr	r3, [pc, #508]	; (80033f4 <HAL_RCC_OscConfig+0x280>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a7e      	ldr	r2, [pc, #504]	; (80033f4 <HAL_RCC_OscConfig+0x280>)
 80031fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	4b7c      	ldr	r3, [pc, #496]	; (80033f4 <HAL_RCC_OscConfig+0x280>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a7b      	ldr	r2, [pc, #492]	; (80033f4 <HAL_RCC_OscConfig+0x280>)
 8003208:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	e01d      	b.n	800324c <HAL_RCC_OscConfig+0xd8>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003218:	d10c      	bne.n	8003234 <HAL_RCC_OscConfig+0xc0>
 800321a:	4b76      	ldr	r3, [pc, #472]	; (80033f4 <HAL_RCC_OscConfig+0x280>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a75      	ldr	r2, [pc, #468]	; (80033f4 <HAL_RCC_OscConfig+0x280>)
 8003220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	4b73      	ldr	r3, [pc, #460]	; (80033f4 <HAL_RCC_OscConfig+0x280>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a72      	ldr	r2, [pc, #456]	; (80033f4 <HAL_RCC_OscConfig+0x280>)
 800322c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	e00b      	b.n	800324c <HAL_RCC_OscConfig+0xd8>
 8003234:	4b6f      	ldr	r3, [pc, #444]	; (80033f4 <HAL_RCC_OscConfig+0x280>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a6e      	ldr	r2, [pc, #440]	; (80033f4 <HAL_RCC_OscConfig+0x280>)
 800323a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800323e:	6013      	str	r3, [r2, #0]
 8003240:	4b6c      	ldr	r3, [pc, #432]	; (80033f4 <HAL_RCC_OscConfig+0x280>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a6b      	ldr	r2, [pc, #428]	; (80033f4 <HAL_RCC_OscConfig+0x280>)
 8003246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800324a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d013      	beq.n	800327c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003254:	f7fe f9dc 	bl	8001610 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800325c:	f7fe f9d8 	bl	8001610 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b64      	cmp	r3, #100	; 0x64
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e21f      	b.n	80036ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326e:	4b61      	ldr	r3, [pc, #388]	; (80033f4 <HAL_RCC_OscConfig+0x280>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0f0      	beq.n	800325c <HAL_RCC_OscConfig+0xe8>
 800327a:	e014      	b.n	80032a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327c:	f7fe f9c8 	bl	8001610 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003284:	f7fe f9c4 	bl	8001610 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b64      	cmp	r3, #100	; 0x64
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e20b      	b.n	80036ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003296:	4b57      	ldr	r3, [pc, #348]	; (80033f4 <HAL_RCC_OscConfig+0x280>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1f0      	bne.n	8003284 <HAL_RCC_OscConfig+0x110>
 80032a2:	e000      	b.n	80032a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d069      	beq.n	8003386 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032b2:	4b50      	ldr	r3, [pc, #320]	; (80033f4 <HAL_RCC_OscConfig+0x280>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 030c 	and.w	r3, r3, #12
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00b      	beq.n	80032d6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032be:	4b4d      	ldr	r3, [pc, #308]	; (80033f4 <HAL_RCC_OscConfig+0x280>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 030c 	and.w	r3, r3, #12
 80032c6:	2b08      	cmp	r3, #8
 80032c8:	d11c      	bne.n	8003304 <HAL_RCC_OscConfig+0x190>
 80032ca:	4b4a      	ldr	r3, [pc, #296]	; (80033f4 <HAL_RCC_OscConfig+0x280>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d116      	bne.n	8003304 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032d6:	4b47      	ldr	r3, [pc, #284]	; (80033f4 <HAL_RCC_OscConfig+0x280>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d005      	beq.n	80032ee <HAL_RCC_OscConfig+0x17a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d001      	beq.n	80032ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e1df      	b.n	80036ae <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ee:	4b41      	ldr	r3, [pc, #260]	; (80033f4 <HAL_RCC_OscConfig+0x280>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	493d      	ldr	r1, [pc, #244]	; (80033f4 <HAL_RCC_OscConfig+0x280>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003302:	e040      	b.n	8003386 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d023      	beq.n	8003354 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800330c:	4b39      	ldr	r3, [pc, #228]	; (80033f4 <HAL_RCC_OscConfig+0x280>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a38      	ldr	r2, [pc, #224]	; (80033f4 <HAL_RCC_OscConfig+0x280>)
 8003312:	f043 0301 	orr.w	r3, r3, #1
 8003316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003318:	f7fe f97a 	bl	8001610 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003320:	f7fe f976 	bl	8001610 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e1bd      	b.n	80036ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003332:	4b30      	ldr	r3, [pc, #192]	; (80033f4 <HAL_RCC_OscConfig+0x280>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d0f0      	beq.n	8003320 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800333e:	4b2d      	ldr	r3, [pc, #180]	; (80033f4 <HAL_RCC_OscConfig+0x280>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	4929      	ldr	r1, [pc, #164]	; (80033f4 <HAL_RCC_OscConfig+0x280>)
 800334e:	4313      	orrs	r3, r2
 8003350:	600b      	str	r3, [r1, #0]
 8003352:	e018      	b.n	8003386 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003354:	4b27      	ldr	r3, [pc, #156]	; (80033f4 <HAL_RCC_OscConfig+0x280>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a26      	ldr	r2, [pc, #152]	; (80033f4 <HAL_RCC_OscConfig+0x280>)
 800335a:	f023 0301 	bic.w	r3, r3, #1
 800335e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003360:	f7fe f956 	bl	8001610 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003368:	f7fe f952 	bl	8001610 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e199      	b.n	80036ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800337a:	4b1e      	ldr	r3, [pc, #120]	; (80033f4 <HAL_RCC_OscConfig+0x280>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	2b00      	cmp	r3, #0
 8003390:	d038      	beq.n	8003404 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d019      	beq.n	80033ce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800339a:	4b16      	ldr	r3, [pc, #88]	; (80033f4 <HAL_RCC_OscConfig+0x280>)
 800339c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800339e:	4a15      	ldr	r2, [pc, #84]	; (80033f4 <HAL_RCC_OscConfig+0x280>)
 80033a0:	f043 0301 	orr.w	r3, r3, #1
 80033a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a6:	f7fe f933 	bl	8001610 <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ac:	e008      	b.n	80033c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033ae:	f7fe f92f 	bl	8001610 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e176      	b.n	80036ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033c0:	4b0c      	ldr	r3, [pc, #48]	; (80033f4 <HAL_RCC_OscConfig+0x280>)
 80033c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d0f0      	beq.n	80033ae <HAL_RCC_OscConfig+0x23a>
 80033cc:	e01a      	b.n	8003404 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ce:	4b09      	ldr	r3, [pc, #36]	; (80033f4 <HAL_RCC_OscConfig+0x280>)
 80033d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d2:	4a08      	ldr	r2, [pc, #32]	; (80033f4 <HAL_RCC_OscConfig+0x280>)
 80033d4:	f023 0301 	bic.w	r3, r3, #1
 80033d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033da:	f7fe f919 	bl	8001610 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e0:	e00a      	b.n	80033f8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033e2:	f7fe f915 	bl	8001610 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d903      	bls.n	80033f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e15c      	b.n	80036ae <HAL_RCC_OscConfig+0x53a>
 80033f4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f8:	4b91      	ldr	r3, [pc, #580]	; (8003640 <HAL_RCC_OscConfig+0x4cc>)
 80033fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1ee      	bne.n	80033e2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 80a4 	beq.w	800355a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003412:	4b8b      	ldr	r3, [pc, #556]	; (8003640 <HAL_RCC_OscConfig+0x4cc>)
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10d      	bne.n	800343a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800341e:	4b88      	ldr	r3, [pc, #544]	; (8003640 <HAL_RCC_OscConfig+0x4cc>)
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	4a87      	ldr	r2, [pc, #540]	; (8003640 <HAL_RCC_OscConfig+0x4cc>)
 8003424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003428:	6413      	str	r3, [r2, #64]	; 0x40
 800342a:	4b85      	ldr	r3, [pc, #532]	; (8003640 <HAL_RCC_OscConfig+0x4cc>)
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003432:	60bb      	str	r3, [r7, #8]
 8003434:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003436:	2301      	movs	r3, #1
 8003438:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800343a:	4b82      	ldr	r3, [pc, #520]	; (8003644 <HAL_RCC_OscConfig+0x4d0>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003442:	2b00      	cmp	r3, #0
 8003444:	d118      	bne.n	8003478 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003446:	4b7f      	ldr	r3, [pc, #508]	; (8003644 <HAL_RCC_OscConfig+0x4d0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a7e      	ldr	r2, [pc, #504]	; (8003644 <HAL_RCC_OscConfig+0x4d0>)
 800344c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003450:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003452:	f7fe f8dd 	bl	8001610 <HAL_GetTick>
 8003456:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003458:	e008      	b.n	800346c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800345a:	f7fe f8d9 	bl	8001610 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b64      	cmp	r3, #100	; 0x64
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e120      	b.n	80036ae <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800346c:	4b75      	ldr	r3, [pc, #468]	; (8003644 <HAL_RCC_OscConfig+0x4d0>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0f0      	beq.n	800345a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d106      	bne.n	800348e <HAL_RCC_OscConfig+0x31a>
 8003480:	4b6f      	ldr	r3, [pc, #444]	; (8003640 <HAL_RCC_OscConfig+0x4cc>)
 8003482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003484:	4a6e      	ldr	r2, [pc, #440]	; (8003640 <HAL_RCC_OscConfig+0x4cc>)
 8003486:	f043 0301 	orr.w	r3, r3, #1
 800348a:	6713      	str	r3, [r2, #112]	; 0x70
 800348c:	e02d      	b.n	80034ea <HAL_RCC_OscConfig+0x376>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10c      	bne.n	80034b0 <HAL_RCC_OscConfig+0x33c>
 8003496:	4b6a      	ldr	r3, [pc, #424]	; (8003640 <HAL_RCC_OscConfig+0x4cc>)
 8003498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349a:	4a69      	ldr	r2, [pc, #420]	; (8003640 <HAL_RCC_OscConfig+0x4cc>)
 800349c:	f023 0301 	bic.w	r3, r3, #1
 80034a0:	6713      	str	r3, [r2, #112]	; 0x70
 80034a2:	4b67      	ldr	r3, [pc, #412]	; (8003640 <HAL_RCC_OscConfig+0x4cc>)
 80034a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a6:	4a66      	ldr	r2, [pc, #408]	; (8003640 <HAL_RCC_OscConfig+0x4cc>)
 80034a8:	f023 0304 	bic.w	r3, r3, #4
 80034ac:	6713      	str	r3, [r2, #112]	; 0x70
 80034ae:	e01c      	b.n	80034ea <HAL_RCC_OscConfig+0x376>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	2b05      	cmp	r3, #5
 80034b6:	d10c      	bne.n	80034d2 <HAL_RCC_OscConfig+0x35e>
 80034b8:	4b61      	ldr	r3, [pc, #388]	; (8003640 <HAL_RCC_OscConfig+0x4cc>)
 80034ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034bc:	4a60      	ldr	r2, [pc, #384]	; (8003640 <HAL_RCC_OscConfig+0x4cc>)
 80034be:	f043 0304 	orr.w	r3, r3, #4
 80034c2:	6713      	str	r3, [r2, #112]	; 0x70
 80034c4:	4b5e      	ldr	r3, [pc, #376]	; (8003640 <HAL_RCC_OscConfig+0x4cc>)
 80034c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c8:	4a5d      	ldr	r2, [pc, #372]	; (8003640 <HAL_RCC_OscConfig+0x4cc>)
 80034ca:	f043 0301 	orr.w	r3, r3, #1
 80034ce:	6713      	str	r3, [r2, #112]	; 0x70
 80034d0:	e00b      	b.n	80034ea <HAL_RCC_OscConfig+0x376>
 80034d2:	4b5b      	ldr	r3, [pc, #364]	; (8003640 <HAL_RCC_OscConfig+0x4cc>)
 80034d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d6:	4a5a      	ldr	r2, [pc, #360]	; (8003640 <HAL_RCC_OscConfig+0x4cc>)
 80034d8:	f023 0301 	bic.w	r3, r3, #1
 80034dc:	6713      	str	r3, [r2, #112]	; 0x70
 80034de:	4b58      	ldr	r3, [pc, #352]	; (8003640 <HAL_RCC_OscConfig+0x4cc>)
 80034e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e2:	4a57      	ldr	r2, [pc, #348]	; (8003640 <HAL_RCC_OscConfig+0x4cc>)
 80034e4:	f023 0304 	bic.w	r3, r3, #4
 80034e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d015      	beq.n	800351e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f2:	f7fe f88d 	bl	8001610 <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f8:	e00a      	b.n	8003510 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034fa:	f7fe f889 	bl	8001610 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	f241 3288 	movw	r2, #5000	; 0x1388
 8003508:	4293      	cmp	r3, r2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e0ce      	b.n	80036ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003510:	4b4b      	ldr	r3, [pc, #300]	; (8003640 <HAL_RCC_OscConfig+0x4cc>)
 8003512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0ee      	beq.n	80034fa <HAL_RCC_OscConfig+0x386>
 800351c:	e014      	b.n	8003548 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351e:	f7fe f877 	bl	8001610 <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003524:	e00a      	b.n	800353c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003526:	f7fe f873 	bl	8001610 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	f241 3288 	movw	r2, #5000	; 0x1388
 8003534:	4293      	cmp	r3, r2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e0b8      	b.n	80036ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800353c:	4b40      	ldr	r3, [pc, #256]	; (8003640 <HAL_RCC_OscConfig+0x4cc>)
 800353e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1ee      	bne.n	8003526 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003548:	7dfb      	ldrb	r3, [r7, #23]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d105      	bne.n	800355a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800354e:	4b3c      	ldr	r3, [pc, #240]	; (8003640 <HAL_RCC_OscConfig+0x4cc>)
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	4a3b      	ldr	r2, [pc, #236]	; (8003640 <HAL_RCC_OscConfig+0x4cc>)
 8003554:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003558:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 80a4 	beq.w	80036ac <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003564:	4b36      	ldr	r3, [pc, #216]	; (8003640 <HAL_RCC_OscConfig+0x4cc>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 030c 	and.w	r3, r3, #12
 800356c:	2b08      	cmp	r3, #8
 800356e:	d06b      	beq.n	8003648 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	2b02      	cmp	r3, #2
 8003576:	d149      	bne.n	800360c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003578:	4b31      	ldr	r3, [pc, #196]	; (8003640 <HAL_RCC_OscConfig+0x4cc>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a30      	ldr	r2, [pc, #192]	; (8003640 <HAL_RCC_OscConfig+0x4cc>)
 800357e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003582:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003584:	f7fe f844 	bl	8001610 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800358c:	f7fe f840 	bl	8001610 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e087      	b.n	80036ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800359e:	4b28      	ldr	r3, [pc, #160]	; (8003640 <HAL_RCC_OscConfig+0x4cc>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1f0      	bne.n	800358c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69da      	ldr	r2, [r3, #28]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	431a      	orrs	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	019b      	lsls	r3, r3, #6
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c0:	085b      	lsrs	r3, r3, #1
 80035c2:	3b01      	subs	r3, #1
 80035c4:	041b      	lsls	r3, r3, #16
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035cc:	061b      	lsls	r3, r3, #24
 80035ce:	4313      	orrs	r3, r2
 80035d0:	4a1b      	ldr	r2, [pc, #108]	; (8003640 <HAL_RCC_OscConfig+0x4cc>)
 80035d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80035d6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035d8:	4b19      	ldr	r3, [pc, #100]	; (8003640 <HAL_RCC_OscConfig+0x4cc>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a18      	ldr	r2, [pc, #96]	; (8003640 <HAL_RCC_OscConfig+0x4cc>)
 80035de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e4:	f7fe f814 	bl	8001610 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ec:	f7fe f810 	bl	8001610 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e057      	b.n	80036ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035fe:	4b10      	ldr	r3, [pc, #64]	; (8003640 <HAL_RCC_OscConfig+0x4cc>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0f0      	beq.n	80035ec <HAL_RCC_OscConfig+0x478>
 800360a:	e04f      	b.n	80036ac <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800360c:	4b0c      	ldr	r3, [pc, #48]	; (8003640 <HAL_RCC_OscConfig+0x4cc>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a0b      	ldr	r2, [pc, #44]	; (8003640 <HAL_RCC_OscConfig+0x4cc>)
 8003612:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003618:	f7fd fffa 	bl	8001610 <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003620:	f7fd fff6 	bl	8001610 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e03d      	b.n	80036ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003632:	4b03      	ldr	r3, [pc, #12]	; (8003640 <HAL_RCC_OscConfig+0x4cc>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1f0      	bne.n	8003620 <HAL_RCC_OscConfig+0x4ac>
 800363e:	e035      	b.n	80036ac <HAL_RCC_OscConfig+0x538>
 8003640:	40023800 	.word	0x40023800
 8003644:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003648:	4b1b      	ldr	r3, [pc, #108]	; (80036b8 <HAL_RCC_OscConfig+0x544>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d028      	beq.n	80036a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003660:	429a      	cmp	r2, r3
 8003662:	d121      	bne.n	80036a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800366e:	429a      	cmp	r2, r3
 8003670:	d11a      	bne.n	80036a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003678:	4013      	ands	r3, r2
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800367e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003680:	4293      	cmp	r3, r2
 8003682:	d111      	bne.n	80036a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368e:	085b      	lsrs	r3, r3, #1
 8003690:	3b01      	subs	r3, #1
 8003692:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003694:	429a      	cmp	r2, r3
 8003696:	d107      	bne.n	80036a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d001      	beq.n	80036ac <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e000      	b.n	80036ae <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3718      	adds	r7, #24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40023800 	.word	0x40023800

080036bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80036c6:	2300      	movs	r3, #0
 80036c8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e0d0      	b.n	8003876 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036d4:	4b6a      	ldr	r3, [pc, #424]	; (8003880 <HAL_RCC_ClockConfig+0x1c4>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 030f 	and.w	r3, r3, #15
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d910      	bls.n	8003704 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e2:	4b67      	ldr	r3, [pc, #412]	; (8003880 <HAL_RCC_ClockConfig+0x1c4>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f023 020f 	bic.w	r2, r3, #15
 80036ea:	4965      	ldr	r1, [pc, #404]	; (8003880 <HAL_RCC_ClockConfig+0x1c4>)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f2:	4b63      	ldr	r3, [pc, #396]	; (8003880 <HAL_RCC_ClockConfig+0x1c4>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 030f 	and.w	r3, r3, #15
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d001      	beq.n	8003704 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e0b8      	b.n	8003876 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d020      	beq.n	8003752 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	d005      	beq.n	8003728 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800371c:	4b59      	ldr	r3, [pc, #356]	; (8003884 <HAL_RCC_ClockConfig+0x1c8>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	4a58      	ldr	r2, [pc, #352]	; (8003884 <HAL_RCC_ClockConfig+0x1c8>)
 8003722:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003726:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0308 	and.w	r3, r3, #8
 8003730:	2b00      	cmp	r3, #0
 8003732:	d005      	beq.n	8003740 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003734:	4b53      	ldr	r3, [pc, #332]	; (8003884 <HAL_RCC_ClockConfig+0x1c8>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	4a52      	ldr	r2, [pc, #328]	; (8003884 <HAL_RCC_ClockConfig+0x1c8>)
 800373a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800373e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003740:	4b50      	ldr	r3, [pc, #320]	; (8003884 <HAL_RCC_ClockConfig+0x1c8>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	494d      	ldr	r1, [pc, #308]	; (8003884 <HAL_RCC_ClockConfig+0x1c8>)
 800374e:	4313      	orrs	r3, r2
 8003750:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d040      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d107      	bne.n	8003776 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003766:	4b47      	ldr	r3, [pc, #284]	; (8003884 <HAL_RCC_ClockConfig+0x1c8>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d115      	bne.n	800379e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e07f      	b.n	8003876 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b02      	cmp	r3, #2
 800377c:	d107      	bne.n	800378e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800377e:	4b41      	ldr	r3, [pc, #260]	; (8003884 <HAL_RCC_ClockConfig+0x1c8>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d109      	bne.n	800379e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e073      	b.n	8003876 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800378e:	4b3d      	ldr	r3, [pc, #244]	; (8003884 <HAL_RCC_ClockConfig+0x1c8>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e06b      	b.n	8003876 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800379e:	4b39      	ldr	r3, [pc, #228]	; (8003884 <HAL_RCC_ClockConfig+0x1c8>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f023 0203 	bic.w	r2, r3, #3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	4936      	ldr	r1, [pc, #216]	; (8003884 <HAL_RCC_ClockConfig+0x1c8>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037b0:	f7fd ff2e 	bl	8001610 <HAL_GetTick>
 80037b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b6:	e00a      	b.n	80037ce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037b8:	f7fd ff2a 	bl	8001610 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e053      	b.n	8003876 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ce:	4b2d      	ldr	r3, [pc, #180]	; (8003884 <HAL_RCC_ClockConfig+0x1c8>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f003 020c 	and.w	r2, r3, #12
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	429a      	cmp	r2, r3
 80037de:	d1eb      	bne.n	80037b8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037e0:	4b27      	ldr	r3, [pc, #156]	; (8003880 <HAL_RCC_ClockConfig+0x1c4>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 030f 	and.w	r3, r3, #15
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d210      	bcs.n	8003810 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ee:	4b24      	ldr	r3, [pc, #144]	; (8003880 <HAL_RCC_ClockConfig+0x1c4>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f023 020f 	bic.w	r2, r3, #15
 80037f6:	4922      	ldr	r1, [pc, #136]	; (8003880 <HAL_RCC_ClockConfig+0x1c4>)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037fe:	4b20      	ldr	r3, [pc, #128]	; (8003880 <HAL_RCC_ClockConfig+0x1c4>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	429a      	cmp	r2, r3
 800380a:	d001      	beq.n	8003810 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e032      	b.n	8003876 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b00      	cmp	r3, #0
 800381a:	d008      	beq.n	800382e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800381c:	4b19      	ldr	r3, [pc, #100]	; (8003884 <HAL_RCC_ClockConfig+0x1c8>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	4916      	ldr	r1, [pc, #88]	; (8003884 <HAL_RCC_ClockConfig+0x1c8>)
 800382a:	4313      	orrs	r3, r2
 800382c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0308 	and.w	r3, r3, #8
 8003836:	2b00      	cmp	r3, #0
 8003838:	d009      	beq.n	800384e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800383a:	4b12      	ldr	r3, [pc, #72]	; (8003884 <HAL_RCC_ClockConfig+0x1c8>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	490e      	ldr	r1, [pc, #56]	; (8003884 <HAL_RCC_ClockConfig+0x1c8>)
 800384a:	4313      	orrs	r3, r2
 800384c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800384e:	f000 f821 	bl	8003894 <HAL_RCC_GetSysClockFreq>
 8003852:	4601      	mov	r1, r0
 8003854:	4b0b      	ldr	r3, [pc, #44]	; (8003884 <HAL_RCC_ClockConfig+0x1c8>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	091b      	lsrs	r3, r3, #4
 800385a:	f003 030f 	and.w	r3, r3, #15
 800385e:	4a0a      	ldr	r2, [pc, #40]	; (8003888 <HAL_RCC_ClockConfig+0x1cc>)
 8003860:	5cd3      	ldrb	r3, [r2, r3]
 8003862:	fa21 f303 	lsr.w	r3, r1, r3
 8003866:	4a09      	ldr	r2, [pc, #36]	; (800388c <HAL_RCC_ClockConfig+0x1d0>)
 8003868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800386a:	4b09      	ldr	r3, [pc, #36]	; (8003890 <HAL_RCC_ClockConfig+0x1d4>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f7fd fe8a 	bl	8001588 <HAL_InitTick>

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	40023c00 	.word	0x40023c00
 8003884:	40023800 	.word	0x40023800
 8003888:	080058e4 	.word	0x080058e4
 800388c:	20000000 	.word	0x20000000
 8003890:	20000004 	.word	0x20000004

08003894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800389a:	2300      	movs	r3, #0
 800389c:	607b      	str	r3, [r7, #4]
 800389e:	2300      	movs	r3, #0
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	2300      	movs	r3, #0
 80038a4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80038a6:	2300      	movs	r3, #0
 80038a8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038aa:	4b50      	ldr	r3, [pc, #320]	; (80039ec <HAL_RCC_GetSysClockFreq+0x158>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 030c 	and.w	r3, r3, #12
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	d007      	beq.n	80038c6 <HAL_RCC_GetSysClockFreq+0x32>
 80038b6:	2b08      	cmp	r3, #8
 80038b8:	d008      	beq.n	80038cc <HAL_RCC_GetSysClockFreq+0x38>
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f040 808d 	bne.w	80039da <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038c0:	4b4b      	ldr	r3, [pc, #300]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80038c2:	60bb      	str	r3, [r7, #8]
      break;
 80038c4:	e08c      	b.n	80039e0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038c6:	4b4b      	ldr	r3, [pc, #300]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80038c8:	60bb      	str	r3, [r7, #8]
      break;
 80038ca:	e089      	b.n	80039e0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038cc:	4b47      	ldr	r3, [pc, #284]	; (80039ec <HAL_RCC_GetSysClockFreq+0x158>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038d4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80038d6:	4b45      	ldr	r3, [pc, #276]	; (80039ec <HAL_RCC_GetSysClockFreq+0x158>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d023      	beq.n	800392a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038e2:	4b42      	ldr	r3, [pc, #264]	; (80039ec <HAL_RCC_GetSysClockFreq+0x158>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	099b      	lsrs	r3, r3, #6
 80038e8:	f04f 0400 	mov.w	r4, #0
 80038ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80038f0:	f04f 0200 	mov.w	r2, #0
 80038f4:	ea03 0501 	and.w	r5, r3, r1
 80038f8:	ea04 0602 	and.w	r6, r4, r2
 80038fc:	4a3d      	ldr	r2, [pc, #244]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80038fe:	fb02 f106 	mul.w	r1, r2, r6
 8003902:	2200      	movs	r2, #0
 8003904:	fb02 f205 	mul.w	r2, r2, r5
 8003908:	440a      	add	r2, r1
 800390a:	493a      	ldr	r1, [pc, #232]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x160>)
 800390c:	fba5 0101 	umull	r0, r1, r5, r1
 8003910:	1853      	adds	r3, r2, r1
 8003912:	4619      	mov	r1, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f04f 0400 	mov.w	r4, #0
 800391a:	461a      	mov	r2, r3
 800391c:	4623      	mov	r3, r4
 800391e:	f7fc fc73 	bl	8000208 <__aeabi_uldivmod>
 8003922:	4603      	mov	r3, r0
 8003924:	460c      	mov	r4, r1
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	e049      	b.n	80039be <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800392a:	4b30      	ldr	r3, [pc, #192]	; (80039ec <HAL_RCC_GetSysClockFreq+0x158>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	099b      	lsrs	r3, r3, #6
 8003930:	f04f 0400 	mov.w	r4, #0
 8003934:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003938:	f04f 0200 	mov.w	r2, #0
 800393c:	ea03 0501 	and.w	r5, r3, r1
 8003940:	ea04 0602 	and.w	r6, r4, r2
 8003944:	4629      	mov	r1, r5
 8003946:	4632      	mov	r2, r6
 8003948:	f04f 0300 	mov.w	r3, #0
 800394c:	f04f 0400 	mov.w	r4, #0
 8003950:	0154      	lsls	r4, r2, #5
 8003952:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003956:	014b      	lsls	r3, r1, #5
 8003958:	4619      	mov	r1, r3
 800395a:	4622      	mov	r2, r4
 800395c:	1b49      	subs	r1, r1, r5
 800395e:	eb62 0206 	sbc.w	r2, r2, r6
 8003962:	f04f 0300 	mov.w	r3, #0
 8003966:	f04f 0400 	mov.w	r4, #0
 800396a:	0194      	lsls	r4, r2, #6
 800396c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003970:	018b      	lsls	r3, r1, #6
 8003972:	1a5b      	subs	r3, r3, r1
 8003974:	eb64 0402 	sbc.w	r4, r4, r2
 8003978:	f04f 0100 	mov.w	r1, #0
 800397c:	f04f 0200 	mov.w	r2, #0
 8003980:	00e2      	lsls	r2, r4, #3
 8003982:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003986:	00d9      	lsls	r1, r3, #3
 8003988:	460b      	mov	r3, r1
 800398a:	4614      	mov	r4, r2
 800398c:	195b      	adds	r3, r3, r5
 800398e:	eb44 0406 	adc.w	r4, r4, r6
 8003992:	f04f 0100 	mov.w	r1, #0
 8003996:	f04f 0200 	mov.w	r2, #0
 800399a:	02a2      	lsls	r2, r4, #10
 800399c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80039a0:	0299      	lsls	r1, r3, #10
 80039a2:	460b      	mov	r3, r1
 80039a4:	4614      	mov	r4, r2
 80039a6:	4618      	mov	r0, r3
 80039a8:	4621      	mov	r1, r4
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f04f 0400 	mov.w	r4, #0
 80039b0:	461a      	mov	r2, r3
 80039b2:	4623      	mov	r3, r4
 80039b4:	f7fc fc28 	bl	8000208 <__aeabi_uldivmod>
 80039b8:	4603      	mov	r3, r0
 80039ba:	460c      	mov	r4, r1
 80039bc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80039be:	4b0b      	ldr	r3, [pc, #44]	; (80039ec <HAL_RCC_GetSysClockFreq+0x158>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	0c1b      	lsrs	r3, r3, #16
 80039c4:	f003 0303 	and.w	r3, r3, #3
 80039c8:	3301      	adds	r3, #1
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d6:	60bb      	str	r3, [r7, #8]
      break;
 80039d8:	e002      	b.n	80039e0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039da:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80039dc:	60bb      	str	r3, [r7, #8]
      break;
 80039de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039e0:	68bb      	ldr	r3, [r7, #8]
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3714      	adds	r7, #20
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40023800 	.word	0x40023800
 80039f0:	00f42400 	.word	0x00f42400
 80039f4:	017d7840 	.word	0x017d7840

080039f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003a00:	2300      	movs	r3, #0
 8003a02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003a10:	2300      	movs	r3, #0
 8003a12:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d012      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a20:	4b69      	ldr	r3, [pc, #420]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	4a68      	ldr	r2, [pc, #416]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a26:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003a2a:	6093      	str	r3, [r2, #8]
 8003a2c:	4b66      	ldr	r3, [pc, #408]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a34:	4964      	ldr	r1, [pc, #400]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003a42:	2301      	movs	r3, #1
 8003a44:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d017      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a52:	4b5d      	ldr	r3, [pc, #372]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a60:	4959      	ldr	r1, [pc, #356]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a70:	d101      	bne.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003a72:	2301      	movs	r3, #1
 8003a74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d017      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a8e:	4b4e      	ldr	r3, [pc, #312]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9c:	494a      	ldr	r1, [pc, #296]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aac:	d101      	bne.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003aba:	2301      	movs	r3, #1
 8003abc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003aca:	2301      	movs	r3, #1
 8003acc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0320 	and.w	r3, r3, #32
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 808b 	beq.w	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003adc:	4b3a      	ldr	r3, [pc, #232]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae0:	4a39      	ldr	r2, [pc, #228]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ae6:	6413      	str	r3, [r2, #64]	; 0x40
 8003ae8:	4b37      	ldr	r3, [pc, #220]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af0:	60bb      	str	r3, [r7, #8]
 8003af2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003af4:	4b35      	ldr	r3, [pc, #212]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a34      	ldr	r2, [pc, #208]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003afe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b00:	f7fd fd86 	bl	8001610 <HAL_GetTick>
 8003b04:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b08:	f7fd fd82 	bl	8001610 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b64      	cmp	r3, #100	; 0x64
 8003b14:	d901      	bls.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e355      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b1a:	4b2c      	ldr	r3, [pc, #176]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0f0      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b26:	4b28      	ldr	r3, [pc, #160]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b2e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d035      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d02e      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b44:	4b20      	ldr	r3, [pc, #128]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b4c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b4e:	4b1e      	ldr	r3, [pc, #120]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b52:	4a1d      	ldr	r2, [pc, #116]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b58:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b5a:	4b1b      	ldr	r3, [pc, #108]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5e:	4a1a      	ldr	r2, [pc, #104]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b64:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003b66:	4a18      	ldr	r2, [pc, #96]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b6c:	4b16      	ldr	r3, [pc, #88]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d114      	bne.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b78:	f7fd fd4a 	bl	8001610 <HAL_GetTick>
 8003b7c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7e:	e00a      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b80:	f7fd fd46 	bl	8001610 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e317      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b96:	4b0c      	ldr	r3, [pc, #48]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0ee      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003baa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bae:	d111      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003bb0:	4b05      	ldr	r3, [pc, #20]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003bbc:	4b04      	ldr	r3, [pc, #16]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003bbe:	400b      	ands	r3, r1
 8003bc0:	4901      	ldr	r1, [pc, #4]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	608b      	str	r3, [r1, #8]
 8003bc6:	e00b      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	40007000 	.word	0x40007000
 8003bd0:	0ffffcff 	.word	0x0ffffcff
 8003bd4:	4bb0      	ldr	r3, [pc, #704]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	4aaf      	ldr	r2, [pc, #700]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003bda:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003bde:	6093      	str	r3, [r2, #8]
 8003be0:	4bad      	ldr	r3, [pc, #692]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003be2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bec:	49aa      	ldr	r1, [pc, #680]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0310 	and.w	r3, r3, #16
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d010      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003bfe:	4ba6      	ldr	r3, [pc, #664]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c04:	4aa4      	ldr	r2, [pc, #656]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c0a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003c0e:	4ba2      	ldr	r3, [pc, #648]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c10:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c18:	499f      	ldr	r1, [pc, #636]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00a      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c2c:	4b9a      	ldr	r3, [pc, #616]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c32:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c3a:	4997      	ldr	r1, [pc, #604]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00a      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c4e:	4b92      	ldr	r3, [pc, #584]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c5c:	498e      	ldr	r1, [pc, #568]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00a      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c70:	4b89      	ldr	r3, [pc, #548]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c7e:	4986      	ldr	r1, [pc, #536]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00a      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c92:	4b81      	ldr	r3, [pc, #516]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca0:	497d      	ldr	r1, [pc, #500]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00a      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cb4:	4b78      	ldr	r3, [pc, #480]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cba:	f023 0203 	bic.w	r2, r3, #3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc2:	4975      	ldr	r1, [pc, #468]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cd6:	4b70      	ldr	r3, [pc, #448]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cdc:	f023 020c 	bic.w	r2, r3, #12
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ce4:	496c      	ldr	r1, [pc, #432]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00a      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cf8:	4b67      	ldr	r3, [pc, #412]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d06:	4964      	ldr	r1, [pc, #400]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d1a:	4b5f      	ldr	r3, [pc, #380]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d20:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d28:	495b      	ldr	r1, [pc, #364]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d3c:	4b56      	ldr	r3, [pc, #344]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d4a:	4953      	ldr	r1, [pc, #332]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003d5e:	4b4e      	ldr	r3, [pc, #312]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d64:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6c:	494a      	ldr	r1, [pc, #296]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003d80:	4b45      	ldr	r3, [pc, #276]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d86:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d8e:	4942      	ldr	r1, [pc, #264]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003da2:	4b3d      	ldr	r3, [pc, #244]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db0:	4939      	ldr	r1, [pc, #228]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00a      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003dc4:	4b34      	ldr	r3, [pc, #208]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dd2:	4931      	ldr	r1, [pc, #196]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d011      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003de6:	4b2c      	ldr	r3, [pc, #176]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003df4:	4928      	ldr	r1, [pc, #160]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e04:	d101      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003e06:	2301      	movs	r3, #1
 8003e08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0308 	and.w	r3, r3, #8
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003e16:	2301      	movs	r3, #1
 8003e18:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00a      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e26:	4b1c      	ldr	r3, [pc, #112]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e34:	4918      	ldr	r1, [pc, #96]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00b      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e48:	4b13      	ldr	r3, [pc, #76]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e58:	490f      	ldr	r1, [pc, #60]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d005      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e6e:	f040 80d8 	bne.w	8004022 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e72:	4b09      	ldr	r3, [pc, #36]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a08      	ldr	r2, [pc, #32]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e7e:	f7fd fbc7 	bl	8001610 <HAL_GetTick>
 8003e82:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e84:	e00a      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e86:	f7fd fbc3 	bl	8001610 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b64      	cmp	r3, #100	; 0x64
 8003e92:	d903      	bls.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e196      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8003e98:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e9c:	4b6c      	ldr	r3, [pc, #432]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1ee      	bne.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d021      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d11d      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ebc:	4b64      	ldr	r3, [pc, #400]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ec2:	0c1b      	lsrs	r3, r3, #16
 8003ec4:	f003 0303 	and.w	r3, r3, #3
 8003ec8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003eca:	4b61      	ldr	r3, [pc, #388]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ed0:	0e1b      	lsrs	r3, r3, #24
 8003ed2:	f003 030f 	and.w	r3, r3, #15
 8003ed6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	019a      	lsls	r2, r3, #6
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	041b      	lsls	r3, r3, #16
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	061b      	lsls	r3, r3, #24
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	071b      	lsls	r3, r3, #28
 8003ef0:	4957      	ldr	r1, [pc, #348]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d004      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x516>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f0c:	d00a      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d02e      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f22:	d129      	bne.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f24:	4b4a      	ldr	r3, [pc, #296]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f2a:	0c1b      	lsrs	r3, r3, #16
 8003f2c:	f003 0303 	and.w	r3, r3, #3
 8003f30:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f32:	4b47      	ldr	r3, [pc, #284]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003f34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f38:	0f1b      	lsrs	r3, r3, #28
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	019a      	lsls	r2, r3, #6
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	041b      	lsls	r3, r3, #16
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	061b      	lsls	r3, r3, #24
 8003f52:	431a      	orrs	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	071b      	lsls	r3, r3, #28
 8003f58:	493d      	ldr	r1, [pc, #244]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f60:	4b3b      	ldr	r3, [pc, #236]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f66:	f023 021f 	bic.w	r2, r3, #31
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	4937      	ldr	r1, [pc, #220]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d01d      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f84:	4b32      	ldr	r3, [pc, #200]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f8a:	0e1b      	lsrs	r3, r3, #24
 8003f8c:	f003 030f 	and.w	r3, r3, #15
 8003f90:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f92:	4b2f      	ldr	r3, [pc, #188]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f98:	0f1b      	lsrs	r3, r3, #28
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	019a      	lsls	r2, r3, #6
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	041b      	lsls	r3, r3, #16
 8003fac:	431a      	orrs	r2, r3
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	061b      	lsls	r3, r3, #24
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	071b      	lsls	r3, r3, #28
 8003fb8:	4925      	ldr	r1, [pc, #148]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d011      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	019a      	lsls	r2, r3, #6
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	041b      	lsls	r3, r3, #16
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	061b      	lsls	r3, r3, #24
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	071b      	lsls	r3, r3, #28
 8003fe8:	4919      	ldr	r1, [pc, #100]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ff0:	4b17      	ldr	r3, [pc, #92]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a16      	ldr	r2, [pc, #88]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003ff6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ffa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ffc:	f7fd fb08 	bl	8001610 <HAL_GetTick>
 8004000:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004002:	e008      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004004:	f7fd fb04 	bl	8001610 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b64      	cmp	r3, #100	; 0x64
 8004010:	d901      	bls.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e0d7      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004016:	4b0e      	ldr	r3, [pc, #56]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0f0      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	2b01      	cmp	r3, #1
 8004026:	f040 80cd 	bne.w	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800402a:	4b09      	ldr	r3, [pc, #36]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a08      	ldr	r2, [pc, #32]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004030:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004034:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004036:	f7fd faeb 	bl	8001610 <HAL_GetTick>
 800403a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800403c:	e00a      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800403e:	f7fd fae7 	bl	8001610 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b64      	cmp	r3, #100	; 0x64
 800404a:	d903      	bls.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e0ba      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8004050:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004054:	4b5e      	ldr	r3, [pc, #376]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800405c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004060:	d0ed      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004072:	2b00      	cmp	r3, #0
 8004074:	d009      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800407e:	2b00      	cmp	r3, #0
 8004080:	d02e      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	2b00      	cmp	r3, #0
 8004088:	d12a      	bne.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800408a:	4b51      	ldr	r3, [pc, #324]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800408c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004090:	0c1b      	lsrs	r3, r3, #16
 8004092:	f003 0303 	and.w	r3, r3, #3
 8004096:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004098:	4b4d      	ldr	r3, [pc, #308]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800409a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409e:	0f1b      	lsrs	r3, r3, #28
 80040a0:	f003 0307 	and.w	r3, r3, #7
 80040a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	019a      	lsls	r2, r3, #6
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	041b      	lsls	r3, r3, #16
 80040b0:	431a      	orrs	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	061b      	lsls	r3, r3, #24
 80040b8:	431a      	orrs	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	071b      	lsls	r3, r3, #28
 80040be:	4944      	ldr	r1, [pc, #272]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80040c6:	4b42      	ldr	r3, [pc, #264]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80040c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d4:	3b01      	subs	r3, #1
 80040d6:	021b      	lsls	r3, r3, #8
 80040d8:	493d      	ldr	r1, [pc, #244]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d022      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040f4:	d11d      	bne.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80040f6:	4b36      	ldr	r3, [pc, #216]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80040f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fc:	0e1b      	lsrs	r3, r3, #24
 80040fe:	f003 030f 	and.w	r3, r3, #15
 8004102:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004104:	4b32      	ldr	r3, [pc, #200]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410a:	0f1b      	lsrs	r3, r3, #28
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	019a      	lsls	r2, r3, #6
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	041b      	lsls	r3, r3, #16
 800411e:	431a      	orrs	r2, r3
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	061b      	lsls	r3, r3, #24
 8004124:	431a      	orrs	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	071b      	lsls	r3, r3, #28
 800412a:	4929      	ldr	r1, [pc, #164]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800412c:	4313      	orrs	r3, r2
 800412e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b00      	cmp	r3, #0
 800413c:	d028      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800413e:	4b24      	ldr	r3, [pc, #144]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004144:	0e1b      	lsrs	r3, r3, #24
 8004146:	f003 030f 	and.w	r3, r3, #15
 800414a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800414c:	4b20      	ldr	r3, [pc, #128]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800414e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004152:	0c1b      	lsrs	r3, r3, #16
 8004154:	f003 0303 	and.w	r3, r3, #3
 8004158:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	019a      	lsls	r2, r3, #6
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	041b      	lsls	r3, r3, #16
 8004164:	431a      	orrs	r2, r3
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	061b      	lsls	r3, r3, #24
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	071b      	lsls	r3, r3, #28
 8004172:	4917      	ldr	r1, [pc, #92]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004174:	4313      	orrs	r3, r2
 8004176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800417a:	4b15      	ldr	r3, [pc, #84]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800417c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004180:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004188:	4911      	ldr	r1, [pc, #68]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800418a:	4313      	orrs	r3, r2
 800418c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004190:	4b0f      	ldr	r3, [pc, #60]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a0e      	ldr	r2, [pc, #56]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800419a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800419c:	f7fd fa38 	bl	8001610 <HAL_GetTick>
 80041a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041a2:	e008      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80041a4:	f7fd fa34 	bl	8001610 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b64      	cmp	r3, #100	; 0x64
 80041b0:	d901      	bls.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e007      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041b6:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041c2:	d1ef      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3720      	adds	r7, #32
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	40023800 	.word	0x40023800

080041d4 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	4603      	mov	r3, r0
 80041dc:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80041de:	20c8      	movs	r0, #200	; 0xc8
 80041e0:	f000 fb6c 	bl	80048bc <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80041e4:	f000 f9b4 	bl	8004550 <ft5336_I2C_InitializeIfRequired>
}
 80041e8:	bf00      	nop
 80041ea:	3708      	adds	r7, #8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	4603      	mov	r3, r0
 80041f8:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b084      	sub	sp, #16
 800420a:	af00      	add	r7, sp, #0
 800420c:	4603      	mov	r3, r0
 800420e:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8004210:	2300      	movs	r3, #0
 8004212:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8004214:	2300      	movs	r3, #0
 8004216:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8004218:	2300      	movs	r3, #0
 800421a:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 800421c:	f000 f998 	bl	8004550 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8004220:	2300      	movs	r3, #0
 8004222:	73fb      	strb	r3, [r7, #15]
 8004224:	e010      	b.n	8004248 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8004226:	88fb      	ldrh	r3, [r7, #6]
 8004228:	b2db      	uxtb	r3, r3
 800422a:	21a8      	movs	r1, #168	; 0xa8
 800422c:	4618      	mov	r0, r3
 800422e:	f000 fb27 	bl	8004880 <TS_IO_Read>
 8004232:	4603      	mov	r3, r0
 8004234:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8004236:	7b7b      	ldrb	r3, [r7, #13]
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b51      	cmp	r3, #81	; 0x51
 800423c:	d101      	bne.n	8004242 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800423e:	2301      	movs	r3, #1
 8004240:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8004242:	7bfb      	ldrb	r3, [r7, #15]
 8004244:	3301      	adds	r3, #1
 8004246:	73fb      	strb	r3, [r7, #15]
 8004248:	7bfb      	ldrb	r3, [r7, #15]
 800424a:	2b02      	cmp	r3, #2
 800424c:	d802      	bhi.n	8004254 <ft5336_ReadID+0x4e>
 800424e:	7bbb      	ldrb	r3, [r7, #14]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d0e8      	beq.n	8004226 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8004254:	7b7b      	ldrb	r3, [r7, #13]
 8004256:	b2db      	uxtb	r3, r3
 8004258:	b29b      	uxth	r3, r3
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b082      	sub	sp, #8
 8004266:	af00      	add	r7, sp, #0
 8004268:	4603      	mov	r3, r0
 800426a:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 800426c:	88fb      	ldrh	r3, [r7, #6]
 800426e:	4618      	mov	r0, r3
 8004270:	f000 f97e 	bl	8004570 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8004274:	88fb      	ldrh	r3, [r7, #6]
 8004276:	4618      	mov	r0, r3
 8004278:	f000 f932 	bl	80044e0 <ft5336_TS_DisableIT>
}
 800427c:	bf00      	nop
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	4603      	mov	r3, r0
 800428c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800428e:	2300      	movs	r3, #0
 8004290:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8004292:	88fb      	ldrh	r3, [r7, #6]
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2102      	movs	r1, #2
 8004298:	4618      	mov	r0, r3
 800429a:	f000 faf1 	bl	8004880 <TS_IO_Read>
 800429e:	4603      	mov	r3, r0
 80042a0:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80042a2:	7bfb      	ldrb	r3, [r7, #15]
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	f003 030f 	and.w	r3, r3, #15
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80042ae:	7bfb      	ldrb	r3, [r7, #15]
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b05      	cmp	r3, #5
 80042b4:	d901      	bls.n	80042ba <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80042b6:	2300      	movs	r3, #0
 80042b8:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80042ba:	7bfb      	ldrb	r3, [r7, #15]
 80042bc:	b2da      	uxtb	r2, r3
 80042be:	4b05      	ldr	r3, [pc, #20]	; (80042d4 <ft5336_TS_DetectTouch+0x50>)
 80042c0:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 80042c2:	4b04      	ldr	r3, [pc, #16]	; (80042d4 <ft5336_TS_DetectTouch+0x50>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
 80042ca:	b2db      	uxtb	r3, r3
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	2000005c 	.word	0x2000005c

080042d8 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	4603      	mov	r3, r0
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
 80042e4:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80042e6:	2300      	movs	r3, #0
 80042e8:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80042ea:	2300      	movs	r3, #0
 80042ec:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80042ee:	2300      	movs	r3, #0
 80042f0:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 80042f2:	2300      	movs	r3, #0
 80042f4:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 80042f6:	2300      	movs	r3, #0
 80042f8:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80042fa:	4b6d      	ldr	r3, [pc, #436]	; (80044b0 <ft5336_TS_GetXY+0x1d8>)
 80042fc:	789a      	ldrb	r2, [r3, #2]
 80042fe:	4b6c      	ldr	r3, [pc, #432]	; (80044b0 <ft5336_TS_GetXY+0x1d8>)
 8004300:	785b      	ldrb	r3, [r3, #1]
 8004302:	429a      	cmp	r2, r3
 8004304:	f080 80cf 	bcs.w	80044a6 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8004308:	4b69      	ldr	r3, [pc, #420]	; (80044b0 <ft5336_TS_GetXY+0x1d8>)
 800430a:	789b      	ldrb	r3, [r3, #2]
 800430c:	2b09      	cmp	r3, #9
 800430e:	d871      	bhi.n	80043f4 <ft5336_TS_GetXY+0x11c>
 8004310:	a201      	add	r2, pc, #4	; (adr r2, 8004318 <ft5336_TS_GetXY+0x40>)
 8004312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004316:	bf00      	nop
 8004318:	08004341 	.word	0x08004341
 800431c:	08004353 	.word	0x08004353
 8004320:	08004365 	.word	0x08004365
 8004324:	08004377 	.word	0x08004377
 8004328:	08004389 	.word	0x08004389
 800432c:	0800439b 	.word	0x0800439b
 8004330:	080043ad 	.word	0x080043ad
 8004334:	080043bf 	.word	0x080043bf
 8004338:	080043d1 	.word	0x080043d1
 800433c:	080043e3 	.word	0x080043e3
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8004340:	2304      	movs	r3, #4
 8004342:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8004344:	2303      	movs	r3, #3
 8004346:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8004348:	2306      	movs	r3, #6
 800434a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 800434c:	2305      	movs	r3, #5
 800434e:	753b      	strb	r3, [r7, #20]
      break;
 8004350:	e051      	b.n	80043f6 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8004352:	230a      	movs	r3, #10
 8004354:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8004356:	2309      	movs	r3, #9
 8004358:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 800435a:	230c      	movs	r3, #12
 800435c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800435e:	230b      	movs	r3, #11
 8004360:	753b      	strb	r3, [r7, #20]
      break;
 8004362:	e048      	b.n	80043f6 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8004364:	2310      	movs	r3, #16
 8004366:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8004368:	230f      	movs	r3, #15
 800436a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 800436c:	2312      	movs	r3, #18
 800436e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8004370:	2311      	movs	r3, #17
 8004372:	753b      	strb	r3, [r7, #20]
      break;
 8004374:	e03f      	b.n	80043f6 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8004376:	2316      	movs	r3, #22
 8004378:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 800437a:	2315      	movs	r3, #21
 800437c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800437e:	2318      	movs	r3, #24
 8004380:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8004382:	2317      	movs	r3, #23
 8004384:	753b      	strb	r3, [r7, #20]
      break;
 8004386:	e036      	b.n	80043f6 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8004388:	231c      	movs	r3, #28
 800438a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 800438c:	231b      	movs	r3, #27
 800438e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8004390:	231e      	movs	r3, #30
 8004392:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8004394:	231d      	movs	r3, #29
 8004396:	753b      	strb	r3, [r7, #20]
      break;
 8004398:	e02d      	b.n	80043f6 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 800439a:	2322      	movs	r3, #34	; 0x22
 800439c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800439e:	2321      	movs	r3, #33	; 0x21
 80043a0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80043a2:	2324      	movs	r3, #36	; 0x24
 80043a4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80043a6:	2323      	movs	r3, #35	; 0x23
 80043a8:	753b      	strb	r3, [r7, #20]
      break;
 80043aa:	e024      	b.n	80043f6 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80043ac:	2328      	movs	r3, #40	; 0x28
 80043ae:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80043b0:	2327      	movs	r3, #39	; 0x27
 80043b2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80043b4:	232a      	movs	r3, #42	; 0x2a
 80043b6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80043b8:	2329      	movs	r3, #41	; 0x29
 80043ba:	753b      	strb	r3, [r7, #20]
      break;
 80043bc:	e01b      	b.n	80043f6 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 80043be:	232e      	movs	r3, #46	; 0x2e
 80043c0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 80043c2:	232d      	movs	r3, #45	; 0x2d
 80043c4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80043c6:	2330      	movs	r3, #48	; 0x30
 80043c8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80043ca:	232f      	movs	r3, #47	; 0x2f
 80043cc:	753b      	strb	r3, [r7, #20]
      break;
 80043ce:	e012      	b.n	80043f6 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80043d0:	2334      	movs	r3, #52	; 0x34
 80043d2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80043d4:	2333      	movs	r3, #51	; 0x33
 80043d6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80043d8:	2336      	movs	r3, #54	; 0x36
 80043da:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80043dc:	2335      	movs	r3, #53	; 0x35
 80043de:	753b      	strb	r3, [r7, #20]
      break;
 80043e0:	e009      	b.n	80043f6 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80043e2:	233a      	movs	r3, #58	; 0x3a
 80043e4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80043e6:	2339      	movs	r3, #57	; 0x39
 80043e8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80043ea:	233c      	movs	r3, #60	; 0x3c
 80043ec:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80043ee:	233b      	movs	r3, #59	; 0x3b
 80043f0:	753b      	strb	r3, [r7, #20]
      break;
 80043f2:	e000      	b.n	80043f6 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80043f4:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80043f6:	89fb      	ldrh	r3, [r7, #14]
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	7dfa      	ldrb	r2, [r7, #23]
 80043fc:	4611      	mov	r1, r2
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 fa3e 	bl	8004880 <TS_IO_Read>
 8004404:	4603      	mov	r3, r0
 8004406:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004408:	7cfb      	ldrb	r3, [r7, #19]
 800440a:	b2db      	uxtb	r3, r3
 800440c:	b29a      	uxth	r2, r3
 800440e:	4b29      	ldr	r3, [pc, #164]	; (80044b4 <ft5336_TS_GetXY+0x1dc>)
 8004410:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8004412:	89fb      	ldrh	r3, [r7, #14]
 8004414:	b2db      	uxtb	r3, r3
 8004416:	7dba      	ldrb	r2, [r7, #22]
 8004418:	4611      	mov	r1, r2
 800441a:	4618      	mov	r0, r3
 800441c:	f000 fa30 	bl	8004880 <TS_IO_Read>
 8004420:	4603      	mov	r3, r0
 8004422:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8004424:	7cfb      	ldrb	r3, [r7, #19]
 8004426:	b2db      	uxtb	r3, r3
 8004428:	021b      	lsls	r3, r3, #8
 800442a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800442e:	b21a      	sxth	r2, r3
 8004430:	4b20      	ldr	r3, [pc, #128]	; (80044b4 <ft5336_TS_GetXY+0x1dc>)
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	b21b      	sxth	r3, r3
 8004436:	4313      	orrs	r3, r2
 8004438:	b21b      	sxth	r3, r3
 800443a:	b29a      	uxth	r2, r3
 800443c:	4b1d      	ldr	r3, [pc, #116]	; (80044b4 <ft5336_TS_GetXY+0x1dc>)
 800443e:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8004440:	4b1c      	ldr	r3, [pc, #112]	; (80044b4 <ft5336_TS_GetXY+0x1dc>)
 8004442:	881a      	ldrh	r2, [r3, #0]
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8004448:	89fb      	ldrh	r3, [r7, #14]
 800444a:	b2db      	uxtb	r3, r3
 800444c:	7d7a      	ldrb	r2, [r7, #21]
 800444e:	4611      	mov	r1, r2
 8004450:	4618      	mov	r0, r3
 8004452:	f000 fa15 	bl	8004880 <TS_IO_Read>
 8004456:	4603      	mov	r3, r0
 8004458:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800445a:	7cfb      	ldrb	r3, [r7, #19]
 800445c:	b2db      	uxtb	r3, r3
 800445e:	b29a      	uxth	r2, r3
 8004460:	4b14      	ldr	r3, [pc, #80]	; (80044b4 <ft5336_TS_GetXY+0x1dc>)
 8004462:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8004464:	89fb      	ldrh	r3, [r7, #14]
 8004466:	b2db      	uxtb	r3, r3
 8004468:	7d3a      	ldrb	r2, [r7, #20]
 800446a:	4611      	mov	r1, r2
 800446c:	4618      	mov	r0, r3
 800446e:	f000 fa07 	bl	8004880 <TS_IO_Read>
 8004472:	4603      	mov	r3, r0
 8004474:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8004476:	7cfb      	ldrb	r3, [r7, #19]
 8004478:	b2db      	uxtb	r3, r3
 800447a:	021b      	lsls	r3, r3, #8
 800447c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004480:	b21a      	sxth	r2, r3
 8004482:	4b0c      	ldr	r3, [pc, #48]	; (80044b4 <ft5336_TS_GetXY+0x1dc>)
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	b21b      	sxth	r3, r3
 8004488:	4313      	orrs	r3, r2
 800448a:	b21b      	sxth	r3, r3
 800448c:	b29a      	uxth	r2, r3
 800448e:	4b09      	ldr	r3, [pc, #36]	; (80044b4 <ft5336_TS_GetXY+0x1dc>)
 8004490:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8004492:	4b08      	ldr	r3, [pc, #32]	; (80044b4 <ft5336_TS_GetXY+0x1dc>)
 8004494:	881a      	ldrh	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 800449a:	4b05      	ldr	r3, [pc, #20]	; (80044b0 <ft5336_TS_GetXY+0x1d8>)
 800449c:	789b      	ldrb	r3, [r3, #2]
 800449e:	3301      	adds	r3, #1
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	4b03      	ldr	r3, [pc, #12]	; (80044b0 <ft5336_TS_GetXY+0x1d8>)
 80044a4:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80044a6:	bf00      	nop
 80044a8:	3718      	adds	r7, #24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	2000005c 	.word	0x2000005c
 80044b4:	20000060 	.word	0x20000060

080044b8 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	4603      	mov	r3, r0
 80044c0:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 80044c2:	2300      	movs	r3, #0
 80044c4:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80044c6:	2301      	movs	r3, #1
 80044c8:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80044ca:	88fb      	ldrh	r3, [r7, #6]
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	7bfa      	ldrb	r2, [r7, #15]
 80044d0:	21a4      	movs	r1, #164	; 0xa4
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 f9ba 	bl	800484c <TS_IO_Write>
}
 80044d8:	bf00      	nop
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	4603      	mov	r3, r0
 80044e8:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80044ea:	2300      	movs	r3, #0
 80044ec:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80044ee:	2300      	movs	r3, #0
 80044f0:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80044f2:	88fb      	ldrh	r3, [r7, #6]
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	7bfa      	ldrb	r2, [r7, #15]
 80044f8:	21a4      	movs	r1, #164	; 0xa4
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 f9a6 	bl	800484c <TS_IO_Write>
}
 8004500:	bf00      	nop
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	4603      	mov	r3, r0
 8004510:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	4603      	mov	r3, r0
 8004528:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
	...

08004538 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 800453c:	4b03      	ldr	r3, [pc, #12]	; (800454c <ft5336_Get_I2C_InitializedStatus+0x14>)
 800453e:	781b      	ldrb	r3, [r3, #0]
}
 8004540:	4618      	mov	r0, r3
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	2000005c 	.word	0x2000005c

08004550 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8004554:	f7ff fff0 	bl	8004538 <ft5336_Get_I2C_InitializedStatus>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d104      	bne.n	8004568 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 800455e:	f000 f96b 	bl	8004838 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8004562:	4b02      	ldr	r3, [pc, #8]	; (800456c <ft5336_I2C_InitializeIfRequired+0x1c>)
 8004564:	2201      	movs	r2, #1
 8004566:	701a      	strb	r2, [r3, #0]
  }
}
 8004568:	bf00      	nop
 800456a:	bd80      	pop	{r7, pc}
 800456c:	2000005c 	.word	0x2000005c

08004570 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	4603      	mov	r3, r0
 8004578:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 800457a:	2300      	movs	r3, #0
 800457c:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 800457e:	68fb      	ldr	r3, [r7, #12]
}
 8004580:	4618      	mov	r0, r3
 8004582:	3714      	adds	r7, #20
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b08c      	sub	sp, #48	; 0x30
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a51      	ldr	r2, [pc, #324]	; (80046dc <I2Cx_MspInit+0x150>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d14d      	bne.n	8004638 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800459c:	4b50      	ldr	r3, [pc, #320]	; (80046e0 <I2Cx_MspInit+0x154>)
 800459e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a0:	4a4f      	ldr	r2, [pc, #316]	; (80046e0 <I2Cx_MspInit+0x154>)
 80045a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045a6:	6313      	str	r3, [r2, #48]	; 0x30
 80045a8:	4b4d      	ldr	r3, [pc, #308]	; (80046e0 <I2Cx_MspInit+0x154>)
 80045aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b0:	61bb      	str	r3, [r7, #24]
 80045b2:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80045b4:	2380      	movs	r3, #128	; 0x80
 80045b6:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80045b8:	2312      	movs	r3, #18
 80045ba:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80045bc:	2300      	movs	r3, #0
 80045be:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80045c0:	2302      	movs	r3, #2
 80045c2:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80045c4:	2304      	movs	r3, #4
 80045c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80045c8:	f107 031c 	add.w	r3, r7, #28
 80045cc:	4619      	mov	r1, r3
 80045ce:	4845      	ldr	r0, [pc, #276]	; (80046e4 <I2Cx_MspInit+0x158>)
 80045d0:	f7fd fe90 	bl	80022f4 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80045d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80045da:	f107 031c 	add.w	r3, r7, #28
 80045de:	4619      	mov	r1, r3
 80045e0:	4840      	ldr	r0, [pc, #256]	; (80046e4 <I2Cx_MspInit+0x158>)
 80045e2:	f7fd fe87 	bl	80022f4 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80045e6:	4b3e      	ldr	r3, [pc, #248]	; (80046e0 <I2Cx_MspInit+0x154>)
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	4a3d      	ldr	r2, [pc, #244]	; (80046e0 <I2Cx_MspInit+0x154>)
 80045ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80045f0:	6413      	str	r3, [r2, #64]	; 0x40
 80045f2:	4b3b      	ldr	r3, [pc, #236]	; (80046e0 <I2Cx_MspInit+0x154>)
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80045fe:	4b38      	ldr	r3, [pc, #224]	; (80046e0 <I2Cx_MspInit+0x154>)
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	4a37      	ldr	r2, [pc, #220]	; (80046e0 <I2Cx_MspInit+0x154>)
 8004604:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004608:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800460a:	4b35      	ldr	r3, [pc, #212]	; (80046e0 <I2Cx_MspInit+0x154>)
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	4a34      	ldr	r2, [pc, #208]	; (80046e0 <I2Cx_MspInit+0x154>)
 8004610:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004614:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8004616:	2200      	movs	r2, #0
 8004618:	210f      	movs	r1, #15
 800461a:	2048      	movs	r0, #72	; 0x48
 800461c:	f7fd f901 	bl	8001822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8004620:	2048      	movs	r0, #72	; 0x48
 8004622:	f7fd f91a 	bl	800185a <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8004626:	2200      	movs	r2, #0
 8004628:	210f      	movs	r1, #15
 800462a:	2049      	movs	r0, #73	; 0x49
 800462c:	f7fd f8f9 	bl	8001822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8004630:	2049      	movs	r0, #73	; 0x49
 8004632:	f7fd f912 	bl	800185a <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8004636:	e04d      	b.n	80046d4 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004638:	4b29      	ldr	r3, [pc, #164]	; (80046e0 <I2Cx_MspInit+0x154>)
 800463a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463c:	4a28      	ldr	r2, [pc, #160]	; (80046e0 <I2Cx_MspInit+0x154>)
 800463e:	f043 0302 	orr.w	r3, r3, #2
 8004642:	6313      	str	r3, [r2, #48]	; 0x30
 8004644:	4b26      	ldr	r3, [pc, #152]	; (80046e0 <I2Cx_MspInit+0x154>)
 8004646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	613b      	str	r3, [r7, #16]
 800464e:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8004650:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004654:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004656:	2312      	movs	r3, #18
 8004658:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800465a:	2300      	movs	r3, #0
 800465c:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800465e:	2302      	movs	r3, #2
 8004660:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8004662:	2304      	movs	r3, #4
 8004664:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004666:	f107 031c 	add.w	r3, r7, #28
 800466a:	4619      	mov	r1, r3
 800466c:	481e      	ldr	r0, [pc, #120]	; (80046e8 <I2Cx_MspInit+0x15c>)
 800466e:	f7fd fe41 	bl	80022f4 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8004672:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004676:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004678:	f107 031c 	add.w	r3, r7, #28
 800467c:	4619      	mov	r1, r3
 800467e:	481a      	ldr	r0, [pc, #104]	; (80046e8 <I2Cx_MspInit+0x15c>)
 8004680:	f7fd fe38 	bl	80022f4 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8004684:	4b16      	ldr	r3, [pc, #88]	; (80046e0 <I2Cx_MspInit+0x154>)
 8004686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004688:	4a15      	ldr	r2, [pc, #84]	; (80046e0 <I2Cx_MspInit+0x154>)
 800468a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800468e:	6413      	str	r3, [r2, #64]	; 0x40
 8004690:	4b13      	ldr	r3, [pc, #76]	; (80046e0 <I2Cx_MspInit+0x154>)
 8004692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004698:	60fb      	str	r3, [r7, #12]
 800469a:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800469c:	4b10      	ldr	r3, [pc, #64]	; (80046e0 <I2Cx_MspInit+0x154>)
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	4a0f      	ldr	r2, [pc, #60]	; (80046e0 <I2Cx_MspInit+0x154>)
 80046a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80046a6:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80046a8:	4b0d      	ldr	r3, [pc, #52]	; (80046e0 <I2Cx_MspInit+0x154>)
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	4a0c      	ldr	r2, [pc, #48]	; (80046e0 <I2Cx_MspInit+0x154>)
 80046ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046b2:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80046b4:	2200      	movs	r2, #0
 80046b6:	210f      	movs	r1, #15
 80046b8:	201f      	movs	r0, #31
 80046ba:	f7fd f8b2 	bl	8001822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80046be:	201f      	movs	r0, #31
 80046c0:	f7fd f8cb 	bl	800185a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80046c4:	2200      	movs	r2, #0
 80046c6:	210f      	movs	r1, #15
 80046c8:	2020      	movs	r0, #32
 80046ca:	f7fd f8aa 	bl	8001822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80046ce:	2020      	movs	r0, #32
 80046d0:	f7fd f8c3 	bl	800185a <HAL_NVIC_EnableIRQ>
}
 80046d4:	bf00      	nop
 80046d6:	3730      	adds	r7, #48	; 0x30
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	20000064 	.word	0x20000064
 80046e0:	40023800 	.word	0x40023800
 80046e4:	40021c00 	.word	0x40021c00
 80046e8:	40020400 	.word	0x40020400

080046ec <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f7fe fac3 	bl	8002c80 <HAL_I2C_GetState>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d125      	bne.n	800474c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a14      	ldr	r2, [pc, #80]	; (8004754 <I2Cx_Init+0x68>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d103      	bne.n	8004710 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a13      	ldr	r2, [pc, #76]	; (8004758 <I2Cx_Init+0x6c>)
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	e002      	b.n	8004716 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a12      	ldr	r2, [pc, #72]	; (800475c <I2Cx_Init+0x70>)
 8004714:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a11      	ldr	r2, [pc, #68]	; (8004760 <I2Cx_Init+0x74>)
 800471a:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7ff ff23 	bl	800458c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7fd ff98 	bl	800267c <HAL_I2C_Init>
  }
}
 800474c:	bf00      	nop
 800474e:	3708      	adds	r7, #8
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	20000064 	.word	0x20000064
 8004758:	40005c00 	.word	0x40005c00
 800475c:	40005400 	.word	0x40005400
 8004760:	40912732 	.word	0x40912732

08004764 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b08a      	sub	sp, #40	; 0x28
 8004768:	af04      	add	r7, sp, #16
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	4608      	mov	r0, r1
 800476e:	4611      	mov	r1, r2
 8004770:	461a      	mov	r2, r3
 8004772:	4603      	mov	r3, r0
 8004774:	72fb      	strb	r3, [r7, #11]
 8004776:	460b      	mov	r3, r1
 8004778:	813b      	strh	r3, [r7, #8]
 800477a:	4613      	mov	r3, r2
 800477c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800477e:	2300      	movs	r3, #0
 8004780:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004782:	7afb      	ldrb	r3, [r7, #11]
 8004784:	b299      	uxth	r1, r3
 8004786:	88f8      	ldrh	r0, [r7, #6]
 8004788:	893a      	ldrh	r2, [r7, #8]
 800478a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800478e:	9302      	str	r3, [sp, #8]
 8004790:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004792:	9301      	str	r3, [sp, #4]
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	4603      	mov	r3, r0
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f7fe f956 	bl	8002a4c <HAL_I2C_Mem_Read>
 80047a0:	4603      	mov	r3, r0
 80047a2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80047a4:	7dfb      	ldrb	r3, [r7, #23]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d004      	beq.n	80047b4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80047aa:	7afb      	ldrb	r3, [r7, #11]
 80047ac:	4619      	mov	r1, r3
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 f832 	bl	8004818 <I2Cx_Error>
  }
  return status;    
 80047b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3718      	adds	r7, #24
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b08a      	sub	sp, #40	; 0x28
 80047c2:	af04      	add	r7, sp, #16
 80047c4:	60f8      	str	r0, [r7, #12]
 80047c6:	4608      	mov	r0, r1
 80047c8:	4611      	mov	r1, r2
 80047ca:	461a      	mov	r2, r3
 80047cc:	4603      	mov	r3, r0
 80047ce:	72fb      	strb	r3, [r7, #11]
 80047d0:	460b      	mov	r3, r1
 80047d2:	813b      	strh	r3, [r7, #8]
 80047d4:	4613      	mov	r3, r2
 80047d6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80047d8:	2300      	movs	r3, #0
 80047da:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80047dc:	7afb      	ldrb	r3, [r7, #11]
 80047de:	b299      	uxth	r1, r3
 80047e0:	88f8      	ldrh	r0, [r7, #6]
 80047e2:	893a      	ldrh	r2, [r7, #8]
 80047e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047e8:	9302      	str	r3, [sp, #8]
 80047ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80047ec:	9301      	str	r3, [sp, #4]
 80047ee:	6a3b      	ldr	r3, [r7, #32]
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	4603      	mov	r3, r0
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f7fe f815 	bl	8002824 <HAL_I2C_Mem_Write>
 80047fa:	4603      	mov	r3, r0
 80047fc:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80047fe:	7dfb      	ldrb	r3, [r7, #23]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d004      	beq.n	800480e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8004804:	7afb      	ldrb	r3, [r7, #11]
 8004806:	4619      	mov	r1, r3
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f000 f805 	bl	8004818 <I2Cx_Error>
  }
  return status;
 800480e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004810:	4618      	mov	r0, r3
 8004812:	3718      	adds	r7, #24
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	460b      	mov	r3, r1
 8004822:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7fd ffb9 	bl	800279c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7ff ff5e 	bl	80046ec <I2Cx_Init>
}
 8004830:	bf00      	nop
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800483c:	4802      	ldr	r0, [pc, #8]	; (8004848 <TS_IO_Init+0x10>)
 800483e:	f7ff ff55 	bl	80046ec <I2Cx_Init>
}
 8004842:	bf00      	nop
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	20000064 	.word	0x20000064

0800484c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af02      	add	r7, sp, #8
 8004852:	4603      	mov	r3, r0
 8004854:	71fb      	strb	r3, [r7, #7]
 8004856:	460b      	mov	r3, r1
 8004858:	71bb      	strb	r3, [r7, #6]
 800485a:	4613      	mov	r3, r2
 800485c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800485e:	79bb      	ldrb	r3, [r7, #6]
 8004860:	b29a      	uxth	r2, r3
 8004862:	79f9      	ldrb	r1, [r7, #7]
 8004864:	2301      	movs	r3, #1
 8004866:	9301      	str	r3, [sp, #4]
 8004868:	1d7b      	adds	r3, r7, #5
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	2301      	movs	r3, #1
 800486e:	4803      	ldr	r0, [pc, #12]	; (800487c <TS_IO_Write+0x30>)
 8004870:	f7ff ffa5 	bl	80047be <I2Cx_WriteMultiple>
}
 8004874:	bf00      	nop
 8004876:	3708      	adds	r7, #8
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	20000064 	.word	0x20000064

08004880 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af02      	add	r7, sp, #8
 8004886:	4603      	mov	r3, r0
 8004888:	460a      	mov	r2, r1
 800488a:	71fb      	strb	r3, [r7, #7]
 800488c:	4613      	mov	r3, r2
 800488e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8004890:	2300      	movs	r3, #0
 8004892:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8004894:	79bb      	ldrb	r3, [r7, #6]
 8004896:	b29a      	uxth	r2, r3
 8004898:	79f9      	ldrb	r1, [r7, #7]
 800489a:	2301      	movs	r3, #1
 800489c:	9301      	str	r3, [sp, #4]
 800489e:	f107 030f 	add.w	r3, r7, #15
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	2301      	movs	r3, #1
 80048a6:	4804      	ldr	r0, [pc, #16]	; (80048b8 <TS_IO_Read+0x38>)
 80048a8:	f7ff ff5c 	bl	8004764 <I2Cx_ReadMultiple>

  return read_value;
 80048ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	20000064 	.word	0x20000064

080048bc <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7fc feaf 	bl	8001628 <HAL_Delay>
}
 80048ca:	bf00      	nop
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
	...

080048d4 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80048d8:	4b31      	ldr	r3, [pc, #196]	; (80049a0 <BSP_LCD_Init+0xcc>)
 80048da:	2228      	movs	r2, #40	; 0x28
 80048dc:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80048de:	4b30      	ldr	r3, [pc, #192]	; (80049a0 <BSP_LCD_Init+0xcc>)
 80048e0:	2209      	movs	r2, #9
 80048e2:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80048e4:	4b2e      	ldr	r3, [pc, #184]	; (80049a0 <BSP_LCD_Init+0xcc>)
 80048e6:	2235      	movs	r2, #53	; 0x35
 80048e8:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80048ea:	4b2d      	ldr	r3, [pc, #180]	; (80049a0 <BSP_LCD_Init+0xcc>)
 80048ec:	220b      	movs	r2, #11
 80048ee:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80048f0:	4b2b      	ldr	r3, [pc, #172]	; (80049a0 <BSP_LCD_Init+0xcc>)
 80048f2:	f240 121b 	movw	r2, #283	; 0x11b
 80048f6:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80048f8:	4b29      	ldr	r3, [pc, #164]	; (80049a0 <BSP_LCD_Init+0xcc>)
 80048fa:	f240 2215 	movw	r2, #533	; 0x215
 80048fe:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8004900:	4b27      	ldr	r3, [pc, #156]	; (80049a0 <BSP_LCD_Init+0xcc>)
 8004902:	f240 121d 	movw	r2, #285	; 0x11d
 8004906:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8004908:	4b25      	ldr	r3, [pc, #148]	; (80049a0 <BSP_LCD_Init+0xcc>)
 800490a:	f240 2235 	movw	r2, #565	; 0x235
 800490e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8004910:	2100      	movs	r1, #0
 8004912:	4823      	ldr	r0, [pc, #140]	; (80049a0 <BSP_LCD_Init+0xcc>)
 8004914:	f000 fc94 	bl	8005240 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8004918:	4b21      	ldr	r3, [pc, #132]	; (80049a0 <BSP_LCD_Init+0xcc>)
 800491a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800491e:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8004920:	4b1f      	ldr	r3, [pc, #124]	; (80049a0 <BSP_LCD_Init+0xcc>)
 8004922:	f44f 7288 	mov.w	r2, #272	; 0x110
 8004926:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8004928:	4b1d      	ldr	r3, [pc, #116]	; (80049a0 <BSP_LCD_Init+0xcc>)
 800492a:	2200      	movs	r2, #0
 800492c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8004930:	4b1b      	ldr	r3, [pc, #108]	; (80049a0 <BSP_LCD_Init+0xcc>)
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8004938:	4b19      	ldr	r3, [pc, #100]	; (80049a0 <BSP_LCD_Init+0xcc>)
 800493a:	2200      	movs	r2, #0
 800493c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8004940:	4b17      	ldr	r3, [pc, #92]	; (80049a0 <BSP_LCD_Init+0xcc>)
 8004942:	2200      	movs	r2, #0
 8004944:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8004946:	4b16      	ldr	r3, [pc, #88]	; (80049a0 <BSP_LCD_Init+0xcc>)
 8004948:	2200      	movs	r2, #0
 800494a:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 800494c:	4b14      	ldr	r3, [pc, #80]	; (80049a0 <BSP_LCD_Init+0xcc>)
 800494e:	2200      	movs	r2, #0
 8004950:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8004952:	4b13      	ldr	r3, [pc, #76]	; (80049a0 <BSP_LCD_Init+0xcc>)
 8004954:	2200      	movs	r2, #0
 8004956:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8004958:	4b11      	ldr	r3, [pc, #68]	; (80049a0 <BSP_LCD_Init+0xcc>)
 800495a:	4a12      	ldr	r2, [pc, #72]	; (80049a4 <BSP_LCD_Init+0xd0>)
 800495c:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800495e:	4810      	ldr	r0, [pc, #64]	; (80049a0 <BSP_LCD_Init+0xcc>)
 8004960:	f7fc f9cc 	bl	8000cfc <HAL_LTDC_GetState>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d103      	bne.n	8004972 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800496a:	2100      	movs	r1, #0
 800496c:	480c      	ldr	r0, [pc, #48]	; (80049a0 <BSP_LCD_Init+0xcc>)
 800496e:	f000 fb8d 	bl	800508c <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8004972:	480b      	ldr	r0, [pc, #44]	; (80049a0 <BSP_LCD_Init+0xcc>)
 8004974:	f7fb ffd4 	bl	8000920 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8004978:	2201      	movs	r2, #1
 800497a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800497e:	480a      	ldr	r0, [pc, #40]	; (80049a8 <BSP_LCD_Init+0xd4>)
 8004980:	f7fd fe62 	bl	8002648 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8004984:	2201      	movs	r2, #1
 8004986:	2108      	movs	r1, #8
 8004988:	4808      	ldr	r0, [pc, #32]	; (80049ac <BSP_LCD_Init+0xd8>)
 800498a:	f7fd fe5d 	bl	8002648 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800498e:	f000 fd77 	bl	8005480 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8004992:	4807      	ldr	r0, [pc, #28]	; (80049b0 <BSP_LCD_Init+0xdc>)
 8004994:	f000 f8d8 	bl	8004b48 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	20000290 	.word	0x20000290
 80049a4:	40016800 	.word	0x40016800
 80049a8:	40022000 	.word	0x40022000
 80049ac:	40022800 	.word	0x40022800
 80049b0:	2000000c 	.word	0x2000000c

080049b4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80049b4:	b480      	push	{r7}
 80049b6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80049b8:	4b06      	ldr	r3, [pc, #24]	; (80049d4 <BSP_LCD_GetXSize+0x20>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a06      	ldr	r2, [pc, #24]	; (80049d8 <BSP_LCD_GetXSize+0x24>)
 80049be:	2134      	movs	r1, #52	; 0x34
 80049c0:	fb01 f303 	mul.w	r3, r1, r3
 80049c4:	4413      	add	r3, r2
 80049c6:	3360      	adds	r3, #96	; 0x60
 80049c8:	681b      	ldr	r3, [r3, #0]
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr
 80049d4:	200000f0 	.word	0x200000f0
 80049d8:	20000290 	.word	0x20000290

080049dc <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80049dc:	b480      	push	{r7}
 80049de:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80049e0:	4b06      	ldr	r3, [pc, #24]	; (80049fc <BSP_LCD_GetYSize+0x20>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a06      	ldr	r2, [pc, #24]	; (8004a00 <BSP_LCD_GetYSize+0x24>)
 80049e6:	2134      	movs	r1, #52	; 0x34
 80049e8:	fb01 f303 	mul.w	r3, r1, r3
 80049ec:	4413      	add	r3, r2
 80049ee:	3364      	adds	r3, #100	; 0x64
 80049f0:	681b      	ldr	r3, [r3, #0]
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr
 80049fc:	200000f0 	.word	0x200000f0
 8004a00:	20000290 	.word	0x20000290

08004a04 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b090      	sub	sp, #64	; 0x40
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	6039      	str	r1, [r7, #0]
 8004a0e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8004a10:	2300      	movs	r3, #0
 8004a12:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8004a14:	f7ff ffce 	bl	80049b4 <BSP_LCD_GetXSize>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8004a20:	f7ff ffdc 	bl	80049dc <BSP_LCD_GetYSize>
 8004a24:	4603      	mov	r3, r0
 8004a26:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8004a30:	23ff      	movs	r3, #255	; 0xff
 8004a32:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8004a34:	2300      	movs	r3, #0
 8004a36:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8004a44:	2300      	movs	r3, #0
 8004a46:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8004a4a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8004a50:	2307      	movs	r3, #7
 8004a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8004a54:	f7ff ffae 	bl	80049b4 <BSP_LCD_GetXSize>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8004a5c:	f7ff ffbe 	bl	80049dc <BSP_LCD_GetYSize>
 8004a60:	4603      	mov	r3, r0
 8004a62:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8004a64:	88fa      	ldrh	r2, [r7, #6]
 8004a66:	f107 030c 	add.w	r3, r7, #12
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	4812      	ldr	r0, [pc, #72]	; (8004ab8 <BSP_LCD_LayerDefaultInit+0xb4>)
 8004a6e:	f7fc f907 	bl	8000c80 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8004a72:	88fa      	ldrh	r2, [r7, #6]
 8004a74:	4911      	ldr	r1, [pc, #68]	; (8004abc <BSP_LCD_LayerDefaultInit+0xb8>)
 8004a76:	4613      	mov	r3, r2
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	4413      	add	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	440b      	add	r3, r1
 8004a80:	3304      	adds	r3, #4
 8004a82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a86:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8004a88:	88fa      	ldrh	r2, [r7, #6]
 8004a8a:	490c      	ldr	r1, [pc, #48]	; (8004abc <BSP_LCD_LayerDefaultInit+0xb8>)
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	005b      	lsls	r3, r3, #1
 8004a90:	4413      	add	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	440b      	add	r3, r1
 8004a96:	3308      	adds	r3, #8
 8004a98:	4a09      	ldr	r2, [pc, #36]	; (8004ac0 <BSP_LCD_LayerDefaultInit+0xbc>)
 8004a9a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8004a9c:	88fa      	ldrh	r2, [r7, #6]
 8004a9e:	4907      	ldr	r1, [pc, #28]	; (8004abc <BSP_LCD_LayerDefaultInit+0xb8>)
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	4413      	add	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	440b      	add	r3, r1
 8004aaa:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8004aae:	601a      	str	r2, [r3, #0]
}
 8004ab0:	bf00      	nop
 8004ab2:	3740      	adds	r7, #64	; 0x40
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	20000290 	.word	0x20000290
 8004abc:	200000f4 	.word	0x200000f4
 8004ac0:	2000000c 	.word	0x2000000c

08004ac4 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8004acc:	4a04      	ldr	r2, [pc, #16]	; (8004ae0 <BSP_LCD_SelectLayer+0x1c>)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6013      	str	r3, [r2, #0]
} 
 8004ad2:	bf00      	nop
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	200000f0 	.word	0x200000f0

08004ae4 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8004aec:	4b07      	ldr	r3, [pc, #28]	; (8004b0c <BSP_LCD_SetTextColor+0x28>)
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	4907      	ldr	r1, [pc, #28]	; (8004b10 <BSP_LCD_SetTextColor+0x2c>)
 8004af2:	4613      	mov	r3, r2
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	4413      	add	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	440b      	add	r3, r1
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	601a      	str	r2, [r3, #0]
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	200000f0 	.word	0x200000f0
 8004b10:	200000f4 	.word	0x200000f4

08004b14 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8004b1c:	4b08      	ldr	r3, [pc, #32]	; (8004b40 <BSP_LCD_SetBackColor+0x2c>)
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	4908      	ldr	r1, [pc, #32]	; (8004b44 <BSP_LCD_SetBackColor+0x30>)
 8004b22:	4613      	mov	r3, r2
 8004b24:	005b      	lsls	r3, r3, #1
 8004b26:	4413      	add	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	440b      	add	r3, r1
 8004b2c:	3304      	adds	r3, #4
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	601a      	str	r2, [r3, #0]
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	200000f0 	.word	0x200000f0
 8004b44:	200000f4 	.word	0x200000f4

08004b48 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8004b50:	4b08      	ldr	r3, [pc, #32]	; (8004b74 <BSP_LCD_SetFont+0x2c>)
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	4908      	ldr	r1, [pc, #32]	; (8004b78 <BSP_LCD_SetFont+0x30>)
 8004b56:	4613      	mov	r3, r2
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	4413      	add	r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	440b      	add	r3, r1
 8004b60:	3308      	adds	r3, #8
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	601a      	str	r2, [r3, #0]
}
 8004b66:	bf00      	nop
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	200000f0 	.word	0x200000f0
 8004b78:	200000f4 	.word	0x200000f4

08004b7c <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8004b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af02      	add	r7, sp, #8
 8004b82:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8004b84:	4b0f      	ldr	r3, [pc, #60]	; (8004bc4 <BSP_LCD_Clear+0x48>)
 8004b86:	681c      	ldr	r4, [r3, #0]
 8004b88:	4b0e      	ldr	r3, [pc, #56]	; (8004bc4 <BSP_LCD_Clear+0x48>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a0e      	ldr	r2, [pc, #56]	; (8004bc8 <BSP_LCD_Clear+0x4c>)
 8004b8e:	2134      	movs	r1, #52	; 0x34
 8004b90:	fb01 f303 	mul.w	r3, r1, r3
 8004b94:	4413      	add	r3, r2
 8004b96:	335c      	adds	r3, #92	; 0x5c
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	461d      	mov	r5, r3
 8004b9c:	f7ff ff0a 	bl	80049b4 <BSP_LCD_GetXSize>
 8004ba0:	4606      	mov	r6, r0
 8004ba2:	f7ff ff1b 	bl	80049dc <BSP_LCD_GetYSize>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	9301      	str	r3, [sp, #4]
 8004bac:	2300      	movs	r3, #0
 8004bae:	9300      	str	r3, [sp, #0]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	4632      	mov	r2, r6
 8004bb4:	4629      	mov	r1, r5
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	f000 fc16 	bl	80053e8 <LL_FillBuffer>
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bc4:	200000f0 	.word	0x200000f0
 8004bc8:	20000290 	.word	0x20000290

08004bcc <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8004bcc:	b590      	push	{r4, r7, lr}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	80fb      	strh	r3, [r7, #6]
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	80bb      	strh	r3, [r7, #4]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004bde:	4b1b      	ldr	r3, [pc, #108]	; (8004c4c <BSP_LCD_DisplayChar+0x80>)
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	491b      	ldr	r1, [pc, #108]	; (8004c50 <BSP_LCD_DisplayChar+0x84>)
 8004be4:	4613      	mov	r3, r2
 8004be6:	005b      	lsls	r3, r3, #1
 8004be8:	4413      	add	r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	440b      	add	r3, r1
 8004bee:	3308      	adds	r3, #8
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	6819      	ldr	r1, [r3, #0]
 8004bf4:	78fb      	ldrb	r3, [r7, #3]
 8004bf6:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004bfa:	4b14      	ldr	r3, [pc, #80]	; (8004c4c <BSP_LCD_DisplayChar+0x80>)
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	4c14      	ldr	r4, [pc, #80]	; (8004c50 <BSP_LCD_DisplayChar+0x84>)
 8004c00:	4613      	mov	r3, r2
 8004c02:	005b      	lsls	r3, r3, #1
 8004c04:	4413      	add	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4423      	add	r3, r4
 8004c0a:	3308      	adds	r3, #8
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004c10:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004c14:	4b0d      	ldr	r3, [pc, #52]	; (8004c4c <BSP_LCD_DisplayChar+0x80>)
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	4c0d      	ldr	r4, [pc, #52]	; (8004c50 <BSP_LCD_DisplayChar+0x84>)
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	4413      	add	r3, r2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	4423      	add	r3, r4
 8004c24:	3308      	adds	r3, #8
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	889b      	ldrh	r3, [r3, #4]
 8004c2a:	3307      	adds	r3, #7
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	da00      	bge.n	8004c32 <BSP_LCD_DisplayChar+0x66>
 8004c30:	3307      	adds	r3, #7
 8004c32:	10db      	asrs	r3, r3, #3
 8004c34:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004c38:	18ca      	adds	r2, r1, r3
 8004c3a:	88b9      	ldrh	r1, [r7, #4]
 8004c3c:	88fb      	ldrh	r3, [r7, #6]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 fb1a 	bl	8005278 <DrawChar>
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd90      	pop	{r4, r7, pc}
 8004c4c:	200000f0 	.word	0x200000f0
 8004c50:	200000f4 	.word	0x200000f4

08004c54 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8004c54:	b5b0      	push	{r4, r5, r7, lr}
 8004c56:	b088      	sub	sp, #32
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60ba      	str	r2, [r7, #8]
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	4603      	mov	r3, r0
 8004c60:	81fb      	strh	r3, [r7, #14]
 8004c62:	460b      	mov	r3, r1
 8004c64:	81bb      	strh	r3, [r7, #12]
 8004c66:	4613      	mov	r3, r2
 8004c68:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	83fb      	strh	r3, [r7, #30]
 8004c6e:	2300      	movs	r3, #0
 8004c70:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8004c72:	2300      	movs	r3, #0
 8004c74:	61bb      	str	r3, [r7, #24]
 8004c76:	2300      	movs	r3, #0
 8004c78:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8004c7e:	e002      	b.n	8004c86 <BSP_LCD_DisplayStringAt+0x32>
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	3301      	adds	r3, #1
 8004c84:	61bb      	str	r3, [r7, #24]
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	1c5a      	adds	r2, r3, #1
 8004c8a:	617a      	str	r2, [r7, #20]
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1f6      	bne.n	8004c80 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8004c92:	f7ff fe8f 	bl	80049b4 <BSP_LCD_GetXSize>
 8004c96:	4b4f      	ldr	r3, [pc, #316]	; (8004dd4 <BSP_LCD_DisplayStringAt+0x180>)
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	494f      	ldr	r1, [pc, #316]	; (8004dd8 <BSP_LCD_DisplayStringAt+0x184>)
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	4413      	add	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	440b      	add	r3, r1
 8004ca6:	3308      	adds	r3, #8
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	889b      	ldrh	r3, [r3, #4]
 8004cac:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cb0:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8004cb2:	79fb      	ldrb	r3, [r7, #7]
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d01c      	beq.n	8004cf2 <BSP_LCD_DisplayStringAt+0x9e>
 8004cb8:	2b03      	cmp	r3, #3
 8004cba:	d017      	beq.n	8004cec <BSP_LCD_DisplayStringAt+0x98>
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d12e      	bne.n	8004d1e <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	1ad1      	subs	r1, r2, r3
 8004cc6:	4b43      	ldr	r3, [pc, #268]	; (8004dd4 <BSP_LCD_DisplayStringAt+0x180>)
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	4843      	ldr	r0, [pc, #268]	; (8004dd8 <BSP_LCD_DisplayStringAt+0x184>)
 8004ccc:	4613      	mov	r3, r2
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	4413      	add	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4403      	add	r3, r0
 8004cd6:	3308      	adds	r3, #8
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	889b      	ldrh	r3, [r3, #4]
 8004cdc:	fb03 f301 	mul.w	r3, r3, r1
 8004ce0:	085b      	lsrs	r3, r3, #1
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	89fb      	ldrh	r3, [r7, #14]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	83fb      	strh	r3, [r7, #30]
      break;
 8004cea:	e01b      	b.n	8004d24 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8004cec:	89fb      	ldrh	r3, [r7, #14]
 8004cee:	83fb      	strh	r3, [r7, #30]
      break;
 8004cf0:	e018      	b.n	8004d24 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	b299      	uxth	r1, r3
 8004cfa:	4b36      	ldr	r3, [pc, #216]	; (8004dd4 <BSP_LCD_DisplayStringAt+0x180>)
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	4836      	ldr	r0, [pc, #216]	; (8004dd8 <BSP_LCD_DisplayStringAt+0x184>)
 8004d00:	4613      	mov	r3, r2
 8004d02:	005b      	lsls	r3, r3, #1
 8004d04:	4413      	add	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4403      	add	r3, r0
 8004d0a:	3308      	adds	r3, #8
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	889b      	ldrh	r3, [r3, #4]
 8004d10:	fb11 f303 	smulbb	r3, r1, r3
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	89fb      	ldrh	r3, [r7, #14]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	83fb      	strh	r3, [r7, #30]
      break;
 8004d1c:	e002      	b.n	8004d24 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 8004d1e:	89fb      	ldrh	r3, [r7, #14]
 8004d20:	83fb      	strh	r3, [r7, #30]
      break;
 8004d22:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8004d24:	8bfb      	ldrh	r3, [r7, #30]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <BSP_LCD_DisplayStringAt+0xde>
 8004d2a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	da1d      	bge.n	8004d6e <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8004d32:	2301      	movs	r3, #1
 8004d34:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004d36:	e01a      	b.n	8004d6e <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	781a      	ldrb	r2, [r3, #0]
 8004d3c:	89b9      	ldrh	r1, [r7, #12]
 8004d3e:	8bfb      	ldrh	r3, [r7, #30]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7ff ff43 	bl	8004bcc <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8004d46:	4b23      	ldr	r3, [pc, #140]	; (8004dd4 <BSP_LCD_DisplayStringAt+0x180>)
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	4923      	ldr	r1, [pc, #140]	; (8004dd8 <BSP_LCD_DisplayStringAt+0x184>)
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	005b      	lsls	r3, r3, #1
 8004d50:	4413      	add	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	440b      	add	r3, r1
 8004d56:	3308      	adds	r3, #8
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	889a      	ldrh	r2, [r3, #4]
 8004d5c:	8bfb      	ldrh	r3, [r7, #30]
 8004d5e:	4413      	add	r3, r2
 8004d60:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	3301      	adds	r3, #1
 8004d66:	60bb      	str	r3, [r7, #8]
    i++;
 8004d68:	8bbb      	ldrh	r3, [r7, #28]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	bf14      	ite	ne
 8004d76:	2301      	movne	r3, #1
 8004d78:	2300      	moveq	r3, #0
 8004d7a:	b2dc      	uxtb	r4, r3
 8004d7c:	f7ff fe1a 	bl	80049b4 <BSP_LCD_GetXSize>
 8004d80:	4605      	mov	r5, r0
 8004d82:	8bb9      	ldrh	r1, [r7, #28]
 8004d84:	4b13      	ldr	r3, [pc, #76]	; (8004dd4 <BSP_LCD_DisplayStringAt+0x180>)
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	4813      	ldr	r0, [pc, #76]	; (8004dd8 <BSP_LCD_DisplayStringAt+0x184>)
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	4413      	add	r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	4403      	add	r3, r0
 8004d94:	3308      	adds	r3, #8
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	889b      	ldrh	r3, [r3, #4]
 8004d9a:	fb03 f301 	mul.w	r3, r3, r1
 8004d9e:	1aeb      	subs	r3, r5, r3
 8004da0:	b299      	uxth	r1, r3
 8004da2:	4b0c      	ldr	r3, [pc, #48]	; (8004dd4 <BSP_LCD_DisplayStringAt+0x180>)
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	480c      	ldr	r0, [pc, #48]	; (8004dd8 <BSP_LCD_DisplayStringAt+0x184>)
 8004da8:	4613      	mov	r3, r2
 8004daa:	005b      	lsls	r3, r3, #1
 8004dac:	4413      	add	r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4403      	add	r3, r0
 8004db2:	3308      	adds	r3, #8
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	889b      	ldrh	r3, [r3, #4]
 8004db8:	4299      	cmp	r1, r3
 8004dba:	bf2c      	ite	cs
 8004dbc:	2301      	movcs	r3, #1
 8004dbe:	2300      	movcc	r3, #0
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	4023      	ands	r3, r4
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1b6      	bne.n	8004d38 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 8004dca:	bf00      	nop
 8004dcc:	3720      	adds	r7, #32
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bdb0      	pop	{r4, r5, r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	200000f0 	.word	0x200000f0
 8004dd8:	200000f4 	.word	0x200000f4

08004ddc <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8004ddc:	b5b0      	push	{r4, r5, r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af02      	add	r7, sp, #8
 8004de2:	4603      	mov	r3, r0
 8004de4:	80fb      	strh	r3, [r7, #6]
 8004de6:	460b      	mov	r3, r1
 8004de8:	80bb      	strh	r3, [r7, #4]
 8004dea:	4613      	mov	r3, r2
 8004dec:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8004dee:	2300      	movs	r3, #0
 8004df0:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004df2:	4b26      	ldr	r3, [pc, #152]	; (8004e8c <BSP_LCD_DrawHLine+0xb0>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a26      	ldr	r2, [pc, #152]	; (8004e90 <BSP_LCD_DrawHLine+0xb4>)
 8004df8:	2134      	movs	r1, #52	; 0x34
 8004dfa:	fb01 f303 	mul.w	r3, r1, r3
 8004dfe:	4413      	add	r3, r2
 8004e00:	3348      	adds	r3, #72	; 0x48
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d114      	bne.n	8004e32 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004e08:	4b20      	ldr	r3, [pc, #128]	; (8004e8c <BSP_LCD_DrawHLine+0xb0>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a20      	ldr	r2, [pc, #128]	; (8004e90 <BSP_LCD_DrawHLine+0xb4>)
 8004e0e:	2134      	movs	r1, #52	; 0x34
 8004e10:	fb01 f303 	mul.w	r3, r1, r3
 8004e14:	4413      	add	r3, r2
 8004e16:	335c      	adds	r3, #92	; 0x5c
 8004e18:	681c      	ldr	r4, [r3, #0]
 8004e1a:	f7ff fdcb 	bl	80049b4 <BSP_LCD_GetXSize>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	88bb      	ldrh	r3, [r7, #4]
 8004e22:	fb03 f202 	mul.w	r2, r3, r2
 8004e26:	88fb      	ldrh	r3, [r7, #6]
 8004e28:	4413      	add	r3, r2
 8004e2a:	005b      	lsls	r3, r3, #1
 8004e2c:	4423      	add	r3, r4
 8004e2e:	60fb      	str	r3, [r7, #12]
 8004e30:	e013      	b.n	8004e5a <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004e32:	4b16      	ldr	r3, [pc, #88]	; (8004e8c <BSP_LCD_DrawHLine+0xb0>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a16      	ldr	r2, [pc, #88]	; (8004e90 <BSP_LCD_DrawHLine+0xb4>)
 8004e38:	2134      	movs	r1, #52	; 0x34
 8004e3a:	fb01 f303 	mul.w	r3, r1, r3
 8004e3e:	4413      	add	r3, r2
 8004e40:	335c      	adds	r3, #92	; 0x5c
 8004e42:	681c      	ldr	r4, [r3, #0]
 8004e44:	f7ff fdb6 	bl	80049b4 <BSP_LCD_GetXSize>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	88bb      	ldrh	r3, [r7, #4]
 8004e4c:	fb03 f202 	mul.w	r2, r3, r2
 8004e50:	88fb      	ldrh	r3, [r7, #6]
 8004e52:	4413      	add	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4423      	add	r3, r4
 8004e58:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8004e5a:	4b0c      	ldr	r3, [pc, #48]	; (8004e8c <BSP_LCD_DrawHLine+0xb0>)
 8004e5c:	6818      	ldr	r0, [r3, #0]
 8004e5e:	68fc      	ldr	r4, [r7, #12]
 8004e60:	887d      	ldrh	r5, [r7, #2]
 8004e62:	4b0a      	ldr	r3, [pc, #40]	; (8004e8c <BSP_LCD_DrawHLine+0xb0>)
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	490b      	ldr	r1, [pc, #44]	; (8004e94 <BSP_LCD_DrawHLine+0xb8>)
 8004e68:	4613      	mov	r3, r2
 8004e6a:	005b      	lsls	r3, r3, #1
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	440b      	add	r3, r1
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	9301      	str	r3, [sp, #4]
 8004e76:	2300      	movs	r3, #0
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	462a      	mov	r2, r5
 8004e7e:	4621      	mov	r1, r4
 8004e80:	f000 fab2 	bl	80053e8 <LL_FillBuffer>
}
 8004e84:	bf00      	nop
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bdb0      	pop	{r4, r5, r7, pc}
 8004e8c:	200000f0 	.word	0x200000f0
 8004e90:	20000290 	.word	0x20000290
 8004e94:	200000f4 	.word	0x200000f4

08004e98 <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8004e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e9a:	b087      	sub	sp, #28
 8004e9c:	af02      	add	r7, sp, #8
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	80fb      	strh	r3, [r7, #6]
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	80bb      	strh	r3, [r7, #4]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004eae:	4b28      	ldr	r3, [pc, #160]	; (8004f50 <BSP_LCD_DrawVLine+0xb8>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a28      	ldr	r2, [pc, #160]	; (8004f54 <BSP_LCD_DrawVLine+0xbc>)
 8004eb4:	2134      	movs	r1, #52	; 0x34
 8004eb6:	fb01 f303 	mul.w	r3, r1, r3
 8004eba:	4413      	add	r3, r2
 8004ebc:	3348      	adds	r3, #72	; 0x48
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d114      	bne.n	8004eee <BSP_LCD_DrawVLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004ec4:	4b22      	ldr	r3, [pc, #136]	; (8004f50 <BSP_LCD_DrawVLine+0xb8>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a22      	ldr	r2, [pc, #136]	; (8004f54 <BSP_LCD_DrawVLine+0xbc>)
 8004eca:	2134      	movs	r1, #52	; 0x34
 8004ecc:	fb01 f303 	mul.w	r3, r1, r3
 8004ed0:	4413      	add	r3, r2
 8004ed2:	335c      	adds	r3, #92	; 0x5c
 8004ed4:	681c      	ldr	r4, [r3, #0]
 8004ed6:	f7ff fd6d 	bl	80049b4 <BSP_LCD_GetXSize>
 8004eda:	4602      	mov	r2, r0
 8004edc:	88bb      	ldrh	r3, [r7, #4]
 8004ede:	fb03 f202 	mul.w	r2, r3, r2
 8004ee2:	88fb      	ldrh	r3, [r7, #6]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	005b      	lsls	r3, r3, #1
 8004ee8:	4423      	add	r3, r4
 8004eea:	60fb      	str	r3, [r7, #12]
 8004eec:	e013      	b.n	8004f16 <BSP_LCD_DrawVLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004eee:	4b18      	ldr	r3, [pc, #96]	; (8004f50 <BSP_LCD_DrawVLine+0xb8>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a18      	ldr	r2, [pc, #96]	; (8004f54 <BSP_LCD_DrawVLine+0xbc>)
 8004ef4:	2134      	movs	r1, #52	; 0x34
 8004ef6:	fb01 f303 	mul.w	r3, r1, r3
 8004efa:	4413      	add	r3, r2
 8004efc:	335c      	adds	r3, #92	; 0x5c
 8004efe:	681c      	ldr	r4, [r3, #0]
 8004f00:	f7ff fd58 	bl	80049b4 <BSP_LCD_GetXSize>
 8004f04:	4602      	mov	r2, r0
 8004f06:	88bb      	ldrh	r3, [r7, #4]
 8004f08:	fb03 f202 	mul.w	r2, r3, r2
 8004f0c:	88fb      	ldrh	r3, [r7, #6]
 8004f0e:	4413      	add	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4423      	add	r3, r4
 8004f14:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8004f16:	4b0e      	ldr	r3, [pc, #56]	; (8004f50 <BSP_LCD_DrawVLine+0xb8>)
 8004f18:	681c      	ldr	r4, [r3, #0]
 8004f1a:	68fd      	ldr	r5, [r7, #12]
 8004f1c:	887e      	ldrh	r6, [r7, #2]
 8004f1e:	f7ff fd49 	bl	80049b4 <BSP_LCD_GetXSize>
 8004f22:	4603      	mov	r3, r0
 8004f24:	1e59      	subs	r1, r3, #1
 8004f26:	4b0a      	ldr	r3, [pc, #40]	; (8004f50 <BSP_LCD_DrawVLine+0xb8>)
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	480b      	ldr	r0, [pc, #44]	; (8004f58 <BSP_LCD_DrawVLine+0xc0>)
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	4413      	add	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4403      	add	r3, r0
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	9301      	str	r3, [sp, #4]
 8004f3a:	9100      	str	r1, [sp, #0]
 8004f3c:	4633      	mov	r3, r6
 8004f3e:	2201      	movs	r2, #1
 8004f40:	4629      	mov	r1, r5
 8004f42:	4620      	mov	r0, r4
 8004f44:	f000 fa50 	bl	80053e8 <LL_FillBuffer>
}
 8004f48:	bf00      	nop
 8004f4a:	3714      	adds	r7, #20
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f50:	200000f0 	.word	0x200000f0
 8004f54:	20000290 	.word	0x20000290
 8004f58:	200000f4 	.word	0x200000f4

08004f5c <BSP_LCD_DrawRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004f5c:	b590      	push	{r4, r7, lr}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	4604      	mov	r4, r0
 8004f64:	4608      	mov	r0, r1
 8004f66:	4611      	mov	r1, r2
 8004f68:	461a      	mov	r2, r3
 8004f6a:	4623      	mov	r3, r4
 8004f6c:	80fb      	strh	r3, [r7, #6]
 8004f6e:	4603      	mov	r3, r0
 8004f70:	80bb      	strh	r3, [r7, #4]
 8004f72:	460b      	mov	r3, r1
 8004f74:	807b      	strh	r3, [r7, #2]
 8004f76:	4613      	mov	r3, r2
 8004f78:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8004f7a:	887a      	ldrh	r2, [r7, #2]
 8004f7c:	88b9      	ldrh	r1, [r7, #4]
 8004f7e:	88fb      	ldrh	r3, [r7, #6]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7ff ff2b 	bl	8004ddc <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8004f86:	88ba      	ldrh	r2, [r7, #4]
 8004f88:	883b      	ldrh	r3, [r7, #0]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	b299      	uxth	r1, r3
 8004f8e:	887a      	ldrh	r2, [r7, #2]
 8004f90:	88fb      	ldrh	r3, [r7, #6]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7ff ff22 	bl	8004ddc <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8004f98:	883a      	ldrh	r2, [r7, #0]
 8004f9a:	88b9      	ldrh	r1, [r7, #4]
 8004f9c:	88fb      	ldrh	r3, [r7, #6]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7ff ff7a 	bl	8004e98 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8004fa4:	88fa      	ldrh	r2, [r7, #6]
 8004fa6:	887b      	ldrh	r3, [r7, #2]
 8004fa8:	4413      	add	r3, r2
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	883a      	ldrh	r2, [r7, #0]
 8004fae:	88b9      	ldrh	r1, [r7, #4]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7ff ff71 	bl	8004e98 <BSP_LCD_DrawVLine>
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd90      	pop	{r4, r7, pc}
	...

08004fc0 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8004fc0:	b5b0      	push	{r4, r5, r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	603a      	str	r2, [r7, #0]
 8004fca:	80fb      	strh	r3, [r7, #6]
 8004fcc:	460b      	mov	r3, r1
 8004fce:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004fd0:	4b1d      	ldr	r3, [pc, #116]	; (8005048 <BSP_LCD_DrawPixel+0x88>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a1d      	ldr	r2, [pc, #116]	; (800504c <BSP_LCD_DrawPixel+0x8c>)
 8004fd6:	2134      	movs	r1, #52	; 0x34
 8004fd8:	fb01 f303 	mul.w	r3, r1, r3
 8004fdc:	4413      	add	r3, r2
 8004fde:	3348      	adds	r3, #72	; 0x48
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d116      	bne.n	8005014 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8004fe6:	4b18      	ldr	r3, [pc, #96]	; (8005048 <BSP_LCD_DrawPixel+0x88>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a18      	ldr	r2, [pc, #96]	; (800504c <BSP_LCD_DrawPixel+0x8c>)
 8004fec:	2134      	movs	r1, #52	; 0x34
 8004fee:	fb01 f303 	mul.w	r3, r1, r3
 8004ff2:	4413      	add	r3, r2
 8004ff4:	335c      	adds	r3, #92	; 0x5c
 8004ff6:	681c      	ldr	r4, [r3, #0]
 8004ff8:	88bd      	ldrh	r5, [r7, #4]
 8004ffa:	f7ff fcdb 	bl	80049b4 <BSP_LCD_GetXSize>
 8004ffe:	4603      	mov	r3, r0
 8005000:	fb03 f205 	mul.w	r2, r3, r5
 8005004:	88fb      	ldrh	r3, [r7, #6]
 8005006:	4413      	add	r3, r2
 8005008:	005b      	lsls	r3, r3, #1
 800500a:	4423      	add	r3, r4
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	b292      	uxth	r2, r2
 8005010:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8005012:	e015      	b.n	8005040 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8005014:	4b0c      	ldr	r3, [pc, #48]	; (8005048 <BSP_LCD_DrawPixel+0x88>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a0c      	ldr	r2, [pc, #48]	; (800504c <BSP_LCD_DrawPixel+0x8c>)
 800501a:	2134      	movs	r1, #52	; 0x34
 800501c:	fb01 f303 	mul.w	r3, r1, r3
 8005020:	4413      	add	r3, r2
 8005022:	335c      	adds	r3, #92	; 0x5c
 8005024:	681c      	ldr	r4, [r3, #0]
 8005026:	88bd      	ldrh	r5, [r7, #4]
 8005028:	f7ff fcc4 	bl	80049b4 <BSP_LCD_GetXSize>
 800502c:	4603      	mov	r3, r0
 800502e:	fb03 f205 	mul.w	r2, r3, r5
 8005032:	88fb      	ldrh	r3, [r7, #6]
 8005034:	4413      	add	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4423      	add	r3, r4
 800503a:	461a      	mov	r2, r3
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	6013      	str	r3, [r2, #0]
}
 8005040:	bf00      	nop
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bdb0      	pop	{r4, r5, r7, pc}
 8005048:	200000f0 	.word	0x200000f0
 800504c:	20000290 	.word	0x20000290

08005050 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8005054:	4b0a      	ldr	r3, [pc, #40]	; (8005080 <BSP_LCD_DisplayOn+0x30>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	699a      	ldr	r2, [r3, #24]
 800505a:	4b09      	ldr	r3, [pc, #36]	; (8005080 <BSP_LCD_DisplayOn+0x30>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f042 0201 	orr.w	r2, r2, #1
 8005062:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8005064:	2201      	movs	r2, #1
 8005066:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800506a:	4806      	ldr	r0, [pc, #24]	; (8005084 <BSP_LCD_DisplayOn+0x34>)
 800506c:	f7fd faec 	bl	8002648 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8005070:	2201      	movs	r2, #1
 8005072:	2108      	movs	r1, #8
 8005074:	4804      	ldr	r0, [pc, #16]	; (8005088 <BSP_LCD_DisplayOn+0x38>)
 8005076:	f7fd fae7 	bl	8002648 <HAL_GPIO_WritePin>
}
 800507a:	bf00      	nop
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	20000290 	.word	0x20000290
 8005084:	40022000 	.word	0x40022000
 8005088:	40022800 	.word	0x40022800

0800508c <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b090      	sub	sp, #64	; 0x40
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8005096:	4b64      	ldr	r3, [pc, #400]	; (8005228 <BSP_LCD_MspInit+0x19c>)
 8005098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509a:	4a63      	ldr	r2, [pc, #396]	; (8005228 <BSP_LCD_MspInit+0x19c>)
 800509c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050a0:	6453      	str	r3, [r2, #68]	; 0x44
 80050a2:	4b61      	ldr	r3, [pc, #388]	; (8005228 <BSP_LCD_MspInit+0x19c>)
 80050a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80050ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80050ae:	4b5e      	ldr	r3, [pc, #376]	; (8005228 <BSP_LCD_MspInit+0x19c>)
 80050b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b2:	4a5d      	ldr	r2, [pc, #372]	; (8005228 <BSP_LCD_MspInit+0x19c>)
 80050b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80050b8:	6313      	str	r3, [r2, #48]	; 0x30
 80050ba:	4b5b      	ldr	r3, [pc, #364]	; (8005228 <BSP_LCD_MspInit+0x19c>)
 80050bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050c2:	627b      	str	r3, [r7, #36]	; 0x24
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80050c6:	4b58      	ldr	r3, [pc, #352]	; (8005228 <BSP_LCD_MspInit+0x19c>)
 80050c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ca:	4a57      	ldr	r2, [pc, #348]	; (8005228 <BSP_LCD_MspInit+0x19c>)
 80050cc:	f043 0310 	orr.w	r3, r3, #16
 80050d0:	6313      	str	r3, [r2, #48]	; 0x30
 80050d2:	4b55      	ldr	r3, [pc, #340]	; (8005228 <BSP_LCD_MspInit+0x19c>)
 80050d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d6:	f003 0310 	and.w	r3, r3, #16
 80050da:	623b      	str	r3, [r7, #32]
 80050dc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80050de:	4b52      	ldr	r3, [pc, #328]	; (8005228 <BSP_LCD_MspInit+0x19c>)
 80050e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e2:	4a51      	ldr	r2, [pc, #324]	; (8005228 <BSP_LCD_MspInit+0x19c>)
 80050e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050e8:	6313      	str	r3, [r2, #48]	; 0x30
 80050ea:	4b4f      	ldr	r3, [pc, #316]	; (8005228 <BSP_LCD_MspInit+0x19c>)
 80050ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f2:	61fb      	str	r3, [r7, #28]
 80050f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80050f6:	4b4c      	ldr	r3, [pc, #304]	; (8005228 <BSP_LCD_MspInit+0x19c>)
 80050f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fa:	4a4b      	ldr	r2, [pc, #300]	; (8005228 <BSP_LCD_MspInit+0x19c>)
 80050fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005100:	6313      	str	r3, [r2, #48]	; 0x30
 8005102:	4b49      	ldr	r3, [pc, #292]	; (8005228 <BSP_LCD_MspInit+0x19c>)
 8005104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510a:	61bb      	str	r3, [r7, #24]
 800510c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800510e:	4b46      	ldr	r3, [pc, #280]	; (8005228 <BSP_LCD_MspInit+0x19c>)
 8005110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005112:	4a45      	ldr	r2, [pc, #276]	; (8005228 <BSP_LCD_MspInit+0x19c>)
 8005114:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005118:	6313      	str	r3, [r2, #48]	; 0x30
 800511a:	4b43      	ldr	r3, [pc, #268]	; (8005228 <BSP_LCD_MspInit+0x19c>)
 800511c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005122:	617b      	str	r3, [r7, #20]
 8005124:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8005126:	4b40      	ldr	r3, [pc, #256]	; (8005228 <BSP_LCD_MspInit+0x19c>)
 8005128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512a:	4a3f      	ldr	r2, [pc, #252]	; (8005228 <BSP_LCD_MspInit+0x19c>)
 800512c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005130:	6313      	str	r3, [r2, #48]	; 0x30
 8005132:	4b3d      	ldr	r3, [pc, #244]	; (8005228 <BSP_LCD_MspInit+0x19c>)
 8005134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800513a:	613b      	str	r3, [r7, #16]
 800513c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800513e:	4b3a      	ldr	r3, [pc, #232]	; (8005228 <BSP_LCD_MspInit+0x19c>)
 8005140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005142:	4a39      	ldr	r2, [pc, #228]	; (8005228 <BSP_LCD_MspInit+0x19c>)
 8005144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005148:	6313      	str	r3, [r2, #48]	; 0x30
 800514a:	4b37      	ldr	r3, [pc, #220]	; (8005228 <BSP_LCD_MspInit+0x19c>)
 800514c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005152:	60fb      	str	r3, [r7, #12]
 8005154:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005156:	4b34      	ldr	r3, [pc, #208]	; (8005228 <BSP_LCD_MspInit+0x19c>)
 8005158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515a:	4a33      	ldr	r2, [pc, #204]	; (8005228 <BSP_LCD_MspInit+0x19c>)
 800515c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005160:	6313      	str	r3, [r2, #48]	; 0x30
 8005162:	4b31      	ldr	r3, [pc, #196]	; (8005228 <BSP_LCD_MspInit+0x19c>)
 8005164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800516a:	60bb      	str	r3, [r7, #8]
 800516c:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800516e:	2310      	movs	r3, #16
 8005170:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005172:	2302      	movs	r3, #2
 8005174:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005176:	2300      	movs	r3, #0
 8005178:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800517a:	2302      	movs	r3, #2
 800517c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800517e:	230e      	movs	r3, #14
 8005180:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005182:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005186:	4619      	mov	r1, r3
 8005188:	4828      	ldr	r0, [pc, #160]	; (800522c <BSP_LCD_MspInit+0x1a0>)
 800518a:	f7fd f8b3 	bl	80022f4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800518e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005192:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005194:	2302      	movs	r3, #2
 8005196:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8005198:	2309      	movs	r3, #9
 800519a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800519c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051a0:	4619      	mov	r1, r3
 80051a2:	4823      	ldr	r0, [pc, #140]	; (8005230 <BSP_LCD_MspInit+0x1a4>)
 80051a4:	f7fd f8a6 	bl	80022f4 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80051a8:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 80051ac:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80051ae:	2302      	movs	r3, #2
 80051b0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80051b2:	230e      	movs	r3, #14
 80051b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80051b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051ba:	4619      	mov	r1, r3
 80051bc:	481d      	ldr	r0, [pc, #116]	; (8005234 <BSP_LCD_MspInit+0x1a8>)
 80051be:	f7fd f899 	bl	80022f4 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80051c2:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80051c6:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80051c8:	2302      	movs	r3, #2
 80051ca:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80051cc:	230e      	movs	r3, #14
 80051ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80051d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051d4:	4619      	mov	r1, r3
 80051d6:	4818      	ldr	r0, [pc, #96]	; (8005238 <BSP_LCD_MspInit+0x1ac>)
 80051d8:	f7fd f88c 	bl	80022f4 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80051dc:	23f7      	movs	r3, #247	; 0xf7
 80051de:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80051e0:	2302      	movs	r3, #2
 80051e2:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80051e4:	230e      	movs	r3, #14
 80051e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80051e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051ec:	4619      	mov	r1, r3
 80051ee:	4813      	ldr	r0, [pc, #76]	; (800523c <BSP_LCD_MspInit+0x1b0>)
 80051f0:	f7fd f880 	bl	80022f4 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80051f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80051fa:	2301      	movs	r3, #1
 80051fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80051fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005202:	4619      	mov	r1, r3
 8005204:	480b      	ldr	r0, [pc, #44]	; (8005234 <BSP_LCD_MspInit+0x1a8>)
 8005206:	f7fd f875 	bl	80022f4 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800520a:	2308      	movs	r3, #8
 800520c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800520e:	2301      	movs	r3, #1
 8005210:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8005212:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005216:	4619      	mov	r1, r3
 8005218:	4808      	ldr	r0, [pc, #32]	; (800523c <BSP_LCD_MspInit+0x1b0>)
 800521a:	f7fd f86b 	bl	80022f4 <HAL_GPIO_Init>
}
 800521e:	bf00      	nop
 8005220:	3740      	adds	r7, #64	; 0x40
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	40023800 	.word	0x40023800
 800522c:	40021000 	.word	0x40021000
 8005230:	40021800 	.word	0x40021800
 8005234:	40022000 	.word	0x40022000
 8005238:	40022400 	.word	0x40022400
 800523c:	40022800 	.word	0x40022800

08005240 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800524a:	4b0a      	ldr	r3, [pc, #40]	; (8005274 <BSP_LCD_ClockConfig+0x34>)
 800524c:	2208      	movs	r2, #8
 800524e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8005250:	4b08      	ldr	r3, [pc, #32]	; (8005274 <BSP_LCD_ClockConfig+0x34>)
 8005252:	22c0      	movs	r2, #192	; 0xc0
 8005254:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8005256:	4b07      	ldr	r3, [pc, #28]	; (8005274 <BSP_LCD_ClockConfig+0x34>)
 8005258:	2205      	movs	r2, #5
 800525a:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800525c:	4b05      	ldr	r3, [pc, #20]	; (8005274 <BSP_LCD_ClockConfig+0x34>)
 800525e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005262:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8005264:	4803      	ldr	r0, [pc, #12]	; (8005274 <BSP_LCD_ClockConfig+0x34>)
 8005266:	f7fe fbc7 	bl	80039f8 <HAL_RCCEx_PeriphCLKConfig>
}
 800526a:	bf00      	nop
 800526c:	3708      	adds	r7, #8
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	2000010c 	.word	0x2000010c

08005278 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b088      	sub	sp, #32
 800527c:	af00      	add	r7, sp, #0
 800527e:	4603      	mov	r3, r0
 8005280:	603a      	str	r2, [r7, #0]
 8005282:	80fb      	strh	r3, [r7, #6]
 8005284:	460b      	mov	r3, r1
 8005286:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8005288:	2300      	movs	r3, #0
 800528a:	61fb      	str	r3, [r7, #28]
 800528c:	2300      	movs	r3, #0
 800528e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8005290:	4b53      	ldr	r3, [pc, #332]	; (80053e0 <DrawChar+0x168>)
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	4953      	ldr	r1, [pc, #332]	; (80053e4 <DrawChar+0x16c>)
 8005296:	4613      	mov	r3, r2
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	4413      	add	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	440b      	add	r3, r1
 80052a0:	3308      	adds	r3, #8
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	88db      	ldrh	r3, [r3, #6]
 80052a6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80052a8:	4b4d      	ldr	r3, [pc, #308]	; (80053e0 <DrawChar+0x168>)
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	494d      	ldr	r1, [pc, #308]	; (80053e4 <DrawChar+0x16c>)
 80052ae:	4613      	mov	r3, r2
 80052b0:	005b      	lsls	r3, r3, #1
 80052b2:	4413      	add	r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	440b      	add	r3, r1
 80052b8:	3308      	adds	r3, #8
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	889b      	ldrh	r3, [r3, #4]
 80052be:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80052c0:	8a3b      	ldrh	r3, [r7, #16]
 80052c2:	3307      	adds	r3, #7
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	da00      	bge.n	80052ca <DrawChar+0x52>
 80052c8:	3307      	adds	r3, #7
 80052ca:	10db      	asrs	r3, r3, #3
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	b2da      	uxtb	r2, r3
 80052d2:	8a3b      	ldrh	r3, [r7, #16]
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80052da:	2300      	movs	r3, #0
 80052dc:	61fb      	str	r3, [r7, #28]
 80052de:	e076      	b.n	80053ce <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80052e0:	8a3b      	ldrh	r3, [r7, #16]
 80052e2:	3307      	adds	r3, #7
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	da00      	bge.n	80052ea <DrawChar+0x72>
 80052e8:	3307      	adds	r3, #7
 80052ea:	10db      	asrs	r3, r3, #3
 80052ec:	461a      	mov	r2, r3
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	fb03 f302 	mul.w	r3, r3, r2
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	4413      	add	r3, r2
 80052f8:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80052fa:	8a3b      	ldrh	r3, [r7, #16]
 80052fc:	3307      	adds	r3, #7
 80052fe:	2b00      	cmp	r3, #0
 8005300:	da00      	bge.n	8005304 <DrawChar+0x8c>
 8005302:	3307      	adds	r3, #7
 8005304:	10db      	asrs	r3, r3, #3
 8005306:	2b01      	cmp	r3, #1
 8005308:	d002      	beq.n	8005310 <DrawChar+0x98>
 800530a:	2b02      	cmp	r3, #2
 800530c:	d004      	beq.n	8005318 <DrawChar+0xa0>
 800530e:	e00c      	b.n	800532a <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	617b      	str	r3, [r7, #20]
      break;
 8005316:	e016      	b.n	8005346 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	021b      	lsls	r3, r3, #8
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	3201      	adds	r2, #1
 8005322:	7812      	ldrb	r2, [r2, #0]
 8005324:	4313      	orrs	r3, r2
 8005326:	617b      	str	r3, [r7, #20]
      break;
 8005328:	e00d      	b.n	8005346 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	041a      	lsls	r2, r3, #16
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	3301      	adds	r3, #1
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	021b      	lsls	r3, r3, #8
 8005338:	4313      	orrs	r3, r2
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	3202      	adds	r2, #2
 800533e:	7812      	ldrb	r2, [r2, #0]
 8005340:	4313      	orrs	r3, r2
 8005342:	617b      	str	r3, [r7, #20]
      break;
 8005344:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8005346:	2300      	movs	r3, #0
 8005348:	61bb      	str	r3, [r7, #24]
 800534a:	e036      	b.n	80053ba <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 800534c:	8a3a      	ldrh	r2, [r7, #16]
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	1ad2      	subs	r2, r2, r3
 8005352:	7bfb      	ldrb	r3, [r7, #15]
 8005354:	4413      	add	r3, r2
 8005356:	3b01      	subs	r3, #1
 8005358:	2201      	movs	r2, #1
 800535a:	fa02 f303 	lsl.w	r3, r2, r3
 800535e:	461a      	mov	r2, r3
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	4013      	ands	r3, r2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d012      	beq.n	800538e <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	b29a      	uxth	r2, r3
 800536c:	88fb      	ldrh	r3, [r7, #6]
 800536e:	4413      	add	r3, r2
 8005370:	b298      	uxth	r0, r3
 8005372:	4b1b      	ldr	r3, [pc, #108]	; (80053e0 <DrawChar+0x168>)
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	491b      	ldr	r1, [pc, #108]	; (80053e4 <DrawChar+0x16c>)
 8005378:	4613      	mov	r3, r2
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	4413      	add	r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	440b      	add	r3, r1
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	88bb      	ldrh	r3, [r7, #4]
 8005386:	4619      	mov	r1, r3
 8005388:	f7ff fe1a 	bl	8004fc0 <BSP_LCD_DrawPixel>
 800538c:	e012      	b.n	80053b4 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	b29a      	uxth	r2, r3
 8005392:	88fb      	ldrh	r3, [r7, #6]
 8005394:	4413      	add	r3, r2
 8005396:	b298      	uxth	r0, r3
 8005398:	4b11      	ldr	r3, [pc, #68]	; (80053e0 <DrawChar+0x168>)
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	4911      	ldr	r1, [pc, #68]	; (80053e4 <DrawChar+0x16c>)
 800539e:	4613      	mov	r3, r2
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	4413      	add	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	440b      	add	r3, r1
 80053a8:	3304      	adds	r3, #4
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	88bb      	ldrh	r3, [r7, #4]
 80053ae:	4619      	mov	r1, r3
 80053b0:	f7ff fe06 	bl	8004fc0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	3301      	adds	r3, #1
 80053b8:	61bb      	str	r3, [r7, #24]
 80053ba:	8a3b      	ldrh	r3, [r7, #16]
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d3c4      	bcc.n	800534c <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80053c2:	88bb      	ldrh	r3, [r7, #4]
 80053c4:	3301      	adds	r3, #1
 80053c6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	3301      	adds	r3, #1
 80053cc:	61fb      	str	r3, [r7, #28]
 80053ce:	8a7b      	ldrh	r3, [r7, #18]
 80053d0:	69fa      	ldr	r2, [r7, #28]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d384      	bcc.n	80052e0 <DrawChar+0x68>
  }
}
 80053d6:	bf00      	nop
 80053d8:	3720      	adds	r7, #32
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	200000f0 	.word	0x200000f0
 80053e4:	200000f4 	.word	0x200000f4

080053e8 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af02      	add	r7, sp, #8
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
 80053f4:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80053f6:	4b1e      	ldr	r3, [pc, #120]	; (8005470 <LL_FillBuffer+0x88>)
 80053f8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80053fc:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80053fe:	4b1d      	ldr	r3, [pc, #116]	; (8005474 <LL_FillBuffer+0x8c>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a1d      	ldr	r2, [pc, #116]	; (8005478 <LL_FillBuffer+0x90>)
 8005404:	2134      	movs	r1, #52	; 0x34
 8005406:	fb01 f303 	mul.w	r3, r1, r3
 800540a:	4413      	add	r3, r2
 800540c:	3348      	adds	r3, #72	; 0x48
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2b02      	cmp	r3, #2
 8005412:	d103      	bne.n	800541c <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8005414:	4b16      	ldr	r3, [pc, #88]	; (8005470 <LL_FillBuffer+0x88>)
 8005416:	2202      	movs	r2, #2
 8005418:	609a      	str	r2, [r3, #8]
 800541a:	e002      	b.n	8005422 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800541c:	4b14      	ldr	r3, [pc, #80]	; (8005470 <LL_FillBuffer+0x88>)
 800541e:	2200      	movs	r2, #0
 8005420:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8005422:	4a13      	ldr	r2, [pc, #76]	; (8005470 <LL_FillBuffer+0x88>)
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8005428:	4b11      	ldr	r3, [pc, #68]	; (8005470 <LL_FillBuffer+0x88>)
 800542a:	4a14      	ldr	r2, [pc, #80]	; (800547c <LL_FillBuffer+0x94>)
 800542c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800542e:	4810      	ldr	r0, [pc, #64]	; (8005470 <LL_FillBuffer+0x88>)
 8005430:	f7fc fcd4 	bl	8001ddc <HAL_DMA2D_Init>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d115      	bne.n	8005466 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800543a:	68f9      	ldr	r1, [r7, #12]
 800543c:	480c      	ldr	r0, [pc, #48]	; (8005470 <LL_FillBuffer+0x88>)
 800543e:	f7fc fe2b 	bl	8002098 <HAL_DMA2D_ConfigLayer>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10e      	bne.n	8005466 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8005448:	68ba      	ldr	r2, [r7, #8]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	69f9      	ldr	r1, [r7, #28]
 8005452:	4807      	ldr	r0, [pc, #28]	; (8005470 <LL_FillBuffer+0x88>)
 8005454:	f7fc fd0c 	bl	8001e70 <HAL_DMA2D_Start>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d103      	bne.n	8005466 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800545e:	210a      	movs	r1, #10
 8005460:	4803      	ldr	r0, [pc, #12]	; (8005470 <LL_FillBuffer+0x88>)
 8005462:	f7fc fd30 	bl	8001ec6 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8005466:	bf00      	nop
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	200000b0 	.word	0x200000b0
 8005474:	200000f0 	.word	0x200000f0
 8005478:	20000290 	.word	0x20000290
 800547c:	4002b000 	.word	0x4002b000

08005480 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8005480:	b580      	push	{r7, lr}
 8005482:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8005484:	4b29      	ldr	r3, [pc, #164]	; (800552c <BSP_SDRAM_Init+0xac>)
 8005486:	4a2a      	ldr	r2, [pc, #168]	; (8005530 <BSP_SDRAM_Init+0xb0>)
 8005488:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800548a:	4b2a      	ldr	r3, [pc, #168]	; (8005534 <BSP_SDRAM_Init+0xb4>)
 800548c:	2202      	movs	r2, #2
 800548e:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8005490:	4b28      	ldr	r3, [pc, #160]	; (8005534 <BSP_SDRAM_Init+0xb4>)
 8005492:	2207      	movs	r2, #7
 8005494:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8005496:	4b27      	ldr	r3, [pc, #156]	; (8005534 <BSP_SDRAM_Init+0xb4>)
 8005498:	2204      	movs	r2, #4
 800549a:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 800549c:	4b25      	ldr	r3, [pc, #148]	; (8005534 <BSP_SDRAM_Init+0xb4>)
 800549e:	2207      	movs	r2, #7
 80054a0:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80054a2:	4b24      	ldr	r3, [pc, #144]	; (8005534 <BSP_SDRAM_Init+0xb4>)
 80054a4:	2202      	movs	r2, #2
 80054a6:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80054a8:	4b22      	ldr	r3, [pc, #136]	; (8005534 <BSP_SDRAM_Init+0xb4>)
 80054aa:	2202      	movs	r2, #2
 80054ac:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80054ae:	4b21      	ldr	r3, [pc, #132]	; (8005534 <BSP_SDRAM_Init+0xb4>)
 80054b0:	2202      	movs	r2, #2
 80054b2:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80054b4:	4b1d      	ldr	r3, [pc, #116]	; (800552c <BSP_SDRAM_Init+0xac>)
 80054b6:	2200      	movs	r2, #0
 80054b8:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80054ba:	4b1c      	ldr	r3, [pc, #112]	; (800552c <BSP_SDRAM_Init+0xac>)
 80054bc:	2200      	movs	r2, #0
 80054be:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80054c0:	4b1a      	ldr	r3, [pc, #104]	; (800552c <BSP_SDRAM_Init+0xac>)
 80054c2:	2204      	movs	r2, #4
 80054c4:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80054c6:	4b19      	ldr	r3, [pc, #100]	; (800552c <BSP_SDRAM_Init+0xac>)
 80054c8:	2210      	movs	r2, #16
 80054ca:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80054cc:	4b17      	ldr	r3, [pc, #92]	; (800552c <BSP_SDRAM_Init+0xac>)
 80054ce:	2240      	movs	r2, #64	; 0x40
 80054d0:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80054d2:	4b16      	ldr	r3, [pc, #88]	; (800552c <BSP_SDRAM_Init+0xac>)
 80054d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054d8:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80054da:	4b14      	ldr	r3, [pc, #80]	; (800552c <BSP_SDRAM_Init+0xac>)
 80054dc:	2200      	movs	r2, #0
 80054de:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80054e0:	4b12      	ldr	r3, [pc, #72]	; (800552c <BSP_SDRAM_Init+0xac>)
 80054e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054e6:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80054e8:	4b10      	ldr	r3, [pc, #64]	; (800552c <BSP_SDRAM_Init+0xac>)
 80054ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80054ee:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80054f0:	4b0e      	ldr	r3, [pc, #56]	; (800552c <BSP_SDRAM_Init+0xac>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80054f6:	2100      	movs	r1, #0
 80054f8:	480c      	ldr	r0, [pc, #48]	; (800552c <BSP_SDRAM_Init+0xac>)
 80054fa:	f000 f87f 	bl	80055fc <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80054fe:	490d      	ldr	r1, [pc, #52]	; (8005534 <BSP_SDRAM_Init+0xb4>)
 8005500:	480a      	ldr	r0, [pc, #40]	; (800552c <BSP_SDRAM_Init+0xac>)
 8005502:	f7fb fe0d 	bl	8001120 <HAL_SDRAM_Init>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d003      	beq.n	8005514 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800550c:	4b0a      	ldr	r3, [pc, #40]	; (8005538 <BSP_SDRAM_Init+0xb8>)
 800550e:	2201      	movs	r2, #1
 8005510:	701a      	strb	r2, [r3, #0]
 8005512:	e002      	b.n	800551a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8005514:	4b08      	ldr	r3, [pc, #32]	; (8005538 <BSP_SDRAM_Init+0xb8>)
 8005516:	2200      	movs	r2, #0
 8005518:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800551a:	f240 6003 	movw	r0, #1539	; 0x603
 800551e:	f000 f80d 	bl	800553c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8005522:	4b05      	ldr	r3, [pc, #20]	; (8005538 <BSP_SDRAM_Init+0xb8>)
 8005524:	781b      	ldrb	r3, [r3, #0]
}
 8005526:	4618      	mov	r0, r3
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	20000338 	.word	0x20000338
 8005530:	a0000140 	.word	0xa0000140
 8005534:	20000190 	.word	0x20000190
 8005538:	2000003c 	.word	0x2000003c

0800553c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8005544:	2300      	movs	r3, #0
 8005546:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8005548:	4b2a      	ldr	r3, [pc, #168]	; (80055f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800554a:	2201      	movs	r2, #1
 800554c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800554e:	4b29      	ldr	r3, [pc, #164]	; (80055f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005550:	2210      	movs	r2, #16
 8005552:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005554:	4b27      	ldr	r3, [pc, #156]	; (80055f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005556:	2201      	movs	r2, #1
 8005558:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800555a:	4b26      	ldr	r3, [pc, #152]	; (80055f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800555c:	2200      	movs	r2, #0
 800555e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8005560:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005564:	4923      	ldr	r1, [pc, #140]	; (80055f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005566:	4824      	ldr	r0, [pc, #144]	; (80055f8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005568:	f7fb fe18 	bl	800119c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800556c:	2001      	movs	r0, #1
 800556e:	f7fc f85b 	bl	8001628 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8005572:	4b20      	ldr	r3, [pc, #128]	; (80055f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005574:	2202      	movs	r2, #2
 8005576:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005578:	4b1e      	ldr	r3, [pc, #120]	; (80055f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800557a:	2210      	movs	r2, #16
 800557c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800557e:	4b1d      	ldr	r3, [pc, #116]	; (80055f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005580:	2201      	movs	r2, #1
 8005582:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005584:	4b1b      	ldr	r3, [pc, #108]	; (80055f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005586:	2200      	movs	r2, #0
 8005588:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800558a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800558e:	4919      	ldr	r1, [pc, #100]	; (80055f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005590:	4819      	ldr	r0, [pc, #100]	; (80055f8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005592:	f7fb fe03 	bl	800119c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8005596:	4b17      	ldr	r3, [pc, #92]	; (80055f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005598:	2203      	movs	r2, #3
 800559a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800559c:	4b15      	ldr	r3, [pc, #84]	; (80055f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800559e:	2210      	movs	r2, #16
 80055a0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80055a2:	4b14      	ldr	r3, [pc, #80]	; (80055f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80055a4:	2208      	movs	r2, #8
 80055a6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80055a8:	4b12      	ldr	r3, [pc, #72]	; (80055f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80055aa:	2200      	movs	r2, #0
 80055ac:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80055ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055b2:	4910      	ldr	r1, [pc, #64]	; (80055f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80055b4:	4810      	ldr	r0, [pc, #64]	; (80055f8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80055b6:	f7fb fdf1 	bl	800119c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80055ba:	f44f 7308 	mov.w	r3, #544	; 0x220
 80055be:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80055c0:	4b0c      	ldr	r3, [pc, #48]	; (80055f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80055c2:	2204      	movs	r2, #4
 80055c4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80055c6:	4b0b      	ldr	r3, [pc, #44]	; (80055f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80055c8:	2210      	movs	r2, #16
 80055ca:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80055cc:	4b09      	ldr	r3, [pc, #36]	; (80055f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80055ce:	2201      	movs	r2, #1
 80055d0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	4a07      	ldr	r2, [pc, #28]	; (80055f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80055d6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80055d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055dc:	4905      	ldr	r1, [pc, #20]	; (80055f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80055de:	4806      	ldr	r0, [pc, #24]	; (80055f8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80055e0:	f7fb fddc 	bl	800119c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80055e4:	6879      	ldr	r1, [r7, #4]
 80055e6:	4804      	ldr	r0, [pc, #16]	; (80055f8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80055e8:	f7fb fe03 	bl	80011f2 <HAL_SDRAM_ProgramRefreshRate>
}
 80055ec:	bf00      	nop
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	200001ac 	.word	0x200001ac
 80055f8:	20000338 	.word	0x20000338

080055fc <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b090      	sub	sp, #64	; 0x40
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005606:	4b70      	ldr	r3, [pc, #448]	; (80057c8 <BSP_SDRAM_MspInit+0x1cc>)
 8005608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560a:	4a6f      	ldr	r2, [pc, #444]	; (80057c8 <BSP_SDRAM_MspInit+0x1cc>)
 800560c:	f043 0301 	orr.w	r3, r3, #1
 8005610:	6393      	str	r3, [r2, #56]	; 0x38
 8005612:	4b6d      	ldr	r3, [pc, #436]	; (80057c8 <BSP_SDRAM_MspInit+0x1cc>)
 8005614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	62bb      	str	r3, [r7, #40]	; 0x28
 800561c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800561e:	4b6a      	ldr	r3, [pc, #424]	; (80057c8 <BSP_SDRAM_MspInit+0x1cc>)
 8005620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005622:	4a69      	ldr	r2, [pc, #420]	; (80057c8 <BSP_SDRAM_MspInit+0x1cc>)
 8005624:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005628:	6313      	str	r3, [r2, #48]	; 0x30
 800562a:	4b67      	ldr	r3, [pc, #412]	; (80057c8 <BSP_SDRAM_MspInit+0x1cc>)
 800562c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005632:	627b      	str	r3, [r7, #36]	; 0x24
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005636:	4b64      	ldr	r3, [pc, #400]	; (80057c8 <BSP_SDRAM_MspInit+0x1cc>)
 8005638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563a:	4a63      	ldr	r2, [pc, #396]	; (80057c8 <BSP_SDRAM_MspInit+0x1cc>)
 800563c:	f043 0304 	orr.w	r3, r3, #4
 8005640:	6313      	str	r3, [r2, #48]	; 0x30
 8005642:	4b61      	ldr	r3, [pc, #388]	; (80057c8 <BSP_SDRAM_MspInit+0x1cc>)
 8005644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005646:	f003 0304 	and.w	r3, r3, #4
 800564a:	623b      	str	r3, [r7, #32]
 800564c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800564e:	4b5e      	ldr	r3, [pc, #376]	; (80057c8 <BSP_SDRAM_MspInit+0x1cc>)
 8005650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005652:	4a5d      	ldr	r2, [pc, #372]	; (80057c8 <BSP_SDRAM_MspInit+0x1cc>)
 8005654:	f043 0308 	orr.w	r3, r3, #8
 8005658:	6313      	str	r3, [r2, #48]	; 0x30
 800565a:	4b5b      	ldr	r3, [pc, #364]	; (80057c8 <BSP_SDRAM_MspInit+0x1cc>)
 800565c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565e:	f003 0308 	and.w	r3, r3, #8
 8005662:	61fb      	str	r3, [r7, #28]
 8005664:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005666:	4b58      	ldr	r3, [pc, #352]	; (80057c8 <BSP_SDRAM_MspInit+0x1cc>)
 8005668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566a:	4a57      	ldr	r2, [pc, #348]	; (80057c8 <BSP_SDRAM_MspInit+0x1cc>)
 800566c:	f043 0310 	orr.w	r3, r3, #16
 8005670:	6313      	str	r3, [r2, #48]	; 0x30
 8005672:	4b55      	ldr	r3, [pc, #340]	; (80057c8 <BSP_SDRAM_MspInit+0x1cc>)
 8005674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005676:	f003 0310 	and.w	r3, r3, #16
 800567a:	61bb      	str	r3, [r7, #24]
 800567c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800567e:	4b52      	ldr	r3, [pc, #328]	; (80057c8 <BSP_SDRAM_MspInit+0x1cc>)
 8005680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005682:	4a51      	ldr	r2, [pc, #324]	; (80057c8 <BSP_SDRAM_MspInit+0x1cc>)
 8005684:	f043 0320 	orr.w	r3, r3, #32
 8005688:	6313      	str	r3, [r2, #48]	; 0x30
 800568a:	4b4f      	ldr	r3, [pc, #316]	; (80057c8 <BSP_SDRAM_MspInit+0x1cc>)
 800568c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568e:	f003 0320 	and.w	r3, r3, #32
 8005692:	617b      	str	r3, [r7, #20]
 8005694:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005696:	4b4c      	ldr	r3, [pc, #304]	; (80057c8 <BSP_SDRAM_MspInit+0x1cc>)
 8005698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569a:	4a4b      	ldr	r2, [pc, #300]	; (80057c8 <BSP_SDRAM_MspInit+0x1cc>)
 800569c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056a0:	6313      	str	r3, [r2, #48]	; 0x30
 80056a2:	4b49      	ldr	r3, [pc, #292]	; (80057c8 <BSP_SDRAM_MspInit+0x1cc>)
 80056a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056aa:	613b      	str	r3, [r7, #16]
 80056ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80056ae:	4b46      	ldr	r3, [pc, #280]	; (80057c8 <BSP_SDRAM_MspInit+0x1cc>)
 80056b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b2:	4a45      	ldr	r2, [pc, #276]	; (80057c8 <BSP_SDRAM_MspInit+0x1cc>)
 80056b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056b8:	6313      	str	r3, [r2, #48]	; 0x30
 80056ba:	4b43      	ldr	r3, [pc, #268]	; (80057c8 <BSP_SDRAM_MspInit+0x1cc>)
 80056bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c2:	60fb      	str	r3, [r7, #12]
 80056c4:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80056c6:	2302      	movs	r3, #2
 80056c8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80056ca:	2301      	movs	r3, #1
 80056cc:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80056ce:	2302      	movs	r3, #2
 80056d0:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80056d2:	230c      	movs	r3, #12
 80056d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80056d6:	2308      	movs	r3, #8
 80056d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80056da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056de:	4619      	mov	r1, r3
 80056e0:	483a      	ldr	r0, [pc, #232]	; (80057cc <BSP_SDRAM_MspInit+0x1d0>)
 80056e2:	f7fc fe07 	bl	80022f4 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80056e6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80056ea:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80056ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056f0:	4619      	mov	r1, r3
 80056f2:	4837      	ldr	r0, [pc, #220]	; (80057d0 <BSP_SDRAM_MspInit+0x1d4>)
 80056f4:	f7fc fdfe 	bl	80022f4 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80056f8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80056fc:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80056fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005702:	4619      	mov	r1, r3
 8005704:	4833      	ldr	r0, [pc, #204]	; (80057d4 <BSP_SDRAM_MspInit+0x1d8>)
 8005706:	f7fc fdf5 	bl	80022f4 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800570a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800570e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005710:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005714:	4619      	mov	r1, r3
 8005716:	4830      	ldr	r0, [pc, #192]	; (80057d8 <BSP_SDRAM_MspInit+0x1dc>)
 8005718:	f7fc fdec 	bl	80022f4 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800571c:	f248 1333 	movw	r3, #33075	; 0x8133
 8005720:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005722:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005726:	4619      	mov	r1, r3
 8005728:	482c      	ldr	r0, [pc, #176]	; (80057dc <BSP_SDRAM_MspInit+0x1e0>)
 800572a:	f7fc fde3 	bl	80022f4 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800572e:	2328      	movs	r3, #40	; 0x28
 8005730:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8005732:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005736:	4619      	mov	r1, r3
 8005738:	4829      	ldr	r0, [pc, #164]	; (80057e0 <BSP_SDRAM_MspInit+0x1e4>)
 800573a:	f7fc fddb 	bl	80022f4 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800573e:	4b29      	ldr	r3, [pc, #164]	; (80057e4 <BSP_SDRAM_MspInit+0x1e8>)
 8005740:	2200      	movs	r2, #0
 8005742:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8005744:	4b27      	ldr	r3, [pc, #156]	; (80057e4 <BSP_SDRAM_MspInit+0x1e8>)
 8005746:	2280      	movs	r2, #128	; 0x80
 8005748:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800574a:	4b26      	ldr	r3, [pc, #152]	; (80057e4 <BSP_SDRAM_MspInit+0x1e8>)
 800574c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005750:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8005752:	4b24      	ldr	r3, [pc, #144]	; (80057e4 <BSP_SDRAM_MspInit+0x1e8>)
 8005754:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005758:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800575a:	4b22      	ldr	r3, [pc, #136]	; (80057e4 <BSP_SDRAM_MspInit+0x1e8>)
 800575c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005760:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8005762:	4b20      	ldr	r3, [pc, #128]	; (80057e4 <BSP_SDRAM_MspInit+0x1e8>)
 8005764:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005768:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800576a:	4b1e      	ldr	r3, [pc, #120]	; (80057e4 <BSP_SDRAM_MspInit+0x1e8>)
 800576c:	2200      	movs	r2, #0
 800576e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8005770:	4b1c      	ldr	r3, [pc, #112]	; (80057e4 <BSP_SDRAM_MspInit+0x1e8>)
 8005772:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005776:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8005778:	4b1a      	ldr	r3, [pc, #104]	; (80057e4 <BSP_SDRAM_MspInit+0x1e8>)
 800577a:	2200      	movs	r2, #0
 800577c:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800577e:	4b19      	ldr	r3, [pc, #100]	; (80057e4 <BSP_SDRAM_MspInit+0x1e8>)
 8005780:	2203      	movs	r2, #3
 8005782:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8005784:	4b17      	ldr	r3, [pc, #92]	; (80057e4 <BSP_SDRAM_MspInit+0x1e8>)
 8005786:	2200      	movs	r2, #0
 8005788:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800578a:	4b16      	ldr	r3, [pc, #88]	; (80057e4 <BSP_SDRAM_MspInit+0x1e8>)
 800578c:	2200      	movs	r2, #0
 800578e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8005790:	4b14      	ldr	r3, [pc, #80]	; (80057e4 <BSP_SDRAM_MspInit+0x1e8>)
 8005792:	4a15      	ldr	r2, [pc, #84]	; (80057e8 <BSP_SDRAM_MspInit+0x1ec>)
 8005794:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a12      	ldr	r2, [pc, #72]	; (80057e4 <BSP_SDRAM_MspInit+0x1e8>)
 800579a:	631a      	str	r2, [r3, #48]	; 0x30
 800579c:	4a11      	ldr	r2, [pc, #68]	; (80057e4 <BSP_SDRAM_MspInit+0x1e8>)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80057a2:	4810      	ldr	r0, [pc, #64]	; (80057e4 <BSP_SDRAM_MspInit+0x1e8>)
 80057a4:	f7fc fa0c 	bl	8001bc0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80057a8:	480e      	ldr	r0, [pc, #56]	; (80057e4 <BSP_SDRAM_MspInit+0x1e8>)
 80057aa:	f7fc f95b 	bl	8001a64 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80057ae:	2200      	movs	r2, #0
 80057b0:	210f      	movs	r1, #15
 80057b2:	2038      	movs	r0, #56	; 0x38
 80057b4:	f7fc f835 	bl	8001822 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80057b8:	2038      	movs	r0, #56	; 0x38
 80057ba:	f7fc f84e 	bl	800185a <HAL_NVIC_EnableIRQ>
}
 80057be:	bf00      	nop
 80057c0:	3740      	adds	r7, #64	; 0x40
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	40023800 	.word	0x40023800
 80057cc:	40020800 	.word	0x40020800
 80057d0:	40020c00 	.word	0x40020c00
 80057d4:	40021000 	.word	0x40021000
 80057d8:	40021400 	.word	0x40021400
 80057dc:	40021800 	.word	0x40021800
 80057e0:	40021c00 	.word	0x40021c00
 80057e4:	200001bc 	.word	0x200001bc
 80057e8:	40026410 	.word	0x40026410

080057ec <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	4603      	mov	r3, r0
 80057f4:	460a      	mov	r2, r1
 80057f6:	80fb      	strh	r3, [r7, #6]
 80057f8:	4613      	mov	r3, r2
 80057fa:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 80057fc:	2300      	movs	r3, #0
 80057fe:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8005800:	4a14      	ldr	r2, [pc, #80]	; (8005854 <BSP_TS_Init+0x68>)
 8005802:	88fb      	ldrh	r3, [r7, #6]
 8005804:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8005806:	4a14      	ldr	r2, [pc, #80]	; (8005858 <BSP_TS_Init+0x6c>)
 8005808:	88bb      	ldrh	r3, [r7, #4]
 800580a:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800580c:	4b13      	ldr	r3, [pc, #76]	; (800585c <BSP_TS_Init+0x70>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2070      	movs	r0, #112	; 0x70
 8005812:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8005814:	4b11      	ldr	r3, [pc, #68]	; (800585c <BSP_TS_Init+0x70>)
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	2070      	movs	r0, #112	; 0x70
 800581a:	4798      	blx	r3
 800581c:	4603      	mov	r3, r0
 800581e:	2b51      	cmp	r3, #81	; 0x51
 8005820:	d111      	bne.n	8005846 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8005822:	4b0f      	ldr	r3, [pc, #60]	; (8005860 <BSP_TS_Init+0x74>)
 8005824:	4a0d      	ldr	r2, [pc, #52]	; (800585c <BSP_TS_Init+0x70>)
 8005826:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8005828:	4b0e      	ldr	r3, [pc, #56]	; (8005864 <BSP_TS_Init+0x78>)
 800582a:	2270      	movs	r2, #112	; 0x70
 800582c:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 800582e:	4b0e      	ldr	r3, [pc, #56]	; (8005868 <BSP_TS_Init+0x7c>)
 8005830:	2208      	movs	r2, #8
 8005832:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8005834:	4b0a      	ldr	r3, [pc, #40]	; (8005860 <BSP_TS_Init+0x74>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	4a0a      	ldr	r2, [pc, #40]	; (8005864 <BSP_TS_Init+0x78>)
 800583c:	7812      	ldrb	r2, [r2, #0]
 800583e:	b292      	uxth	r2, r2
 8005840:	4610      	mov	r0, r2
 8005842:	4798      	blx	r3
 8005844:	e001      	b.n	800584a <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8005846:	2303      	movs	r3, #3
 8005848:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800584a:	7bfb      	ldrb	r3, [r7, #15]
}
 800584c:	4618      	mov	r0, r3
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	20000220 	.word	0x20000220
 8005858:	20000222 	.word	0x20000222
 800585c:	20000014 	.word	0x20000014
 8005860:	2000021c 	.word	0x2000021c
 8005864:	20000225 	.word	0x20000225
 8005868:	20000224 	.word	0x20000224

0800586c <__libc_init_array>:
 800586c:	b570      	push	{r4, r5, r6, lr}
 800586e:	4e0d      	ldr	r6, [pc, #52]	; (80058a4 <__libc_init_array+0x38>)
 8005870:	4c0d      	ldr	r4, [pc, #52]	; (80058a8 <__libc_init_array+0x3c>)
 8005872:	1ba4      	subs	r4, r4, r6
 8005874:	10a4      	asrs	r4, r4, #2
 8005876:	2500      	movs	r5, #0
 8005878:	42a5      	cmp	r5, r4
 800587a:	d109      	bne.n	8005890 <__libc_init_array+0x24>
 800587c:	4e0b      	ldr	r6, [pc, #44]	; (80058ac <__libc_init_array+0x40>)
 800587e:	4c0c      	ldr	r4, [pc, #48]	; (80058b0 <__libc_init_array+0x44>)
 8005880:	f000 f820 	bl	80058c4 <_init>
 8005884:	1ba4      	subs	r4, r4, r6
 8005886:	10a4      	asrs	r4, r4, #2
 8005888:	2500      	movs	r5, #0
 800588a:	42a5      	cmp	r5, r4
 800588c:	d105      	bne.n	800589a <__libc_init_array+0x2e>
 800588e:	bd70      	pop	{r4, r5, r6, pc}
 8005890:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005894:	4798      	blx	r3
 8005896:	3501      	adds	r5, #1
 8005898:	e7ee      	b.n	8005878 <__libc_init_array+0xc>
 800589a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800589e:	4798      	blx	r3
 80058a0:	3501      	adds	r5, #1
 80058a2:	e7f2      	b.n	800588a <__libc_init_array+0x1e>
 80058a4:	080073bc 	.word	0x080073bc
 80058a8:	080073bc 	.word	0x080073bc
 80058ac:	080073bc 	.word	0x080073bc
 80058b0:	080073c0 	.word	0x080073c0

080058b4 <memset>:
 80058b4:	4402      	add	r2, r0
 80058b6:	4603      	mov	r3, r0
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d100      	bne.n	80058be <memset+0xa>
 80058bc:	4770      	bx	lr
 80058be:	f803 1b01 	strb.w	r1, [r3], #1
 80058c2:	e7f9      	b.n	80058b8 <memset+0x4>

080058c4 <_init>:
 80058c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058c6:	bf00      	nop
 80058c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ca:	bc08      	pop	{r3}
 80058cc:	469e      	mov	lr, r3
 80058ce:	4770      	bx	lr

080058d0 <_fini>:
 80058d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058d2:	bf00      	nop
 80058d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058d6:	bc08      	pop	{r3}
 80058d8:	469e      	mov	lr, r3
 80058da:	4770      	bx	lr
