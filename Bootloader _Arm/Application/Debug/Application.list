
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005738  080401c8  080401c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b44  08045900  08045900  00015900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08047444  08047444  00020040  2**0
                  CONTENTS
  4 .ARM          00000008  08047444  08047444  00017444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804744c  0804744c  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804744c  0804744c  0001744c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08047450  08047450  00017450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08047454  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  20000040  08047494  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08047494  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f50  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002da2  00000000  00000000  00032fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001120  00000000  00000000  00035d68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f90  00000000  00000000  00036e88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000271f1  00000000  00000000  00037e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f147  00000000  00000000  0005f009  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ed791  00000000  00000000  0006e150  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015b8e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045d4  00000000  00000000  0015b95c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080401c8 <__do_global_dtors_aux>:
 80401c8:	b510      	push	{r4, lr}
 80401ca:	4c05      	ldr	r4, [pc, #20]	; (80401e0 <__do_global_dtors_aux+0x18>)
 80401cc:	7823      	ldrb	r3, [r4, #0]
 80401ce:	b933      	cbnz	r3, 80401de <__do_global_dtors_aux+0x16>
 80401d0:	4b04      	ldr	r3, [pc, #16]	; (80401e4 <__do_global_dtors_aux+0x1c>)
 80401d2:	b113      	cbz	r3, 80401da <__do_global_dtors_aux+0x12>
 80401d4:	4804      	ldr	r0, [pc, #16]	; (80401e8 <__do_global_dtors_aux+0x20>)
 80401d6:	f3af 8000 	nop.w
 80401da:	2301      	movs	r3, #1
 80401dc:	7023      	strb	r3, [r4, #0]
 80401de:	bd10      	pop	{r4, pc}
 80401e0:	20000040 	.word	0x20000040
 80401e4:	00000000 	.word	0x00000000
 80401e8:	080458e8 	.word	0x080458e8

080401ec <frame_dummy>:
 80401ec:	b508      	push	{r3, lr}
 80401ee:	4b03      	ldr	r3, [pc, #12]	; (80401fc <frame_dummy+0x10>)
 80401f0:	b11b      	cbz	r3, 80401fa <frame_dummy+0xe>
 80401f2:	4903      	ldr	r1, [pc, #12]	; (8040200 <frame_dummy+0x14>)
 80401f4:	4803      	ldr	r0, [pc, #12]	; (8040204 <frame_dummy+0x18>)
 80401f6:	f3af 8000 	nop.w
 80401fa:	bd08      	pop	{r3, pc}
 80401fc:	00000000 	.word	0x00000000
 8040200:	20000044 	.word	0x20000044
 8040204:	080458e8 	.word	0x080458e8

08040208 <__aeabi_uldivmod>:
 8040208:	b953      	cbnz	r3, 8040220 <__aeabi_uldivmod+0x18>
 804020a:	b94a      	cbnz	r2, 8040220 <__aeabi_uldivmod+0x18>
 804020c:	2900      	cmp	r1, #0
 804020e:	bf08      	it	eq
 8040210:	2800      	cmpeq	r0, #0
 8040212:	bf1c      	itt	ne
 8040214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8040218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 804021c:	f000 b972 	b.w	8040504 <__aeabi_idiv0>
 8040220:	f1ad 0c08 	sub.w	ip, sp, #8
 8040224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040228:	f000 f806 	bl	8040238 <__udivmoddi4>
 804022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040234:	b004      	add	sp, #16
 8040236:	4770      	bx	lr

08040238 <__udivmoddi4>:
 8040238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804023c:	9e08      	ldr	r6, [sp, #32]
 804023e:	4604      	mov	r4, r0
 8040240:	4688      	mov	r8, r1
 8040242:	2b00      	cmp	r3, #0
 8040244:	d14b      	bne.n	80402de <__udivmoddi4+0xa6>
 8040246:	428a      	cmp	r2, r1
 8040248:	4615      	mov	r5, r2
 804024a:	d967      	bls.n	804031c <__udivmoddi4+0xe4>
 804024c:	fab2 f282 	clz	r2, r2
 8040250:	b14a      	cbz	r2, 8040266 <__udivmoddi4+0x2e>
 8040252:	f1c2 0720 	rsb	r7, r2, #32
 8040256:	fa01 f302 	lsl.w	r3, r1, r2
 804025a:	fa20 f707 	lsr.w	r7, r0, r7
 804025e:	4095      	lsls	r5, r2
 8040260:	ea47 0803 	orr.w	r8, r7, r3
 8040264:	4094      	lsls	r4, r2
 8040266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 804026a:	0c23      	lsrs	r3, r4, #16
 804026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8040270:	fa1f fc85 	uxth.w	ip, r5
 8040274:	fb0e 8817 	mls	r8, lr, r7, r8
 8040278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 804027c:	fb07 f10c 	mul.w	r1, r7, ip
 8040280:	4299      	cmp	r1, r3
 8040282:	d909      	bls.n	8040298 <__udivmoddi4+0x60>
 8040284:	18eb      	adds	r3, r5, r3
 8040286:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 804028a:	f080 811b 	bcs.w	80404c4 <__udivmoddi4+0x28c>
 804028e:	4299      	cmp	r1, r3
 8040290:	f240 8118 	bls.w	80404c4 <__udivmoddi4+0x28c>
 8040294:	3f02      	subs	r7, #2
 8040296:	442b      	add	r3, r5
 8040298:	1a5b      	subs	r3, r3, r1
 804029a:	b2a4      	uxth	r4, r4
 804029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80402a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80402a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80402a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80402ac:	45a4      	cmp	ip, r4
 80402ae:	d909      	bls.n	80402c4 <__udivmoddi4+0x8c>
 80402b0:	192c      	adds	r4, r5, r4
 80402b2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80402b6:	f080 8107 	bcs.w	80404c8 <__udivmoddi4+0x290>
 80402ba:	45a4      	cmp	ip, r4
 80402bc:	f240 8104 	bls.w	80404c8 <__udivmoddi4+0x290>
 80402c0:	3802      	subs	r0, #2
 80402c2:	442c      	add	r4, r5
 80402c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80402c8:	eba4 040c 	sub.w	r4, r4, ip
 80402cc:	2700      	movs	r7, #0
 80402ce:	b11e      	cbz	r6, 80402d8 <__udivmoddi4+0xa0>
 80402d0:	40d4      	lsrs	r4, r2
 80402d2:	2300      	movs	r3, #0
 80402d4:	e9c6 4300 	strd	r4, r3, [r6]
 80402d8:	4639      	mov	r1, r7
 80402da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80402de:	428b      	cmp	r3, r1
 80402e0:	d909      	bls.n	80402f6 <__udivmoddi4+0xbe>
 80402e2:	2e00      	cmp	r6, #0
 80402e4:	f000 80eb 	beq.w	80404be <__udivmoddi4+0x286>
 80402e8:	2700      	movs	r7, #0
 80402ea:	e9c6 0100 	strd	r0, r1, [r6]
 80402ee:	4638      	mov	r0, r7
 80402f0:	4639      	mov	r1, r7
 80402f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80402f6:	fab3 f783 	clz	r7, r3
 80402fa:	2f00      	cmp	r7, #0
 80402fc:	d147      	bne.n	804038e <__udivmoddi4+0x156>
 80402fe:	428b      	cmp	r3, r1
 8040300:	d302      	bcc.n	8040308 <__udivmoddi4+0xd0>
 8040302:	4282      	cmp	r2, r0
 8040304:	f200 80fa 	bhi.w	80404fc <__udivmoddi4+0x2c4>
 8040308:	1a84      	subs	r4, r0, r2
 804030a:	eb61 0303 	sbc.w	r3, r1, r3
 804030e:	2001      	movs	r0, #1
 8040310:	4698      	mov	r8, r3
 8040312:	2e00      	cmp	r6, #0
 8040314:	d0e0      	beq.n	80402d8 <__udivmoddi4+0xa0>
 8040316:	e9c6 4800 	strd	r4, r8, [r6]
 804031a:	e7dd      	b.n	80402d8 <__udivmoddi4+0xa0>
 804031c:	b902      	cbnz	r2, 8040320 <__udivmoddi4+0xe8>
 804031e:	deff      	udf	#255	; 0xff
 8040320:	fab2 f282 	clz	r2, r2
 8040324:	2a00      	cmp	r2, #0
 8040326:	f040 808f 	bne.w	8040448 <__udivmoddi4+0x210>
 804032a:	1b49      	subs	r1, r1, r5
 804032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8040330:	fa1f f885 	uxth.w	r8, r5
 8040334:	2701      	movs	r7, #1
 8040336:	fbb1 fcfe 	udiv	ip, r1, lr
 804033a:	0c23      	lsrs	r3, r4, #16
 804033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8040340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8040344:	fb08 f10c 	mul.w	r1, r8, ip
 8040348:	4299      	cmp	r1, r3
 804034a:	d907      	bls.n	804035c <__udivmoddi4+0x124>
 804034c:	18eb      	adds	r3, r5, r3
 804034e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8040352:	d202      	bcs.n	804035a <__udivmoddi4+0x122>
 8040354:	4299      	cmp	r1, r3
 8040356:	f200 80cd 	bhi.w	80404f4 <__udivmoddi4+0x2bc>
 804035a:	4684      	mov	ip, r0
 804035c:	1a59      	subs	r1, r3, r1
 804035e:	b2a3      	uxth	r3, r4
 8040360:	fbb1 f0fe 	udiv	r0, r1, lr
 8040364:	fb0e 1410 	mls	r4, lr, r0, r1
 8040368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 804036c:	fb08 f800 	mul.w	r8, r8, r0
 8040370:	45a0      	cmp	r8, r4
 8040372:	d907      	bls.n	8040384 <__udivmoddi4+0x14c>
 8040374:	192c      	adds	r4, r5, r4
 8040376:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 804037a:	d202      	bcs.n	8040382 <__udivmoddi4+0x14a>
 804037c:	45a0      	cmp	r8, r4
 804037e:	f200 80b6 	bhi.w	80404ee <__udivmoddi4+0x2b6>
 8040382:	4618      	mov	r0, r3
 8040384:	eba4 0408 	sub.w	r4, r4, r8
 8040388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 804038c:	e79f      	b.n	80402ce <__udivmoddi4+0x96>
 804038e:	f1c7 0c20 	rsb	ip, r7, #32
 8040392:	40bb      	lsls	r3, r7
 8040394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8040398:	ea4e 0e03 	orr.w	lr, lr, r3
 804039c:	fa01 f407 	lsl.w	r4, r1, r7
 80403a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80403a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80403a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80403ac:	4325      	orrs	r5, r4
 80403ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80403b2:	0c2c      	lsrs	r4, r5, #16
 80403b4:	fb08 3319 	mls	r3, r8, r9, r3
 80403b8:	fa1f fa8e 	uxth.w	sl, lr
 80403bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80403c0:	fb09 f40a 	mul.w	r4, r9, sl
 80403c4:	429c      	cmp	r4, r3
 80403c6:	fa02 f207 	lsl.w	r2, r2, r7
 80403ca:	fa00 f107 	lsl.w	r1, r0, r7
 80403ce:	d90b      	bls.n	80403e8 <__udivmoddi4+0x1b0>
 80403d0:	eb1e 0303 	adds.w	r3, lr, r3
 80403d4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80403d8:	f080 8087 	bcs.w	80404ea <__udivmoddi4+0x2b2>
 80403dc:	429c      	cmp	r4, r3
 80403de:	f240 8084 	bls.w	80404ea <__udivmoddi4+0x2b2>
 80403e2:	f1a9 0902 	sub.w	r9, r9, #2
 80403e6:	4473      	add	r3, lr
 80403e8:	1b1b      	subs	r3, r3, r4
 80403ea:	b2ad      	uxth	r5, r5
 80403ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80403f0:	fb08 3310 	mls	r3, r8, r0, r3
 80403f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80403f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80403fc:	45a2      	cmp	sl, r4
 80403fe:	d908      	bls.n	8040412 <__udivmoddi4+0x1da>
 8040400:	eb1e 0404 	adds.w	r4, lr, r4
 8040404:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8040408:	d26b      	bcs.n	80404e2 <__udivmoddi4+0x2aa>
 804040a:	45a2      	cmp	sl, r4
 804040c:	d969      	bls.n	80404e2 <__udivmoddi4+0x2aa>
 804040e:	3802      	subs	r0, #2
 8040410:	4474      	add	r4, lr
 8040412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8040416:	fba0 8902 	umull	r8, r9, r0, r2
 804041a:	eba4 040a 	sub.w	r4, r4, sl
 804041e:	454c      	cmp	r4, r9
 8040420:	46c2      	mov	sl, r8
 8040422:	464b      	mov	r3, r9
 8040424:	d354      	bcc.n	80404d0 <__udivmoddi4+0x298>
 8040426:	d051      	beq.n	80404cc <__udivmoddi4+0x294>
 8040428:	2e00      	cmp	r6, #0
 804042a:	d069      	beq.n	8040500 <__udivmoddi4+0x2c8>
 804042c:	ebb1 050a 	subs.w	r5, r1, sl
 8040430:	eb64 0403 	sbc.w	r4, r4, r3
 8040434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8040438:	40fd      	lsrs	r5, r7
 804043a:	40fc      	lsrs	r4, r7
 804043c:	ea4c 0505 	orr.w	r5, ip, r5
 8040440:	e9c6 5400 	strd	r5, r4, [r6]
 8040444:	2700      	movs	r7, #0
 8040446:	e747      	b.n	80402d8 <__udivmoddi4+0xa0>
 8040448:	f1c2 0320 	rsb	r3, r2, #32
 804044c:	fa20 f703 	lsr.w	r7, r0, r3
 8040450:	4095      	lsls	r5, r2
 8040452:	fa01 f002 	lsl.w	r0, r1, r2
 8040456:	fa21 f303 	lsr.w	r3, r1, r3
 804045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 804045e:	4338      	orrs	r0, r7
 8040460:	0c01      	lsrs	r1, r0, #16
 8040462:	fbb3 f7fe 	udiv	r7, r3, lr
 8040466:	fa1f f885 	uxth.w	r8, r5
 804046a:	fb0e 3317 	mls	r3, lr, r7, r3
 804046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8040472:	fb07 f308 	mul.w	r3, r7, r8
 8040476:	428b      	cmp	r3, r1
 8040478:	fa04 f402 	lsl.w	r4, r4, r2
 804047c:	d907      	bls.n	804048e <__udivmoddi4+0x256>
 804047e:	1869      	adds	r1, r5, r1
 8040480:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8040484:	d22f      	bcs.n	80404e6 <__udivmoddi4+0x2ae>
 8040486:	428b      	cmp	r3, r1
 8040488:	d92d      	bls.n	80404e6 <__udivmoddi4+0x2ae>
 804048a:	3f02      	subs	r7, #2
 804048c:	4429      	add	r1, r5
 804048e:	1acb      	subs	r3, r1, r3
 8040490:	b281      	uxth	r1, r0
 8040492:	fbb3 f0fe 	udiv	r0, r3, lr
 8040496:	fb0e 3310 	mls	r3, lr, r0, r3
 804049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 804049e:	fb00 f308 	mul.w	r3, r0, r8
 80404a2:	428b      	cmp	r3, r1
 80404a4:	d907      	bls.n	80404b6 <__udivmoddi4+0x27e>
 80404a6:	1869      	adds	r1, r5, r1
 80404a8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80404ac:	d217      	bcs.n	80404de <__udivmoddi4+0x2a6>
 80404ae:	428b      	cmp	r3, r1
 80404b0:	d915      	bls.n	80404de <__udivmoddi4+0x2a6>
 80404b2:	3802      	subs	r0, #2
 80404b4:	4429      	add	r1, r5
 80404b6:	1ac9      	subs	r1, r1, r3
 80404b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80404bc:	e73b      	b.n	8040336 <__udivmoddi4+0xfe>
 80404be:	4637      	mov	r7, r6
 80404c0:	4630      	mov	r0, r6
 80404c2:	e709      	b.n	80402d8 <__udivmoddi4+0xa0>
 80404c4:	4607      	mov	r7, r0
 80404c6:	e6e7      	b.n	8040298 <__udivmoddi4+0x60>
 80404c8:	4618      	mov	r0, r3
 80404ca:	e6fb      	b.n	80402c4 <__udivmoddi4+0x8c>
 80404cc:	4541      	cmp	r1, r8
 80404ce:	d2ab      	bcs.n	8040428 <__udivmoddi4+0x1f0>
 80404d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80404d4:	eb69 020e 	sbc.w	r2, r9, lr
 80404d8:	3801      	subs	r0, #1
 80404da:	4613      	mov	r3, r2
 80404dc:	e7a4      	b.n	8040428 <__udivmoddi4+0x1f0>
 80404de:	4660      	mov	r0, ip
 80404e0:	e7e9      	b.n	80404b6 <__udivmoddi4+0x27e>
 80404e2:	4618      	mov	r0, r3
 80404e4:	e795      	b.n	8040412 <__udivmoddi4+0x1da>
 80404e6:	4667      	mov	r7, ip
 80404e8:	e7d1      	b.n	804048e <__udivmoddi4+0x256>
 80404ea:	4681      	mov	r9, r0
 80404ec:	e77c      	b.n	80403e8 <__udivmoddi4+0x1b0>
 80404ee:	3802      	subs	r0, #2
 80404f0:	442c      	add	r4, r5
 80404f2:	e747      	b.n	8040384 <__udivmoddi4+0x14c>
 80404f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80404f8:	442b      	add	r3, r5
 80404fa:	e72f      	b.n	804035c <__udivmoddi4+0x124>
 80404fc:	4638      	mov	r0, r7
 80404fe:	e708      	b.n	8040312 <__udivmoddi4+0xda>
 8040500:	4637      	mov	r7, r6
 8040502:	e6e9      	b.n	80402d8 <__udivmoddi4+0xa0>

08040504 <__aeabi_idiv0>:
 8040504:	4770      	bx	lr
 8040506:	bf00      	nop

08040508 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8040508:	b480      	push	{r7}
 804050a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 804050c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8040510:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8040514:	4b0b      	ldr	r3, [pc, #44]	; (8040544 <SCB_EnableICache+0x3c>)
 8040516:	2200      	movs	r2, #0
 8040518:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 804051c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8040520:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8040524:	4b07      	ldr	r3, [pc, #28]	; (8040544 <SCB_EnableICache+0x3c>)
 8040526:	695b      	ldr	r3, [r3, #20]
 8040528:	4a06      	ldr	r2, [pc, #24]	; (8040544 <SCB_EnableICache+0x3c>)
 804052a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 804052e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8040530:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8040534:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8040538:	bf00      	nop
 804053a:	46bd      	mov	sp, r7
 804053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040540:	4770      	bx	lr
 8040542:	bf00      	nop
 8040544:	e000ed00 	.word	0xe000ed00

08040548 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8040548:	b480      	push	{r7}
 804054a:	b085      	sub	sp, #20
 804054c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 804054e:	4b1d      	ldr	r3, [pc, #116]	; (80405c4 <SCB_EnableDCache+0x7c>)
 8040550:	2200      	movs	r2, #0
 8040552:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8040556:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 804055a:	4b1a      	ldr	r3, [pc, #104]	; (80405c4 <SCB_EnableDCache+0x7c>)
 804055c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8040560:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8040562:	687b      	ldr	r3, [r7, #4]
 8040564:	0b5b      	lsrs	r3, r3, #13
 8040566:	f3c3 030e 	ubfx	r3, r3, #0, #15
 804056a:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 804056c:	687b      	ldr	r3, [r7, #4]
 804056e:	08db      	lsrs	r3, r3, #3
 8040570:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8040574:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8040576:	68fb      	ldr	r3, [r7, #12]
 8040578:	015a      	lsls	r2, r3, #5
 804057a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 804057e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8040580:	68ba      	ldr	r2, [r7, #8]
 8040582:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8040584:	490f      	ldr	r1, [pc, #60]	; (80405c4 <SCB_EnableDCache+0x7c>)
 8040586:	4313      	orrs	r3, r2
 8040588:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 804058c:	68bb      	ldr	r3, [r7, #8]
 804058e:	1e5a      	subs	r2, r3, #1
 8040590:	60ba      	str	r2, [r7, #8]
 8040592:	2b00      	cmp	r3, #0
 8040594:	d1ef      	bne.n	8040576 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8040596:	68fb      	ldr	r3, [r7, #12]
 8040598:	1e5a      	subs	r2, r3, #1
 804059a:	60fa      	str	r2, [r7, #12]
 804059c:	2b00      	cmp	r3, #0
 804059e:	d1e5      	bne.n	804056c <SCB_EnableDCache+0x24>
 80405a0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80405a4:	4b07      	ldr	r3, [pc, #28]	; (80405c4 <SCB_EnableDCache+0x7c>)
 80405a6:	695b      	ldr	r3, [r3, #20]
 80405a8:	4a06      	ldr	r2, [pc, #24]	; (80405c4 <SCB_EnableDCache+0x7c>)
 80405aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80405ae:	6153      	str	r3, [r2, #20]
 80405b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80405b4:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 80405b8:	bf00      	nop
 80405ba:	3714      	adds	r7, #20
 80405bc:	46bd      	mov	sp, r7
 80405be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80405c2:	4770      	bx	lr
 80405c4:	e000ed00 	.word	0xe000ed00

080405c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80405c8:	b580      	push	{r7, lr}
 80405ca:	b082      	sub	sp, #8
 80405cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	/* Enable the CPU Cache */
	/* Enable I-Cache */
	SCB_EnableICache();
 80405ce:	f7ff ff9b 	bl	8040508 <SCB_EnableICache>
	/* Enable D-Cache */
	SCB_EnableDCache();
 80405d2:	f7ff ffb9 	bl	8040548 <SCB_EnableDCache>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80405d6:	f000 fa90 	bl	8040afa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80405da:	f000 f8ad 	bl	8040738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80405de:	f000 f96b 	bl	80408b8 <MX_GPIO_Init>
  MX_CRC_Init();
 80405e2:	f000 f915 	bl	8040810 <MX_CRC_Init>
  MX_DMA2D_Init();
 80405e6:	f000 f935 	bl	8040854 <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */
  BSP_SDRAM_Init(); /* Initializes the SDRAM device */
 80405ea:	f004 ff5b 	bl	80454a4 <BSP_SDRAM_Init>
    __HAL_RCC_CRC_CLK_ENABLE(); /* Enable the CRC Module */
 80405ee:	4b49      	ldr	r3, [pc, #292]	; (8040714 <main+0x14c>)
 80405f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80405f2:	4a48      	ldr	r2, [pc, #288]	; (8040714 <main+0x14c>)
 80405f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80405f8:	6313      	str	r3, [r2, #48]	; 0x30
 80405fa:	4b46      	ldr	r3, [pc, #280]	; (8040714 <main+0x14c>)
 80405fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80405fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8040602:	607b      	str	r3, [r7, #4]
 8040604:	687b      	ldr	r3, [r7, #4]

    BSP_TS_Init(480, 272);
 8040606:	f44f 7188 	mov.w	r1, #272	; 0x110
 804060a:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 804060e:	f005 f8ff 	bl	8045810 <BSP_TS_Init>

    BSP_LCD_Init();
 8040612:	f004 f971 	bl	80448f8 <BSP_LCD_Init>
    BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8040616:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 804061a:	2000      	movs	r0, #0
 804061c:	f004 fa04 	bl	8044a28 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_DisplayOn();
 8040620:	f004 fd28 	bl	8045074 <BSP_LCD_DisplayOn>

    BSP_LCD_SelectLayer(0);
 8040624:	2000      	movs	r0, #0
 8040626:	f004 fa5f 	bl	8044ae8 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(LCD_COLOR_LIGHTCYAN);
 804062a:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 804062e:	f004 fab7 	bl	8044ba0 <BSP_LCD_Clear>
    BSP_LCD_SetBackColor(LCD_COLOR_LIGHTCYAN);
 8040632:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8040636:	f004 fa7f 	bl	8044b38 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 804063a:	4837      	ldr	r0, [pc, #220]	; (8040718 <main+0x150>)
 804063c:	f004 fa64 	bl	8044b08 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24);
 8040640:	4836      	ldr	r0, [pc, #216]	; (804071c <main+0x154>)
 8040642:	f004 fa93 	bl	8044b6c <BSP_LCD_SetFont>
    BSP_LCD_DrawRect(50,25,380,50);
 8040646:	2332      	movs	r3, #50	; 0x32
 8040648:	f44f 72be 	mov.w	r2, #380	; 0x17c
 804064c:	2119      	movs	r1, #25
 804064e:	2032      	movs	r0, #50	; 0x32
 8040650:	f004 fc96 	bl	8044f80 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(100,40,(uint8_t *)"MPMC Mini Project",LEFT_MODE);
 8040654:	2303      	movs	r3, #3
 8040656:	4a32      	ldr	r2, [pc, #200]	; (8040720 <main+0x158>)
 8040658:	2128      	movs	r1, #40	; 0x28
 804065a:	2064      	movs	r0, #100	; 0x64
 804065c:	f004 fb0c 	bl	8044c78 <BSP_LCD_DisplayStringAt>



    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8040660:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8040664:	f004 fa50 	bl	8044b08 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(100,150,(uint8_t *)"Booting Successful",LEFT_MODE);
 8040668:	2303      	movs	r3, #3
 804066a:	4a2e      	ldr	r2, [pc, #184]	; (8040724 <main+0x15c>)
 804066c:	2196      	movs	r1, #150	; 0x96
 804066e:	2064      	movs	r0, #100	; 0x64
 8040670:	f004 fb02 	bl	8044c78 <BSP_LCD_DisplayStringAt>
  /* USER CODE END 2 */
    HAL_Delay(5000);
 8040674:	f241 3088 	movw	r0, #5000	; 0x1388
 8040678:	f000 fa9c 	bl	8040bb4 <HAL_Delay>
    BSP_LCD_Clear(LCD_COLOR_LIGHTCYAN);
 804067c:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8040680:	f004 fa8e 	bl	8044ba0 <BSP_LCD_Clear>
    BSP_LCD_SetBackColor(LCD_COLOR_LIGHTCYAN);
 8040684:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8040688:	f004 fa56 	bl	8044b38 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 804068c:	4822      	ldr	r0, [pc, #136]	; (8040718 <main+0x150>)
 804068e:	f004 fa3b 	bl	8044b08 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 8040692:	4822      	ldr	r0, [pc, #136]	; (804071c <main+0x154>)
 8040694:	f004 fa6a 	bl	8044b6c <BSP_LCD_SetFont>
	BSP_LCD_DrawRect(50,25,380,50);
 8040698:	2332      	movs	r3, #50	; 0x32
 804069a:	f44f 72be 	mov.w	r2, #380	; 0x17c
 804069e:	2119      	movs	r1, #25
 80406a0:	2032      	movs	r0, #50	; 0x32
 80406a2:	f004 fc6d 	bl	8044f80 <BSP_LCD_DrawRect>
	BSP_LCD_DisplayStringAt(130,40,(uint8_t *)"Team Members",LEFT_MODE);
 80406a6:	2303      	movs	r3, #3
 80406a8:	4a1f      	ldr	r2, [pc, #124]	; (8040728 <main+0x160>)
 80406aa:	2128      	movs	r1, #40	; 0x28
 80406ac:	2082      	movs	r0, #130	; 0x82
 80406ae:	f004 fae3 	bl	8044c78 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80406b2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80406b6:	f004 fa27 	bl	8044b08 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(50,95,(uint8_t *)"A. Advaith / EVD18I002",LEFT_MODE);
 80406ba:	2303      	movs	r3, #3
 80406bc:	4a1b      	ldr	r2, [pc, #108]	; (804072c <main+0x164>)
 80406be:	215f      	movs	r1, #95	; 0x5f
 80406c0:	2032      	movs	r0, #50	; 0x32
 80406c2:	f004 fad9 	bl	8044c78 <BSP_LCD_DisplayStringAt>

	BSP_LCD_DisplayStringAt(50,120,(uint8_t *)"A. Girish / EVD18I003",LEFT_MODE);
 80406c6:	2303      	movs	r3, #3
 80406c8:	4a19      	ldr	r2, [pc, #100]	; (8040730 <main+0x168>)
 80406ca:	2178      	movs	r1, #120	; 0x78
 80406cc:	2032      	movs	r0, #50	; 0x32
 80406ce:	f004 fad3 	bl	8044c78 <BSP_LCD_DisplayStringAt>

    HAL_Delay(5000);
 80406d2:	f241 3088 	movw	r0, #5000	; 0x1388
 80406d6:	f000 fa6d 	bl	8040bb4 <HAL_Delay>
    BSP_LCD_Clear(LCD_COLOR_LIGHTCYAN);
 80406da:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 80406de:	f004 fa5f 	bl	8044ba0 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_LIGHTCYAN);
 80406e2:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 80406e6:	f004 fa27 	bl	8044b38 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80406ea:	480b      	ldr	r0, [pc, #44]	; (8040718 <main+0x150>)
 80406ec:	f004 fa0c 	bl	8044b08 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 80406f0:	480a      	ldr	r0, [pc, #40]	; (804071c <main+0x154>)
 80406f2:	f004 fa3b 	bl	8044b6c <BSP_LCD_SetFont>
	BSP_LCD_DrawRect(50,125,380,50);
 80406f6:	2332      	movs	r3, #50	; 0x32
 80406f8:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80406fc:	217d      	movs	r1, #125	; 0x7d
 80406fe:	2032      	movs	r0, #50	; 0x32
 8040700:	f004 fc3e 	bl	8044f80 <BSP_LCD_DrawRect>
	BSP_LCD_DisplayStringAt(150,140,(uint8_t *)"Thank you",LEFT_MODE);
 8040704:	2303      	movs	r3, #3
 8040706:	4a0b      	ldr	r2, [pc, #44]	; (8040734 <main+0x16c>)
 8040708:	218c      	movs	r1, #140	; 0x8c
 804070a:	2096      	movs	r0, #150	; 0x96
 804070c:	f004 fab4 	bl	8044c78 <BSP_LCD_DisplayStringAt>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8040710:	e7fe      	b.n	8040710 <main+0x148>
 8040712:	bf00      	nop
 8040714:	40023800 	.word	0x40023800
 8040718:	ffff0000 	.word	0xffff0000
 804071c:	2000000c 	.word	0x2000000c
 8040720:	08045900 	.word	0x08045900
 8040724:	08045914 	.word	0x08045914
 8040728:	08045928 	.word	0x08045928
 804072c:	08045938 	.word	0x08045938
 8040730:	08045950 	.word	0x08045950
 8040734:	08045968 	.word	0x08045968

08040738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8040738:	b580      	push	{r7, lr}
 804073a:	b094      	sub	sp, #80	; 0x50
 804073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 804073e:	f107 0320 	add.w	r3, r7, #32
 8040742:	2230      	movs	r2, #48	; 0x30
 8040744:	2100      	movs	r1, #0
 8040746:	4618      	mov	r0, r3
 8040748:	f005 f8c6 	bl	80458d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 804074c:	f107 030c 	add.w	r3, r7, #12
 8040750:	2200      	movs	r2, #0
 8040752:	601a      	str	r2, [r3, #0]
 8040754:	605a      	str	r2, [r3, #4]
 8040756:	609a      	str	r2, [r3, #8]
 8040758:	60da      	str	r2, [r3, #12]
 804075a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 804075c:	4b2a      	ldr	r3, [pc, #168]	; (8040808 <SystemClock_Config+0xd0>)
 804075e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040760:	4a29      	ldr	r2, [pc, #164]	; (8040808 <SystemClock_Config+0xd0>)
 8040762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8040766:	6413      	str	r3, [r2, #64]	; 0x40
 8040768:	4b27      	ldr	r3, [pc, #156]	; (8040808 <SystemClock_Config+0xd0>)
 804076a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804076c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8040770:	60bb      	str	r3, [r7, #8]
 8040772:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8040774:	4b25      	ldr	r3, [pc, #148]	; (804080c <SystemClock_Config+0xd4>)
 8040776:	681b      	ldr	r3, [r3, #0]
 8040778:	4a24      	ldr	r2, [pc, #144]	; (804080c <SystemClock_Config+0xd4>)
 804077a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 804077e:	6013      	str	r3, [r2, #0]
 8040780:	4b22      	ldr	r3, [pc, #136]	; (804080c <SystemClock_Config+0xd4>)
 8040782:	681b      	ldr	r3, [r3, #0]
 8040784:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8040788:	607b      	str	r3, [r7, #4]
 804078a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 804078c:	2301      	movs	r3, #1
 804078e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8040790:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8040794:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8040796:	2302      	movs	r3, #2
 8040798:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 804079a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 804079e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80407a0:	230c      	movs	r3, #12
 80407a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80407a4:	23c0      	movs	r3, #192	; 0xc0
 80407a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80407a8:	2302      	movs	r3, #2
 80407aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80407ac:	2302      	movs	r3, #2
 80407ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80407b0:	f107 0320 	add.w	r3, r7, #32
 80407b4:	4618      	mov	r0, r3
 80407b6:	f002 fb3f 	bl	8042e38 <HAL_RCC_OscConfig>
 80407ba:	4603      	mov	r3, r0
 80407bc:	2b00      	cmp	r3, #0
 80407be:	d001      	beq.n	80407c4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80407c0:	f000 f8b8 	bl	8040934 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80407c4:	f002 fae8 	bl	8042d98 <HAL_PWREx_EnableOverDrive>
 80407c8:	4603      	mov	r3, r0
 80407ca:	2b00      	cmp	r3, #0
 80407cc:	d001      	beq.n	80407d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80407ce:	f000 f8b1 	bl	8040934 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80407d2:	230f      	movs	r3, #15
 80407d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80407d6:	2302      	movs	r3, #2
 80407d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80407da:	2300      	movs	r3, #0
 80407dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80407de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80407e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80407e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80407e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80407ea:	f107 030c 	add.w	r3, r7, #12
 80407ee:	2106      	movs	r1, #6
 80407f0:	4618      	mov	r0, r3
 80407f2:	f002 fdc5 	bl	8043380 <HAL_RCC_ClockConfig>
 80407f6:	4603      	mov	r3, r0
 80407f8:	2b00      	cmp	r3, #0
 80407fa:	d001      	beq.n	8040800 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80407fc:	f000 f89a 	bl	8040934 <Error_Handler>
  }
}
 8040800:	bf00      	nop
 8040802:	3750      	adds	r7, #80	; 0x50
 8040804:	46bd      	mov	sp, r7
 8040806:	bd80      	pop	{r7, pc}
 8040808:	40023800 	.word	0x40023800
 804080c:	40007000 	.word	0x40007000

08040810 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8040810:	b580      	push	{r7, lr}
 8040812:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8040814:	4b0d      	ldr	r3, [pc, #52]	; (804084c <MX_CRC_Init+0x3c>)
 8040816:	4a0e      	ldr	r2, [pc, #56]	; (8040850 <MX_CRC_Init+0x40>)
 8040818:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 804081a:	4b0c      	ldr	r3, [pc, #48]	; (804084c <MX_CRC_Init+0x3c>)
 804081c:	2200      	movs	r2, #0
 804081e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8040820:	4b0a      	ldr	r3, [pc, #40]	; (804084c <MX_CRC_Init+0x3c>)
 8040822:	2200      	movs	r2, #0
 8040824:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8040826:	4b09      	ldr	r3, [pc, #36]	; (804084c <MX_CRC_Init+0x3c>)
 8040828:	2200      	movs	r2, #0
 804082a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 804082c:	4b07      	ldr	r3, [pc, #28]	; (804084c <MX_CRC_Init+0x3c>)
 804082e:	2200      	movs	r2, #0
 8040830:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8040832:	4b06      	ldr	r3, [pc, #24]	; (804084c <MX_CRC_Init+0x3c>)
 8040834:	2201      	movs	r2, #1
 8040836:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8040838:	4804      	ldr	r0, [pc, #16]	; (804084c <MX_CRC_Init+0x3c>)
 804083a:	f000 faef 	bl	8040e1c <HAL_CRC_Init>
 804083e:	4603      	mov	r3, r0
 8040840:	2b00      	cmp	r3, #0
 8040842:	d001      	beq.n	8040848 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8040844:	f000 f876 	bl	8040934 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8040848:	bf00      	nop
 804084a:	bd80      	pop	{r7, pc}
 804084c:	20000228 	.word	0x20000228
 8040850:	40023000 	.word	0x40023000

08040854 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8040854:	b580      	push	{r7, lr}
 8040856:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8040858:	4b15      	ldr	r3, [pc, #84]	; (80408b0 <MX_DMA2D_Init+0x5c>)
 804085a:	4a16      	ldr	r2, [pc, #88]	; (80408b4 <MX_DMA2D_Init+0x60>)
 804085c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 804085e:	4b14      	ldr	r3, [pc, #80]	; (80408b0 <MX_DMA2D_Init+0x5c>)
 8040860:	2200      	movs	r2, #0
 8040862:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8040864:	4b12      	ldr	r3, [pc, #72]	; (80408b0 <MX_DMA2D_Init+0x5c>)
 8040866:	2200      	movs	r2, #0
 8040868:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 804086a:	4b11      	ldr	r3, [pc, #68]	; (80408b0 <MX_DMA2D_Init+0x5c>)
 804086c:	2200      	movs	r2, #0
 804086e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8040870:	4b0f      	ldr	r3, [pc, #60]	; (80408b0 <MX_DMA2D_Init+0x5c>)
 8040872:	2200      	movs	r2, #0
 8040874:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8040876:	4b0e      	ldr	r3, [pc, #56]	; (80408b0 <MX_DMA2D_Init+0x5c>)
 8040878:	2200      	movs	r2, #0
 804087a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 804087c:	4b0c      	ldr	r3, [pc, #48]	; (80408b0 <MX_DMA2D_Init+0x5c>)
 804087e:	2200      	movs	r2, #0
 8040880:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8040882:	4b0b      	ldr	r3, [pc, #44]	; (80408b0 <MX_DMA2D_Init+0x5c>)
 8040884:	2200      	movs	r2, #0
 8040886:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8040888:	4809      	ldr	r0, [pc, #36]	; (80408b0 <MX_DMA2D_Init+0x5c>)
 804088a:	f000 fd6d 	bl	8041368 <HAL_DMA2D_Init>
 804088e:	4603      	mov	r3, r0
 8040890:	2b00      	cmp	r3, #0
 8040892:	d001      	beq.n	8040898 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8040894:	f000 f84e 	bl	8040934 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8040898:	2101      	movs	r1, #1
 804089a:	4805      	ldr	r0, [pc, #20]	; (80408b0 <MX_DMA2D_Init+0x5c>)
 804089c:	f000 fec2 	bl	8041624 <HAL_DMA2D_ConfigLayer>
 80408a0:	4603      	mov	r3, r0
 80408a2:	2b00      	cmp	r3, #0
 80408a4:	d001      	beq.n	80408aa <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80408a6:	f000 f845 	bl	8040934 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80408aa:	bf00      	nop
 80408ac:	bd80      	pop	{r7, pc}
 80408ae:	bf00      	nop
 80408b0:	2000024c 	.word	0x2000024c
 80408b4:	4002b000 	.word	0x4002b000

080408b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80408b8:	b580      	push	{r7, lr}
 80408ba:	b088      	sub	sp, #32
 80408bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80408be:	f107 030c 	add.w	r3, r7, #12
 80408c2:	2200      	movs	r2, #0
 80408c4:	601a      	str	r2, [r3, #0]
 80408c6:	605a      	str	r2, [r3, #4]
 80408c8:	609a      	str	r2, [r3, #8]
 80408ca:	60da      	str	r2, [r3, #12]
 80408cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80408ce:	4b17      	ldr	r3, [pc, #92]	; (804092c <MX_GPIO_Init+0x74>)
 80408d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80408d2:	4a16      	ldr	r2, [pc, #88]	; (804092c <MX_GPIO_Init+0x74>)
 80408d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80408d8:	6313      	str	r3, [r2, #48]	; 0x30
 80408da:	4b14      	ldr	r3, [pc, #80]	; (804092c <MX_GPIO_Init+0x74>)
 80408dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80408de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80408e2:	60bb      	str	r3, [r7, #8]
 80408e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80408e6:	4b11      	ldr	r3, [pc, #68]	; (804092c <MX_GPIO_Init+0x74>)
 80408e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80408ea:	4a10      	ldr	r2, [pc, #64]	; (804092c <MX_GPIO_Init+0x74>)
 80408ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80408f0:	6313      	str	r3, [r2, #48]	; 0x30
 80408f2:	4b0e      	ldr	r3, [pc, #56]	; (804092c <MX_GPIO_Init+0x74>)
 80408f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80408f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80408fa:	607b      	str	r3, [r7, #4]
 80408fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80408fe:	2200      	movs	r2, #0
 8040900:	2101      	movs	r1, #1
 8040902:	480b      	ldr	r0, [pc, #44]	; (8040930 <MX_GPIO_Init+0x78>)
 8040904:	f001 f966 	bl	8041bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8040908:	2301      	movs	r3, #1
 804090a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 804090c:	2301      	movs	r3, #1
 804090e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040910:	2300      	movs	r3, #0
 8040912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040914:	2300      	movs	r3, #0
 8040916:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8040918:	f107 030c 	add.w	r3, r7, #12
 804091c:	4619      	mov	r1, r3
 804091e:	4804      	ldr	r0, [pc, #16]	; (8040930 <MX_GPIO_Init+0x78>)
 8040920:	f000 ffae 	bl	8041880 <HAL_GPIO_Init>

}
 8040924:	bf00      	nop
 8040926:	3720      	adds	r7, #32
 8040928:	46bd      	mov	sp, r7
 804092a:	bd80      	pop	{r7, pc}
 804092c:	40023800 	.word	0x40023800
 8040930:	40022000 	.word	0x40022000

08040934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8040934:	b480      	push	{r7}
 8040936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8040938:	bf00      	nop
 804093a:	46bd      	mov	sp, r7
 804093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040940:	4770      	bx	lr
	...

08040944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8040944:	b480      	push	{r7}
 8040946:	b083      	sub	sp, #12
 8040948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 804094a:	4b0f      	ldr	r3, [pc, #60]	; (8040988 <HAL_MspInit+0x44>)
 804094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804094e:	4a0e      	ldr	r2, [pc, #56]	; (8040988 <HAL_MspInit+0x44>)
 8040950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8040954:	6413      	str	r3, [r2, #64]	; 0x40
 8040956:	4b0c      	ldr	r3, [pc, #48]	; (8040988 <HAL_MspInit+0x44>)
 8040958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804095a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804095e:	607b      	str	r3, [r7, #4]
 8040960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040962:	4b09      	ldr	r3, [pc, #36]	; (8040988 <HAL_MspInit+0x44>)
 8040964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040966:	4a08      	ldr	r2, [pc, #32]	; (8040988 <HAL_MspInit+0x44>)
 8040968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 804096c:	6453      	str	r3, [r2, #68]	; 0x44
 804096e:	4b06      	ldr	r3, [pc, #24]	; (8040988 <HAL_MspInit+0x44>)
 8040970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8040976:	603b      	str	r3, [r7, #0]
 8040978:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 804097a:	bf00      	nop
 804097c:	370c      	adds	r7, #12
 804097e:	46bd      	mov	sp, r7
 8040980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040984:	4770      	bx	lr
 8040986:	bf00      	nop
 8040988:	40023800 	.word	0x40023800

0804098c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 804098c:	b480      	push	{r7}
 804098e:	b085      	sub	sp, #20
 8040990:	af00      	add	r7, sp, #0
 8040992:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8040994:	687b      	ldr	r3, [r7, #4]
 8040996:	681b      	ldr	r3, [r3, #0]
 8040998:	4a0a      	ldr	r2, [pc, #40]	; (80409c4 <HAL_CRC_MspInit+0x38>)
 804099a:	4293      	cmp	r3, r2
 804099c:	d10b      	bne.n	80409b6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 804099e:	4b0a      	ldr	r3, [pc, #40]	; (80409c8 <HAL_CRC_MspInit+0x3c>)
 80409a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80409a2:	4a09      	ldr	r2, [pc, #36]	; (80409c8 <HAL_CRC_MspInit+0x3c>)
 80409a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80409a8:	6313      	str	r3, [r2, #48]	; 0x30
 80409aa:	4b07      	ldr	r3, [pc, #28]	; (80409c8 <HAL_CRC_MspInit+0x3c>)
 80409ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80409ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80409b2:	60fb      	str	r3, [r7, #12]
 80409b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80409b6:	bf00      	nop
 80409b8:	3714      	adds	r7, #20
 80409ba:	46bd      	mov	sp, r7
 80409bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80409c0:	4770      	bx	lr
 80409c2:	bf00      	nop
 80409c4:	40023000 	.word	0x40023000
 80409c8:	40023800 	.word	0x40023800

080409cc <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80409cc:	b480      	push	{r7}
 80409ce:	b085      	sub	sp, #20
 80409d0:	af00      	add	r7, sp, #0
 80409d2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80409d4:	687b      	ldr	r3, [r7, #4]
 80409d6:	681b      	ldr	r3, [r3, #0]
 80409d8:	4a0a      	ldr	r2, [pc, #40]	; (8040a04 <HAL_DMA2D_MspInit+0x38>)
 80409da:	4293      	cmp	r3, r2
 80409dc:	d10b      	bne.n	80409f6 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80409de:	4b0a      	ldr	r3, [pc, #40]	; (8040a08 <HAL_DMA2D_MspInit+0x3c>)
 80409e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80409e2:	4a09      	ldr	r2, [pc, #36]	; (8040a08 <HAL_DMA2D_MspInit+0x3c>)
 80409e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80409e8:	6313      	str	r3, [r2, #48]	; 0x30
 80409ea:	4b07      	ldr	r3, [pc, #28]	; (8040a08 <HAL_DMA2D_MspInit+0x3c>)
 80409ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80409ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80409f2:	60fb      	str	r3, [r7, #12]
 80409f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80409f6:	bf00      	nop
 80409f8:	3714      	adds	r7, #20
 80409fa:	46bd      	mov	sp, r7
 80409fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040a00:	4770      	bx	lr
 8040a02:	bf00      	nop
 8040a04:	4002b000 	.word	0x4002b000
 8040a08:	40023800 	.word	0x40023800

08040a0c <LTDC_IRQHandler>:
void DebugMon_Handler(void);
void PendSV_Handler(void);
void SysTick_Handler(void);
/* USER CODE BEGIN EFP */
void LTDC_IRQHandler(void)
{
 8040a0c:	b580      	push	{r7, lr}
 8040a0e:	af00      	add	r7, sp, #0
  HAL_LTDC_IRQHandler(&hLtdcHandler);
 8040a10:	4802      	ldr	r0, [pc, #8]	; (8040a1c <LTDC_IRQHandler+0x10>)
 8040a12:	f001 ff0b 	bl	804282c <HAL_LTDC_IRQHandler>
}
 8040a16:	bf00      	nop
 8040a18:	bd80      	pop	{r7, pc}
 8040a1a:	bf00      	nop
 8040a1c:	20000290 	.word	0x20000290

08040a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8040a20:	b480      	push	{r7}
 8040a22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8040a24:	bf00      	nop
 8040a26:	46bd      	mov	sp, r7
 8040a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040a2c:	4770      	bx	lr

08040a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8040a2e:	b480      	push	{r7}
 8040a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8040a32:	e7fe      	b.n	8040a32 <HardFault_Handler+0x4>

08040a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8040a34:	b480      	push	{r7}
 8040a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8040a38:	e7fe      	b.n	8040a38 <MemManage_Handler+0x4>

08040a3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8040a3a:	b480      	push	{r7}
 8040a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8040a3e:	e7fe      	b.n	8040a3e <BusFault_Handler+0x4>

08040a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8040a40:	b480      	push	{r7}
 8040a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8040a44:	e7fe      	b.n	8040a44 <UsageFault_Handler+0x4>

08040a46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8040a46:	b480      	push	{r7}
 8040a48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8040a4a:	bf00      	nop
 8040a4c:	46bd      	mov	sp, r7
 8040a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040a52:	4770      	bx	lr

08040a54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8040a54:	b480      	push	{r7}
 8040a56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8040a58:	bf00      	nop
 8040a5a:	46bd      	mov	sp, r7
 8040a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040a60:	4770      	bx	lr

08040a62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8040a62:	b480      	push	{r7}
 8040a64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8040a66:	bf00      	nop
 8040a68:	46bd      	mov	sp, r7
 8040a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040a6e:	4770      	bx	lr

08040a70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8040a70:	b580      	push	{r7, lr}
 8040a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8040a74:	f000 f87e 	bl	8040b74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8040a78:	bf00      	nop
 8040a7a:	bd80      	pop	{r7, pc}

08040a7c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8040a7c:	b480      	push	{r7}
 8040a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8040a80:	4b08      	ldr	r3, [pc, #32]	; (8040aa4 <SystemInit+0x28>)
 8040a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8040a86:	4a07      	ldr	r2, [pc, #28]	; (8040aa4 <SystemInit+0x28>)
 8040a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8040a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8040a90:	4b04      	ldr	r3, [pc, #16]	; (8040aa4 <SystemInit+0x28>)
 8040a92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8040a96:	609a      	str	r2, [r3, #8]
#endif
}
 8040a98:	bf00      	nop
 8040a9a:	46bd      	mov	sp, r7
 8040a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040aa0:	4770      	bx	lr
 8040aa2:	bf00      	nop
 8040aa4:	e000ed00 	.word	0xe000ed00

08040aa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8040aa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8040ae0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8040aac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8040aae:	e003      	b.n	8040ab8 <LoopCopyDataInit>

08040ab0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8040ab0:	4b0c      	ldr	r3, [pc, #48]	; (8040ae4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8040ab2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8040ab4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8040ab6:	3104      	adds	r1, #4

08040ab8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8040ab8:	480b      	ldr	r0, [pc, #44]	; (8040ae8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8040aba:	4b0c      	ldr	r3, [pc, #48]	; (8040aec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8040abc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8040abe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8040ac0:	d3f6      	bcc.n	8040ab0 <CopyDataInit>
  ldr  r2, =_sbss
 8040ac2:	4a0b      	ldr	r2, [pc, #44]	; (8040af0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8040ac4:	e002      	b.n	8040acc <LoopFillZerobss>

08040ac6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8040ac6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8040ac8:	f842 3b04 	str.w	r3, [r2], #4

08040acc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8040acc:	4b09      	ldr	r3, [pc, #36]	; (8040af4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8040ace:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8040ad0:	d3f9      	bcc.n	8040ac6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8040ad2:	f7ff ffd3 	bl	8040a7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8040ad6:	f004 fedb 	bl	8045890 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8040ada:	f7ff fd75 	bl	80405c8 <main>
  bx  lr    
 8040ade:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8040ae0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8040ae4:	08047454 	.word	0x08047454
  ldr  r0, =_sdata
 8040ae8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8040aec:	20000040 	.word	0x20000040
  ldr  r2, =_sbss
 8040af0:	20000040 	.word	0x20000040
  ldr  r3, = _ebss
 8040af4:	2000036c 	.word	0x2000036c

08040af8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8040af8:	e7fe      	b.n	8040af8 <ADC_IRQHandler>

08040afa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8040afa:	b580      	push	{r7, lr}
 8040afc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8040afe:	2003      	movs	r0, #3
 8040b00:	f000 f94a 	bl	8040d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8040b04:	2000      	movs	r0, #0
 8040b06:	f000 f805 	bl	8040b14 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8040b0a:	f7ff ff1b 	bl	8040944 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8040b0e:	2300      	movs	r3, #0
}
 8040b10:	4618      	mov	r0, r3
 8040b12:	bd80      	pop	{r7, pc}

08040b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8040b14:	b580      	push	{r7, lr}
 8040b16:	b082      	sub	sp, #8
 8040b18:	af00      	add	r7, sp, #0
 8040b1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8040b1c:	4b12      	ldr	r3, [pc, #72]	; (8040b68 <HAL_InitTick+0x54>)
 8040b1e:	681a      	ldr	r2, [r3, #0]
 8040b20:	4b12      	ldr	r3, [pc, #72]	; (8040b6c <HAL_InitTick+0x58>)
 8040b22:	781b      	ldrb	r3, [r3, #0]
 8040b24:	4619      	mov	r1, r3
 8040b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8040b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8040b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8040b32:	4618      	mov	r0, r3
 8040b34:	f000 f965 	bl	8040e02 <HAL_SYSTICK_Config>
 8040b38:	4603      	mov	r3, r0
 8040b3a:	2b00      	cmp	r3, #0
 8040b3c:	d001      	beq.n	8040b42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8040b3e:	2301      	movs	r3, #1
 8040b40:	e00e      	b.n	8040b60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8040b42:	687b      	ldr	r3, [r7, #4]
 8040b44:	2b0f      	cmp	r3, #15
 8040b46:	d80a      	bhi.n	8040b5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8040b48:	2200      	movs	r2, #0
 8040b4a:	6879      	ldr	r1, [r7, #4]
 8040b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8040b50:	f000 f92d 	bl	8040dae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8040b54:	4a06      	ldr	r2, [pc, #24]	; (8040b70 <HAL_InitTick+0x5c>)
 8040b56:	687b      	ldr	r3, [r7, #4]
 8040b58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8040b5a:	2300      	movs	r3, #0
 8040b5c:	e000      	b.n	8040b60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8040b5e:	2301      	movs	r3, #1
}
 8040b60:	4618      	mov	r0, r3
 8040b62:	3708      	adds	r7, #8
 8040b64:	46bd      	mov	sp, r7
 8040b66:	bd80      	pop	{r7, pc}
 8040b68:	20000000 	.word	0x20000000
 8040b6c:	20000008 	.word	0x20000008
 8040b70:	20000004 	.word	0x20000004

08040b74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8040b74:	b480      	push	{r7}
 8040b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8040b78:	4b06      	ldr	r3, [pc, #24]	; (8040b94 <HAL_IncTick+0x20>)
 8040b7a:	781b      	ldrb	r3, [r3, #0]
 8040b7c:	461a      	mov	r2, r3
 8040b7e:	4b06      	ldr	r3, [pc, #24]	; (8040b98 <HAL_IncTick+0x24>)
 8040b80:	681b      	ldr	r3, [r3, #0]
 8040b82:	4413      	add	r3, r2
 8040b84:	4a04      	ldr	r2, [pc, #16]	; (8040b98 <HAL_IncTick+0x24>)
 8040b86:	6013      	str	r3, [r2, #0]
}
 8040b88:	bf00      	nop
 8040b8a:	46bd      	mov	sp, r7
 8040b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b90:	4770      	bx	lr
 8040b92:	bf00      	nop
 8040b94:	20000008 	.word	0x20000008
 8040b98:	2000028c 	.word	0x2000028c

08040b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8040b9c:	b480      	push	{r7}
 8040b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8040ba0:	4b03      	ldr	r3, [pc, #12]	; (8040bb0 <HAL_GetTick+0x14>)
 8040ba2:	681b      	ldr	r3, [r3, #0]
}
 8040ba4:	4618      	mov	r0, r3
 8040ba6:	46bd      	mov	sp, r7
 8040ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040bac:	4770      	bx	lr
 8040bae:	bf00      	nop
 8040bb0:	2000028c 	.word	0x2000028c

08040bb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8040bb4:	b580      	push	{r7, lr}
 8040bb6:	b084      	sub	sp, #16
 8040bb8:	af00      	add	r7, sp, #0
 8040bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8040bbc:	f7ff ffee 	bl	8040b9c <HAL_GetTick>
 8040bc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8040bc2:	687b      	ldr	r3, [r7, #4]
 8040bc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8040bc6:	68fb      	ldr	r3, [r7, #12]
 8040bc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8040bcc:	d005      	beq.n	8040bda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8040bce:	4b09      	ldr	r3, [pc, #36]	; (8040bf4 <HAL_Delay+0x40>)
 8040bd0:	781b      	ldrb	r3, [r3, #0]
 8040bd2:	461a      	mov	r2, r3
 8040bd4:	68fb      	ldr	r3, [r7, #12]
 8040bd6:	4413      	add	r3, r2
 8040bd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8040bda:	bf00      	nop
 8040bdc:	f7ff ffde 	bl	8040b9c <HAL_GetTick>
 8040be0:	4602      	mov	r2, r0
 8040be2:	68bb      	ldr	r3, [r7, #8]
 8040be4:	1ad3      	subs	r3, r2, r3
 8040be6:	68fa      	ldr	r2, [r7, #12]
 8040be8:	429a      	cmp	r2, r3
 8040bea:	d8f7      	bhi.n	8040bdc <HAL_Delay+0x28>
  {
  }
}
 8040bec:	bf00      	nop
 8040bee:	3710      	adds	r7, #16
 8040bf0:	46bd      	mov	sp, r7
 8040bf2:	bd80      	pop	{r7, pc}
 8040bf4:	20000008 	.word	0x20000008

08040bf8 <__NVIC_SetPriorityGrouping>:
{
 8040bf8:	b480      	push	{r7}
 8040bfa:	b085      	sub	sp, #20
 8040bfc:	af00      	add	r7, sp, #0
 8040bfe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8040c00:	687b      	ldr	r3, [r7, #4]
 8040c02:	f003 0307 	and.w	r3, r3, #7
 8040c06:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8040c08:	4b0b      	ldr	r3, [pc, #44]	; (8040c38 <__NVIC_SetPriorityGrouping+0x40>)
 8040c0a:	68db      	ldr	r3, [r3, #12]
 8040c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8040c0e:	68ba      	ldr	r2, [r7, #8]
 8040c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8040c14:	4013      	ands	r3, r2
 8040c16:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8040c18:	68fb      	ldr	r3, [r7, #12]
 8040c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8040c1c:	68bb      	ldr	r3, [r7, #8]
 8040c1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8040c20:	4b06      	ldr	r3, [pc, #24]	; (8040c3c <__NVIC_SetPriorityGrouping+0x44>)
 8040c22:	4313      	orrs	r3, r2
 8040c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8040c26:	4a04      	ldr	r2, [pc, #16]	; (8040c38 <__NVIC_SetPriorityGrouping+0x40>)
 8040c28:	68bb      	ldr	r3, [r7, #8]
 8040c2a:	60d3      	str	r3, [r2, #12]
}
 8040c2c:	bf00      	nop
 8040c2e:	3714      	adds	r7, #20
 8040c30:	46bd      	mov	sp, r7
 8040c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c36:	4770      	bx	lr
 8040c38:	e000ed00 	.word	0xe000ed00
 8040c3c:	05fa0000 	.word	0x05fa0000

08040c40 <__NVIC_GetPriorityGrouping>:
{
 8040c40:	b480      	push	{r7}
 8040c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8040c44:	4b04      	ldr	r3, [pc, #16]	; (8040c58 <__NVIC_GetPriorityGrouping+0x18>)
 8040c46:	68db      	ldr	r3, [r3, #12]
 8040c48:	0a1b      	lsrs	r3, r3, #8
 8040c4a:	f003 0307 	and.w	r3, r3, #7
}
 8040c4e:	4618      	mov	r0, r3
 8040c50:	46bd      	mov	sp, r7
 8040c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c56:	4770      	bx	lr
 8040c58:	e000ed00 	.word	0xe000ed00

08040c5c <__NVIC_EnableIRQ>:
{
 8040c5c:	b480      	push	{r7}
 8040c5e:	b083      	sub	sp, #12
 8040c60:	af00      	add	r7, sp, #0
 8040c62:	4603      	mov	r3, r0
 8040c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8040c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040c6a:	2b00      	cmp	r3, #0
 8040c6c:	db0b      	blt.n	8040c86 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8040c6e:	79fb      	ldrb	r3, [r7, #7]
 8040c70:	f003 021f 	and.w	r2, r3, #31
 8040c74:	4907      	ldr	r1, [pc, #28]	; (8040c94 <__NVIC_EnableIRQ+0x38>)
 8040c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040c7a:	095b      	lsrs	r3, r3, #5
 8040c7c:	2001      	movs	r0, #1
 8040c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8040c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8040c86:	bf00      	nop
 8040c88:	370c      	adds	r7, #12
 8040c8a:	46bd      	mov	sp, r7
 8040c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c90:	4770      	bx	lr
 8040c92:	bf00      	nop
 8040c94:	e000e100 	.word	0xe000e100

08040c98 <__NVIC_SetPriority>:
{
 8040c98:	b480      	push	{r7}
 8040c9a:	b083      	sub	sp, #12
 8040c9c:	af00      	add	r7, sp, #0
 8040c9e:	4603      	mov	r3, r0
 8040ca0:	6039      	str	r1, [r7, #0]
 8040ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8040ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040ca8:	2b00      	cmp	r3, #0
 8040caa:	db0a      	blt.n	8040cc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040cac:	683b      	ldr	r3, [r7, #0]
 8040cae:	b2da      	uxtb	r2, r3
 8040cb0:	490c      	ldr	r1, [pc, #48]	; (8040ce4 <__NVIC_SetPriority+0x4c>)
 8040cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040cb6:	0112      	lsls	r2, r2, #4
 8040cb8:	b2d2      	uxtb	r2, r2
 8040cba:	440b      	add	r3, r1
 8040cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8040cc0:	e00a      	b.n	8040cd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040cc2:	683b      	ldr	r3, [r7, #0]
 8040cc4:	b2da      	uxtb	r2, r3
 8040cc6:	4908      	ldr	r1, [pc, #32]	; (8040ce8 <__NVIC_SetPriority+0x50>)
 8040cc8:	79fb      	ldrb	r3, [r7, #7]
 8040cca:	f003 030f 	and.w	r3, r3, #15
 8040cce:	3b04      	subs	r3, #4
 8040cd0:	0112      	lsls	r2, r2, #4
 8040cd2:	b2d2      	uxtb	r2, r2
 8040cd4:	440b      	add	r3, r1
 8040cd6:	761a      	strb	r2, [r3, #24]
}
 8040cd8:	bf00      	nop
 8040cda:	370c      	adds	r7, #12
 8040cdc:	46bd      	mov	sp, r7
 8040cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040ce2:	4770      	bx	lr
 8040ce4:	e000e100 	.word	0xe000e100
 8040ce8:	e000ed00 	.word	0xe000ed00

08040cec <NVIC_EncodePriority>:
{
 8040cec:	b480      	push	{r7}
 8040cee:	b089      	sub	sp, #36	; 0x24
 8040cf0:	af00      	add	r7, sp, #0
 8040cf2:	60f8      	str	r0, [r7, #12]
 8040cf4:	60b9      	str	r1, [r7, #8]
 8040cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8040cf8:	68fb      	ldr	r3, [r7, #12]
 8040cfa:	f003 0307 	and.w	r3, r3, #7
 8040cfe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8040d00:	69fb      	ldr	r3, [r7, #28]
 8040d02:	f1c3 0307 	rsb	r3, r3, #7
 8040d06:	2b04      	cmp	r3, #4
 8040d08:	bf28      	it	cs
 8040d0a:	2304      	movcs	r3, #4
 8040d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8040d0e:	69fb      	ldr	r3, [r7, #28]
 8040d10:	3304      	adds	r3, #4
 8040d12:	2b06      	cmp	r3, #6
 8040d14:	d902      	bls.n	8040d1c <NVIC_EncodePriority+0x30>
 8040d16:	69fb      	ldr	r3, [r7, #28]
 8040d18:	3b03      	subs	r3, #3
 8040d1a:	e000      	b.n	8040d1e <NVIC_EncodePriority+0x32>
 8040d1c:	2300      	movs	r3, #0
 8040d1e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040d20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8040d24:	69bb      	ldr	r3, [r7, #24]
 8040d26:	fa02 f303 	lsl.w	r3, r2, r3
 8040d2a:	43da      	mvns	r2, r3
 8040d2c:	68bb      	ldr	r3, [r7, #8]
 8040d2e:	401a      	ands	r2, r3
 8040d30:	697b      	ldr	r3, [r7, #20]
 8040d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8040d34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8040d38:	697b      	ldr	r3, [r7, #20]
 8040d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8040d3e:	43d9      	mvns	r1, r3
 8040d40:	687b      	ldr	r3, [r7, #4]
 8040d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040d44:	4313      	orrs	r3, r2
}
 8040d46:	4618      	mov	r0, r3
 8040d48:	3724      	adds	r7, #36	; 0x24
 8040d4a:	46bd      	mov	sp, r7
 8040d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d50:	4770      	bx	lr
	...

08040d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8040d54:	b580      	push	{r7, lr}
 8040d56:	b082      	sub	sp, #8
 8040d58:	af00      	add	r7, sp, #0
 8040d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8040d5c:	687b      	ldr	r3, [r7, #4]
 8040d5e:	3b01      	subs	r3, #1
 8040d60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8040d64:	d301      	bcc.n	8040d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8040d66:	2301      	movs	r3, #1
 8040d68:	e00f      	b.n	8040d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8040d6a:	4a0a      	ldr	r2, [pc, #40]	; (8040d94 <SysTick_Config+0x40>)
 8040d6c:	687b      	ldr	r3, [r7, #4]
 8040d6e:	3b01      	subs	r3, #1
 8040d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8040d72:	210f      	movs	r1, #15
 8040d74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8040d78:	f7ff ff8e 	bl	8040c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8040d7c:	4b05      	ldr	r3, [pc, #20]	; (8040d94 <SysTick_Config+0x40>)
 8040d7e:	2200      	movs	r2, #0
 8040d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8040d82:	4b04      	ldr	r3, [pc, #16]	; (8040d94 <SysTick_Config+0x40>)
 8040d84:	2207      	movs	r2, #7
 8040d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8040d88:	2300      	movs	r3, #0
}
 8040d8a:	4618      	mov	r0, r3
 8040d8c:	3708      	adds	r7, #8
 8040d8e:	46bd      	mov	sp, r7
 8040d90:	bd80      	pop	{r7, pc}
 8040d92:	bf00      	nop
 8040d94:	e000e010 	.word	0xe000e010

08040d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040d98:	b580      	push	{r7, lr}
 8040d9a:	b082      	sub	sp, #8
 8040d9c:	af00      	add	r7, sp, #0
 8040d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8040da0:	6878      	ldr	r0, [r7, #4]
 8040da2:	f7ff ff29 	bl	8040bf8 <__NVIC_SetPriorityGrouping>
}
 8040da6:	bf00      	nop
 8040da8:	3708      	adds	r7, #8
 8040daa:	46bd      	mov	sp, r7
 8040dac:	bd80      	pop	{r7, pc}

08040dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8040dae:	b580      	push	{r7, lr}
 8040db0:	b086      	sub	sp, #24
 8040db2:	af00      	add	r7, sp, #0
 8040db4:	4603      	mov	r3, r0
 8040db6:	60b9      	str	r1, [r7, #8]
 8040db8:	607a      	str	r2, [r7, #4]
 8040dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8040dbc:	2300      	movs	r3, #0
 8040dbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8040dc0:	f7ff ff3e 	bl	8040c40 <__NVIC_GetPriorityGrouping>
 8040dc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8040dc6:	687a      	ldr	r2, [r7, #4]
 8040dc8:	68b9      	ldr	r1, [r7, #8]
 8040dca:	6978      	ldr	r0, [r7, #20]
 8040dcc:	f7ff ff8e 	bl	8040cec <NVIC_EncodePriority>
 8040dd0:	4602      	mov	r2, r0
 8040dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8040dd6:	4611      	mov	r1, r2
 8040dd8:	4618      	mov	r0, r3
 8040dda:	f7ff ff5d 	bl	8040c98 <__NVIC_SetPriority>
}
 8040dde:	bf00      	nop
 8040de0:	3718      	adds	r7, #24
 8040de2:	46bd      	mov	sp, r7
 8040de4:	bd80      	pop	{r7, pc}

08040de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8040de6:	b580      	push	{r7, lr}
 8040de8:	b082      	sub	sp, #8
 8040dea:	af00      	add	r7, sp, #0
 8040dec:	4603      	mov	r3, r0
 8040dee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8040df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040df4:	4618      	mov	r0, r3
 8040df6:	f7ff ff31 	bl	8040c5c <__NVIC_EnableIRQ>
}
 8040dfa:	bf00      	nop
 8040dfc:	3708      	adds	r7, #8
 8040dfe:	46bd      	mov	sp, r7
 8040e00:	bd80      	pop	{r7, pc}

08040e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8040e02:	b580      	push	{r7, lr}
 8040e04:	b082      	sub	sp, #8
 8040e06:	af00      	add	r7, sp, #0
 8040e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8040e0a:	6878      	ldr	r0, [r7, #4]
 8040e0c:	f7ff ffa2 	bl	8040d54 <SysTick_Config>
 8040e10:	4603      	mov	r3, r0
}
 8040e12:	4618      	mov	r0, r3
 8040e14:	3708      	adds	r7, #8
 8040e16:	46bd      	mov	sp, r7
 8040e18:	bd80      	pop	{r7, pc}
	...

08040e1c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8040e1c:	b580      	push	{r7, lr}
 8040e1e:	b082      	sub	sp, #8
 8040e20:	af00      	add	r7, sp, #0
 8040e22:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8040e24:	687b      	ldr	r3, [r7, #4]
 8040e26:	2b00      	cmp	r3, #0
 8040e28:	d101      	bne.n	8040e2e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8040e2a:	2301      	movs	r3, #1
 8040e2c:	e054      	b.n	8040ed8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8040e2e:	687b      	ldr	r3, [r7, #4]
 8040e30:	7f5b      	ldrb	r3, [r3, #29]
 8040e32:	b2db      	uxtb	r3, r3
 8040e34:	2b00      	cmp	r3, #0
 8040e36:	d105      	bne.n	8040e44 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8040e38:	687b      	ldr	r3, [r7, #4]
 8040e3a:	2200      	movs	r2, #0
 8040e3c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8040e3e:	6878      	ldr	r0, [r7, #4]
 8040e40:	f7ff fda4 	bl	804098c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8040e44:	687b      	ldr	r3, [r7, #4]
 8040e46:	2202      	movs	r2, #2
 8040e48:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8040e4a:	687b      	ldr	r3, [r7, #4]
 8040e4c:	791b      	ldrb	r3, [r3, #4]
 8040e4e:	2b00      	cmp	r3, #0
 8040e50:	d10c      	bne.n	8040e6c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8040e52:	687b      	ldr	r3, [r7, #4]
 8040e54:	681b      	ldr	r3, [r3, #0]
 8040e56:	4a22      	ldr	r2, [pc, #136]	; (8040ee0 <HAL_CRC_Init+0xc4>)
 8040e58:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8040e5a:	687b      	ldr	r3, [r7, #4]
 8040e5c:	681b      	ldr	r3, [r3, #0]
 8040e5e:	689a      	ldr	r2, [r3, #8]
 8040e60:	687b      	ldr	r3, [r7, #4]
 8040e62:	681b      	ldr	r3, [r3, #0]
 8040e64:	f022 0218 	bic.w	r2, r2, #24
 8040e68:	609a      	str	r2, [r3, #8]
 8040e6a:	e00c      	b.n	8040e86 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8040e6c:	687b      	ldr	r3, [r7, #4]
 8040e6e:	6899      	ldr	r1, [r3, #8]
 8040e70:	687b      	ldr	r3, [r7, #4]
 8040e72:	68db      	ldr	r3, [r3, #12]
 8040e74:	461a      	mov	r2, r3
 8040e76:	6878      	ldr	r0, [r7, #4]
 8040e78:	f000 f834 	bl	8040ee4 <HAL_CRCEx_Polynomial_Set>
 8040e7c:	4603      	mov	r3, r0
 8040e7e:	2b00      	cmp	r3, #0
 8040e80:	d001      	beq.n	8040e86 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8040e82:	2301      	movs	r3, #1
 8040e84:	e028      	b.n	8040ed8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8040e86:	687b      	ldr	r3, [r7, #4]
 8040e88:	795b      	ldrb	r3, [r3, #5]
 8040e8a:	2b00      	cmp	r3, #0
 8040e8c:	d105      	bne.n	8040e9a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8040e8e:	687b      	ldr	r3, [r7, #4]
 8040e90:	681b      	ldr	r3, [r3, #0]
 8040e92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8040e96:	611a      	str	r2, [r3, #16]
 8040e98:	e004      	b.n	8040ea4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8040e9a:	687b      	ldr	r3, [r7, #4]
 8040e9c:	681b      	ldr	r3, [r3, #0]
 8040e9e:	687a      	ldr	r2, [r7, #4]
 8040ea0:	6912      	ldr	r2, [r2, #16]
 8040ea2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8040ea4:	687b      	ldr	r3, [r7, #4]
 8040ea6:	681b      	ldr	r3, [r3, #0]
 8040ea8:	689b      	ldr	r3, [r3, #8]
 8040eaa:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8040eae:	687b      	ldr	r3, [r7, #4]
 8040eb0:	695a      	ldr	r2, [r3, #20]
 8040eb2:	687b      	ldr	r3, [r7, #4]
 8040eb4:	681b      	ldr	r3, [r3, #0]
 8040eb6:	430a      	orrs	r2, r1
 8040eb8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8040eba:	687b      	ldr	r3, [r7, #4]
 8040ebc:	681b      	ldr	r3, [r3, #0]
 8040ebe:	689b      	ldr	r3, [r3, #8]
 8040ec0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8040ec4:	687b      	ldr	r3, [r7, #4]
 8040ec6:	699a      	ldr	r2, [r3, #24]
 8040ec8:	687b      	ldr	r3, [r7, #4]
 8040eca:	681b      	ldr	r3, [r3, #0]
 8040ecc:	430a      	orrs	r2, r1
 8040ece:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8040ed0:	687b      	ldr	r3, [r7, #4]
 8040ed2:	2201      	movs	r2, #1
 8040ed4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8040ed6:	2300      	movs	r3, #0
}
 8040ed8:	4618      	mov	r0, r3
 8040eda:	3708      	adds	r7, #8
 8040edc:	46bd      	mov	sp, r7
 8040ede:	bd80      	pop	{r7, pc}
 8040ee0:	04c11db7 	.word	0x04c11db7

08040ee4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8040ee4:	b480      	push	{r7}
 8040ee6:	b087      	sub	sp, #28
 8040ee8:	af00      	add	r7, sp, #0
 8040eea:	60f8      	str	r0, [r7, #12]
 8040eec:	60b9      	str	r1, [r7, #8]
 8040eee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8040ef0:	2300      	movs	r3, #0
 8040ef2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8040ef4:	231f      	movs	r3, #31
 8040ef6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8040ef8:	bf00      	nop
 8040efa:	693b      	ldr	r3, [r7, #16]
 8040efc:	1e5a      	subs	r2, r3, #1
 8040efe:	613a      	str	r2, [r7, #16]
 8040f00:	2b00      	cmp	r3, #0
 8040f02:	d009      	beq.n	8040f18 <HAL_CRCEx_Polynomial_Set+0x34>
 8040f04:	693b      	ldr	r3, [r7, #16]
 8040f06:	f003 031f 	and.w	r3, r3, #31
 8040f0a:	68ba      	ldr	r2, [r7, #8]
 8040f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8040f10:	f003 0301 	and.w	r3, r3, #1
 8040f14:	2b00      	cmp	r3, #0
 8040f16:	d0f0      	beq.n	8040efa <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8040f18:	687b      	ldr	r3, [r7, #4]
 8040f1a:	2b18      	cmp	r3, #24
 8040f1c:	d846      	bhi.n	8040fac <HAL_CRCEx_Polynomial_Set+0xc8>
 8040f1e:	a201      	add	r2, pc, #4	; (adr r2, 8040f24 <HAL_CRCEx_Polynomial_Set+0x40>)
 8040f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8040f24:	08040fb3 	.word	0x08040fb3
 8040f28:	08040fad 	.word	0x08040fad
 8040f2c:	08040fad 	.word	0x08040fad
 8040f30:	08040fad 	.word	0x08040fad
 8040f34:	08040fad 	.word	0x08040fad
 8040f38:	08040fad 	.word	0x08040fad
 8040f3c:	08040fad 	.word	0x08040fad
 8040f40:	08040fad 	.word	0x08040fad
 8040f44:	08040fa1 	.word	0x08040fa1
 8040f48:	08040fad 	.word	0x08040fad
 8040f4c:	08040fad 	.word	0x08040fad
 8040f50:	08040fad 	.word	0x08040fad
 8040f54:	08040fad 	.word	0x08040fad
 8040f58:	08040fad 	.word	0x08040fad
 8040f5c:	08040fad 	.word	0x08040fad
 8040f60:	08040fad 	.word	0x08040fad
 8040f64:	08040f95 	.word	0x08040f95
 8040f68:	08040fad 	.word	0x08040fad
 8040f6c:	08040fad 	.word	0x08040fad
 8040f70:	08040fad 	.word	0x08040fad
 8040f74:	08040fad 	.word	0x08040fad
 8040f78:	08040fad 	.word	0x08040fad
 8040f7c:	08040fad 	.word	0x08040fad
 8040f80:	08040fad 	.word	0x08040fad
 8040f84:	08040f89 	.word	0x08040f89
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8040f88:	693b      	ldr	r3, [r7, #16]
 8040f8a:	2b06      	cmp	r3, #6
 8040f8c:	d913      	bls.n	8040fb6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8040f8e:	2301      	movs	r3, #1
 8040f90:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8040f92:	e010      	b.n	8040fb6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8040f94:	693b      	ldr	r3, [r7, #16]
 8040f96:	2b07      	cmp	r3, #7
 8040f98:	d90f      	bls.n	8040fba <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8040f9a:	2301      	movs	r3, #1
 8040f9c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8040f9e:	e00c      	b.n	8040fba <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8040fa0:	693b      	ldr	r3, [r7, #16]
 8040fa2:	2b0f      	cmp	r3, #15
 8040fa4:	d90b      	bls.n	8040fbe <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8040fa6:	2301      	movs	r3, #1
 8040fa8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8040faa:	e008      	b.n	8040fbe <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8040fac:	2301      	movs	r3, #1
 8040fae:	75fb      	strb	r3, [r7, #23]
      break;
 8040fb0:	e006      	b.n	8040fc0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8040fb2:	bf00      	nop
 8040fb4:	e004      	b.n	8040fc0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8040fb6:	bf00      	nop
 8040fb8:	e002      	b.n	8040fc0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8040fba:	bf00      	nop
 8040fbc:	e000      	b.n	8040fc0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8040fbe:	bf00      	nop
  }
  if (status == HAL_OK)
 8040fc0:	7dfb      	ldrb	r3, [r7, #23]
 8040fc2:	2b00      	cmp	r3, #0
 8040fc4:	d10d      	bne.n	8040fe2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8040fc6:	68fb      	ldr	r3, [r7, #12]
 8040fc8:	681b      	ldr	r3, [r3, #0]
 8040fca:	68ba      	ldr	r2, [r7, #8]
 8040fcc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8040fce:	68fb      	ldr	r3, [r7, #12]
 8040fd0:	681b      	ldr	r3, [r3, #0]
 8040fd2:	689b      	ldr	r3, [r3, #8]
 8040fd4:	f023 0118 	bic.w	r1, r3, #24
 8040fd8:	68fb      	ldr	r3, [r7, #12]
 8040fda:	681b      	ldr	r3, [r3, #0]
 8040fdc:	687a      	ldr	r2, [r7, #4]
 8040fde:	430a      	orrs	r2, r1
 8040fe0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8040fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8040fe4:	4618      	mov	r0, r3
 8040fe6:	371c      	adds	r7, #28
 8040fe8:	46bd      	mov	sp, r7
 8040fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040fee:	4770      	bx	lr

08040ff0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8040ff0:	b580      	push	{r7, lr}
 8040ff2:	b086      	sub	sp, #24
 8040ff4:	af00      	add	r7, sp, #0
 8040ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8040ff8:	2300      	movs	r3, #0
 8040ffa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8040ffc:	f7ff fdce 	bl	8040b9c <HAL_GetTick>
 8041000:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8041002:	687b      	ldr	r3, [r7, #4]
 8041004:	2b00      	cmp	r3, #0
 8041006:	d101      	bne.n	804100c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8041008:	2301      	movs	r3, #1
 804100a:	e099      	b.n	8041140 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 804100c:	687b      	ldr	r3, [r7, #4]
 804100e:	2200      	movs	r2, #0
 8041010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8041014:	687b      	ldr	r3, [r7, #4]
 8041016:	2202      	movs	r2, #2
 8041018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 804101c:	687b      	ldr	r3, [r7, #4]
 804101e:	681b      	ldr	r3, [r3, #0]
 8041020:	681a      	ldr	r2, [r3, #0]
 8041022:	687b      	ldr	r3, [r7, #4]
 8041024:	681b      	ldr	r3, [r3, #0]
 8041026:	f022 0201 	bic.w	r2, r2, #1
 804102a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 804102c:	e00f      	b.n	804104e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 804102e:	f7ff fdb5 	bl	8040b9c <HAL_GetTick>
 8041032:	4602      	mov	r2, r0
 8041034:	693b      	ldr	r3, [r7, #16]
 8041036:	1ad3      	subs	r3, r2, r3
 8041038:	2b05      	cmp	r3, #5
 804103a:	d908      	bls.n	804104e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 804103c:	687b      	ldr	r3, [r7, #4]
 804103e:	2220      	movs	r2, #32
 8041040:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8041042:	687b      	ldr	r3, [r7, #4]
 8041044:	2203      	movs	r2, #3
 8041046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 804104a:	2303      	movs	r3, #3
 804104c:	e078      	b.n	8041140 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 804104e:	687b      	ldr	r3, [r7, #4]
 8041050:	681b      	ldr	r3, [r3, #0]
 8041052:	681b      	ldr	r3, [r3, #0]
 8041054:	f003 0301 	and.w	r3, r3, #1
 8041058:	2b00      	cmp	r3, #0
 804105a:	d1e8      	bne.n	804102e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 804105c:	687b      	ldr	r3, [r7, #4]
 804105e:	681b      	ldr	r3, [r3, #0]
 8041060:	681b      	ldr	r3, [r3, #0]
 8041062:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8041064:	697a      	ldr	r2, [r7, #20]
 8041066:	4b38      	ldr	r3, [pc, #224]	; (8041148 <HAL_DMA_Init+0x158>)
 8041068:	4013      	ands	r3, r2
 804106a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 804106c:	687b      	ldr	r3, [r7, #4]
 804106e:	685a      	ldr	r2, [r3, #4]
 8041070:	687b      	ldr	r3, [r7, #4]
 8041072:	689b      	ldr	r3, [r3, #8]
 8041074:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8041076:	687b      	ldr	r3, [r7, #4]
 8041078:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 804107a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 804107c:	687b      	ldr	r3, [r7, #4]
 804107e:	691b      	ldr	r3, [r3, #16]
 8041080:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8041082:	687b      	ldr	r3, [r7, #4]
 8041084:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8041086:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8041088:	687b      	ldr	r3, [r7, #4]
 804108a:	699b      	ldr	r3, [r3, #24]
 804108c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 804108e:	687b      	ldr	r3, [r7, #4]
 8041090:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8041092:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8041094:	687b      	ldr	r3, [r7, #4]
 8041096:	6a1b      	ldr	r3, [r3, #32]
 8041098:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 804109a:	697a      	ldr	r2, [r7, #20]
 804109c:	4313      	orrs	r3, r2
 804109e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80410a0:	687b      	ldr	r3, [r7, #4]
 80410a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80410a4:	2b04      	cmp	r3, #4
 80410a6:	d107      	bne.n	80410b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80410a8:	687b      	ldr	r3, [r7, #4]
 80410aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80410ac:	687b      	ldr	r3, [r7, #4]
 80410ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80410b0:	4313      	orrs	r3, r2
 80410b2:	697a      	ldr	r2, [r7, #20]
 80410b4:	4313      	orrs	r3, r2
 80410b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80410b8:	687b      	ldr	r3, [r7, #4]
 80410ba:	681b      	ldr	r3, [r3, #0]
 80410bc:	697a      	ldr	r2, [r7, #20]
 80410be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80410c0:	687b      	ldr	r3, [r7, #4]
 80410c2:	681b      	ldr	r3, [r3, #0]
 80410c4:	695b      	ldr	r3, [r3, #20]
 80410c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80410c8:	697b      	ldr	r3, [r7, #20]
 80410ca:	f023 0307 	bic.w	r3, r3, #7
 80410ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80410d0:	687b      	ldr	r3, [r7, #4]
 80410d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80410d4:	697a      	ldr	r2, [r7, #20]
 80410d6:	4313      	orrs	r3, r2
 80410d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80410da:	687b      	ldr	r3, [r7, #4]
 80410dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80410de:	2b04      	cmp	r3, #4
 80410e0:	d117      	bne.n	8041112 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80410e2:	687b      	ldr	r3, [r7, #4]
 80410e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80410e6:	697a      	ldr	r2, [r7, #20]
 80410e8:	4313      	orrs	r3, r2
 80410ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80410ec:	687b      	ldr	r3, [r7, #4]
 80410ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80410f0:	2b00      	cmp	r3, #0
 80410f2:	d00e      	beq.n	8041112 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80410f4:	6878      	ldr	r0, [r7, #4]
 80410f6:	f000 f8bd 	bl	8041274 <DMA_CheckFifoParam>
 80410fa:	4603      	mov	r3, r0
 80410fc:	2b00      	cmp	r3, #0
 80410fe:	d008      	beq.n	8041112 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8041100:	687b      	ldr	r3, [r7, #4]
 8041102:	2240      	movs	r2, #64	; 0x40
 8041104:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8041106:	687b      	ldr	r3, [r7, #4]
 8041108:	2201      	movs	r2, #1
 804110a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 804110e:	2301      	movs	r3, #1
 8041110:	e016      	b.n	8041140 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8041112:	687b      	ldr	r3, [r7, #4]
 8041114:	681b      	ldr	r3, [r3, #0]
 8041116:	697a      	ldr	r2, [r7, #20]
 8041118:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 804111a:	6878      	ldr	r0, [r7, #4]
 804111c:	f000 f874 	bl	8041208 <DMA_CalcBaseAndBitshift>
 8041120:	4603      	mov	r3, r0
 8041122:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8041124:	687b      	ldr	r3, [r7, #4]
 8041126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8041128:	223f      	movs	r2, #63	; 0x3f
 804112a:	409a      	lsls	r2, r3
 804112c:	68fb      	ldr	r3, [r7, #12]
 804112e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8041130:	687b      	ldr	r3, [r7, #4]
 8041132:	2200      	movs	r2, #0
 8041134:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8041136:	687b      	ldr	r3, [r7, #4]
 8041138:	2201      	movs	r2, #1
 804113a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 804113e:	2300      	movs	r3, #0
}
 8041140:	4618      	mov	r0, r3
 8041142:	3718      	adds	r7, #24
 8041144:	46bd      	mov	sp, r7
 8041146:	bd80      	pop	{r7, pc}
 8041148:	f010803f 	.word	0xf010803f

0804114c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 804114c:	b580      	push	{r7, lr}
 804114e:	b084      	sub	sp, #16
 8041150:	af00      	add	r7, sp, #0
 8041152:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8041154:	687b      	ldr	r3, [r7, #4]
 8041156:	2b00      	cmp	r3, #0
 8041158:	d101      	bne.n	804115e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 804115a:	2301      	movs	r3, #1
 804115c:	e050      	b.n	8041200 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 804115e:	687b      	ldr	r3, [r7, #4]
 8041160:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8041164:	b2db      	uxtb	r3, r3
 8041166:	2b02      	cmp	r3, #2
 8041168:	d101      	bne.n	804116e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 804116a:	2302      	movs	r3, #2
 804116c:	e048      	b.n	8041200 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 804116e:	687b      	ldr	r3, [r7, #4]
 8041170:	681b      	ldr	r3, [r3, #0]
 8041172:	681a      	ldr	r2, [r3, #0]
 8041174:	687b      	ldr	r3, [r7, #4]
 8041176:	681b      	ldr	r3, [r3, #0]
 8041178:	f022 0201 	bic.w	r2, r2, #1
 804117c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 804117e:	687b      	ldr	r3, [r7, #4]
 8041180:	681b      	ldr	r3, [r3, #0]
 8041182:	2200      	movs	r2, #0
 8041184:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8041186:	687b      	ldr	r3, [r7, #4]
 8041188:	681b      	ldr	r3, [r3, #0]
 804118a:	2200      	movs	r2, #0
 804118c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 804118e:	687b      	ldr	r3, [r7, #4]
 8041190:	681b      	ldr	r3, [r3, #0]
 8041192:	2200      	movs	r2, #0
 8041194:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8041196:	687b      	ldr	r3, [r7, #4]
 8041198:	681b      	ldr	r3, [r3, #0]
 804119a:	2200      	movs	r2, #0
 804119c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 804119e:	687b      	ldr	r3, [r7, #4]
 80411a0:	681b      	ldr	r3, [r3, #0]
 80411a2:	2200      	movs	r2, #0
 80411a4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80411a6:	687b      	ldr	r3, [r7, #4]
 80411a8:	681b      	ldr	r3, [r3, #0]
 80411aa:	2221      	movs	r2, #33	; 0x21
 80411ac:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80411ae:	6878      	ldr	r0, [r7, #4]
 80411b0:	f000 f82a 	bl	8041208 <DMA_CalcBaseAndBitshift>
 80411b4:	4603      	mov	r3, r0
 80411b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80411b8:	687b      	ldr	r3, [r7, #4]
 80411ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80411bc:	223f      	movs	r2, #63	; 0x3f
 80411be:	409a      	lsls	r2, r3
 80411c0:	68fb      	ldr	r3, [r7, #12]
 80411c2:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80411c4:	687b      	ldr	r3, [r7, #4]
 80411c6:	2200      	movs	r2, #0
 80411c8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80411ca:	687b      	ldr	r3, [r7, #4]
 80411cc:	2200      	movs	r2, #0
 80411ce:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80411d0:	687b      	ldr	r3, [r7, #4]
 80411d2:	2200      	movs	r2, #0
 80411d4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80411d6:	687b      	ldr	r3, [r7, #4]
 80411d8:	2200      	movs	r2, #0
 80411da:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80411dc:	687b      	ldr	r3, [r7, #4]
 80411de:	2200      	movs	r2, #0
 80411e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80411e2:	687b      	ldr	r3, [r7, #4]
 80411e4:	2200      	movs	r2, #0
 80411e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80411e8:	687b      	ldr	r3, [r7, #4]
 80411ea:	2200      	movs	r2, #0
 80411ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80411ee:	687b      	ldr	r3, [r7, #4]
 80411f0:	2200      	movs	r2, #0
 80411f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80411f6:	687b      	ldr	r3, [r7, #4]
 80411f8:	2200      	movs	r2, #0
 80411fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80411fe:	2300      	movs	r3, #0
}
 8041200:	4618      	mov	r0, r3
 8041202:	3710      	adds	r7, #16
 8041204:	46bd      	mov	sp, r7
 8041206:	bd80      	pop	{r7, pc}

08041208 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8041208:	b480      	push	{r7}
 804120a:	b085      	sub	sp, #20
 804120c:	af00      	add	r7, sp, #0
 804120e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8041210:	687b      	ldr	r3, [r7, #4]
 8041212:	681b      	ldr	r3, [r3, #0]
 8041214:	b2db      	uxtb	r3, r3
 8041216:	3b10      	subs	r3, #16
 8041218:	4a13      	ldr	r2, [pc, #76]	; (8041268 <DMA_CalcBaseAndBitshift+0x60>)
 804121a:	fba2 2303 	umull	r2, r3, r2, r3
 804121e:	091b      	lsrs	r3, r3, #4
 8041220:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8041222:	4a12      	ldr	r2, [pc, #72]	; (804126c <DMA_CalcBaseAndBitshift+0x64>)
 8041224:	68fb      	ldr	r3, [r7, #12]
 8041226:	4413      	add	r3, r2
 8041228:	781b      	ldrb	r3, [r3, #0]
 804122a:	461a      	mov	r2, r3
 804122c:	687b      	ldr	r3, [r7, #4]
 804122e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8041230:	68fb      	ldr	r3, [r7, #12]
 8041232:	2b03      	cmp	r3, #3
 8041234:	d908      	bls.n	8041248 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8041236:	687b      	ldr	r3, [r7, #4]
 8041238:	681b      	ldr	r3, [r3, #0]
 804123a:	461a      	mov	r2, r3
 804123c:	4b0c      	ldr	r3, [pc, #48]	; (8041270 <DMA_CalcBaseAndBitshift+0x68>)
 804123e:	4013      	ands	r3, r2
 8041240:	1d1a      	adds	r2, r3, #4
 8041242:	687b      	ldr	r3, [r7, #4]
 8041244:	659a      	str	r2, [r3, #88]	; 0x58
 8041246:	e006      	b.n	8041256 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8041248:	687b      	ldr	r3, [r7, #4]
 804124a:	681b      	ldr	r3, [r3, #0]
 804124c:	461a      	mov	r2, r3
 804124e:	4b08      	ldr	r3, [pc, #32]	; (8041270 <DMA_CalcBaseAndBitshift+0x68>)
 8041250:	4013      	ands	r3, r2
 8041252:	687a      	ldr	r2, [r7, #4]
 8041254:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8041256:	687b      	ldr	r3, [r7, #4]
 8041258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 804125a:	4618      	mov	r0, r3
 804125c:	3714      	adds	r7, #20
 804125e:	46bd      	mov	sp, r7
 8041260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041264:	4770      	bx	lr
 8041266:	bf00      	nop
 8041268:	aaaaaaab 	.word	0xaaaaaaab
 804126c:	08045984 	.word	0x08045984
 8041270:	fffffc00 	.word	0xfffffc00

08041274 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8041274:	b480      	push	{r7}
 8041276:	b085      	sub	sp, #20
 8041278:	af00      	add	r7, sp, #0
 804127a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 804127c:	2300      	movs	r3, #0
 804127e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8041280:	687b      	ldr	r3, [r7, #4]
 8041282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8041284:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8041286:	687b      	ldr	r3, [r7, #4]
 8041288:	699b      	ldr	r3, [r3, #24]
 804128a:	2b00      	cmp	r3, #0
 804128c:	d11f      	bne.n	80412ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 804128e:	68bb      	ldr	r3, [r7, #8]
 8041290:	2b03      	cmp	r3, #3
 8041292:	d855      	bhi.n	8041340 <DMA_CheckFifoParam+0xcc>
 8041294:	a201      	add	r2, pc, #4	; (adr r2, 804129c <DMA_CheckFifoParam+0x28>)
 8041296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804129a:	bf00      	nop
 804129c:	080412ad 	.word	0x080412ad
 80412a0:	080412bf 	.word	0x080412bf
 80412a4:	080412ad 	.word	0x080412ad
 80412a8:	08041341 	.word	0x08041341
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80412ac:	687b      	ldr	r3, [r7, #4]
 80412ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80412b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80412b4:	2b00      	cmp	r3, #0
 80412b6:	d045      	beq.n	8041344 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80412b8:	2301      	movs	r3, #1
 80412ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80412bc:	e042      	b.n	8041344 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80412be:	687b      	ldr	r3, [r7, #4]
 80412c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80412c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80412c6:	d13f      	bne.n	8041348 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80412c8:	2301      	movs	r3, #1
 80412ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80412cc:	e03c      	b.n	8041348 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80412ce:	687b      	ldr	r3, [r7, #4]
 80412d0:	699b      	ldr	r3, [r3, #24]
 80412d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80412d6:	d121      	bne.n	804131c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80412d8:	68bb      	ldr	r3, [r7, #8]
 80412da:	2b03      	cmp	r3, #3
 80412dc:	d836      	bhi.n	804134c <DMA_CheckFifoParam+0xd8>
 80412de:	a201      	add	r2, pc, #4	; (adr r2, 80412e4 <DMA_CheckFifoParam+0x70>)
 80412e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80412e4:	080412f5 	.word	0x080412f5
 80412e8:	080412fb 	.word	0x080412fb
 80412ec:	080412f5 	.word	0x080412f5
 80412f0:	0804130d 	.word	0x0804130d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80412f4:	2301      	movs	r3, #1
 80412f6:	73fb      	strb	r3, [r7, #15]
      break;
 80412f8:	e02f      	b.n	804135a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80412fa:	687b      	ldr	r3, [r7, #4]
 80412fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80412fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8041302:	2b00      	cmp	r3, #0
 8041304:	d024      	beq.n	8041350 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8041306:	2301      	movs	r3, #1
 8041308:	73fb      	strb	r3, [r7, #15]
      }
      break;
 804130a:	e021      	b.n	8041350 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 804130c:	687b      	ldr	r3, [r7, #4]
 804130e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041310:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8041314:	d11e      	bne.n	8041354 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8041316:	2301      	movs	r3, #1
 8041318:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 804131a:	e01b      	b.n	8041354 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 804131c:	68bb      	ldr	r3, [r7, #8]
 804131e:	2b02      	cmp	r3, #2
 8041320:	d902      	bls.n	8041328 <DMA_CheckFifoParam+0xb4>
 8041322:	2b03      	cmp	r3, #3
 8041324:	d003      	beq.n	804132e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8041326:	e018      	b.n	804135a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8041328:	2301      	movs	r3, #1
 804132a:	73fb      	strb	r3, [r7, #15]
      break;
 804132c:	e015      	b.n	804135a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 804132e:	687b      	ldr	r3, [r7, #4]
 8041330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041332:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8041336:	2b00      	cmp	r3, #0
 8041338:	d00e      	beq.n	8041358 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 804133a:	2301      	movs	r3, #1
 804133c:	73fb      	strb	r3, [r7, #15]
      break;
 804133e:	e00b      	b.n	8041358 <DMA_CheckFifoParam+0xe4>
      break;
 8041340:	bf00      	nop
 8041342:	e00a      	b.n	804135a <DMA_CheckFifoParam+0xe6>
      break;
 8041344:	bf00      	nop
 8041346:	e008      	b.n	804135a <DMA_CheckFifoParam+0xe6>
      break;
 8041348:	bf00      	nop
 804134a:	e006      	b.n	804135a <DMA_CheckFifoParam+0xe6>
      break;
 804134c:	bf00      	nop
 804134e:	e004      	b.n	804135a <DMA_CheckFifoParam+0xe6>
      break;
 8041350:	bf00      	nop
 8041352:	e002      	b.n	804135a <DMA_CheckFifoParam+0xe6>
      break;   
 8041354:	bf00      	nop
 8041356:	e000      	b.n	804135a <DMA_CheckFifoParam+0xe6>
      break;
 8041358:	bf00      	nop
    }
  } 
  
  return status; 
 804135a:	7bfb      	ldrb	r3, [r7, #15]
}
 804135c:	4618      	mov	r0, r3
 804135e:	3714      	adds	r7, #20
 8041360:	46bd      	mov	sp, r7
 8041362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041366:	4770      	bx	lr

08041368 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8041368:	b580      	push	{r7, lr}
 804136a:	b082      	sub	sp, #8
 804136c:	af00      	add	r7, sp, #0
 804136e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8041370:	687b      	ldr	r3, [r7, #4]
 8041372:	2b00      	cmp	r3, #0
 8041374:	d101      	bne.n	804137a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8041376:	2301      	movs	r3, #1
 8041378:	e039      	b.n	80413ee <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 804137a:	687b      	ldr	r3, [r7, #4]
 804137c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8041380:	b2db      	uxtb	r3, r3
 8041382:	2b00      	cmp	r3, #0
 8041384:	d106      	bne.n	8041394 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8041386:	687b      	ldr	r3, [r7, #4]
 8041388:	2200      	movs	r2, #0
 804138a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 804138e:	6878      	ldr	r0, [r7, #4]
 8041390:	f7ff fb1c 	bl	80409cc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8041394:	687b      	ldr	r3, [r7, #4]
 8041396:	2202      	movs	r2, #2
 8041398:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 804139c:	687b      	ldr	r3, [r7, #4]
 804139e:	681b      	ldr	r3, [r3, #0]
 80413a0:	681b      	ldr	r3, [r3, #0]
 80413a2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80413a6:	687b      	ldr	r3, [r7, #4]
 80413a8:	685a      	ldr	r2, [r3, #4]
 80413aa:	687b      	ldr	r3, [r7, #4]
 80413ac:	681b      	ldr	r3, [r3, #0]
 80413ae:	430a      	orrs	r2, r1
 80413b0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80413b2:	687b      	ldr	r3, [r7, #4]
 80413b4:	681b      	ldr	r3, [r3, #0]
 80413b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80413b8:	f023 0107 	bic.w	r1, r3, #7
 80413bc:	687b      	ldr	r3, [r7, #4]
 80413be:	689a      	ldr	r2, [r3, #8]
 80413c0:	687b      	ldr	r3, [r7, #4]
 80413c2:	681b      	ldr	r3, [r3, #0]
 80413c4:	430a      	orrs	r2, r1
 80413c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80413c8:	687b      	ldr	r3, [r7, #4]
 80413ca:	681b      	ldr	r3, [r3, #0]
 80413cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80413ce:	4b0a      	ldr	r3, [pc, #40]	; (80413f8 <HAL_DMA2D_Init+0x90>)
 80413d0:	4013      	ands	r3, r2
 80413d2:	687a      	ldr	r2, [r7, #4]
 80413d4:	68d1      	ldr	r1, [r2, #12]
 80413d6:	687a      	ldr	r2, [r7, #4]
 80413d8:	6812      	ldr	r2, [r2, #0]
 80413da:	430b      	orrs	r3, r1
 80413dc:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80413de:	687b      	ldr	r3, [r7, #4]
 80413e0:	2200      	movs	r2, #0
 80413e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80413e4:	687b      	ldr	r3, [r7, #4]
 80413e6:	2201      	movs	r2, #1
 80413e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80413ec:	2300      	movs	r3, #0
}
 80413ee:	4618      	mov	r0, r3
 80413f0:	3708      	adds	r7, #8
 80413f2:	46bd      	mov	sp, r7
 80413f4:	bd80      	pop	{r7, pc}
 80413f6:	bf00      	nop
 80413f8:	ffffc000 	.word	0xffffc000

080413fc <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80413fc:	b580      	push	{r7, lr}
 80413fe:	b086      	sub	sp, #24
 8041400:	af02      	add	r7, sp, #8
 8041402:	60f8      	str	r0, [r7, #12]
 8041404:	60b9      	str	r1, [r7, #8]
 8041406:	607a      	str	r2, [r7, #4]
 8041408:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 804140a:	68fb      	ldr	r3, [r7, #12]
 804140c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8041410:	2b01      	cmp	r3, #1
 8041412:	d101      	bne.n	8041418 <HAL_DMA2D_Start+0x1c>
 8041414:	2302      	movs	r3, #2
 8041416:	e018      	b.n	804144a <HAL_DMA2D_Start+0x4e>
 8041418:	68fb      	ldr	r3, [r7, #12]
 804141a:	2201      	movs	r2, #1
 804141c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8041420:	68fb      	ldr	r3, [r7, #12]
 8041422:	2202      	movs	r2, #2
 8041424:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8041428:	69bb      	ldr	r3, [r7, #24]
 804142a:	9300      	str	r3, [sp, #0]
 804142c:	683b      	ldr	r3, [r7, #0]
 804142e:	687a      	ldr	r2, [r7, #4]
 8041430:	68b9      	ldr	r1, [r7, #8]
 8041432:	68f8      	ldr	r0, [r7, #12]
 8041434:	f000 f988 	bl	8041748 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8041438:	68fb      	ldr	r3, [r7, #12]
 804143a:	681b      	ldr	r3, [r3, #0]
 804143c:	681a      	ldr	r2, [r3, #0]
 804143e:	68fb      	ldr	r3, [r7, #12]
 8041440:	681b      	ldr	r3, [r3, #0]
 8041442:	f042 0201 	orr.w	r2, r2, #1
 8041446:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8041448:	2300      	movs	r3, #0
}
 804144a:	4618      	mov	r0, r3
 804144c:	3710      	adds	r7, #16
 804144e:	46bd      	mov	sp, r7
 8041450:	bd80      	pop	{r7, pc}

08041452 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8041452:	b580      	push	{r7, lr}
 8041454:	b086      	sub	sp, #24
 8041456:	af00      	add	r7, sp, #0
 8041458:	6078      	str	r0, [r7, #4]
 804145a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 804145c:	2300      	movs	r3, #0
 804145e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8041460:	687b      	ldr	r3, [r7, #4]
 8041462:	681b      	ldr	r3, [r3, #0]
 8041464:	681b      	ldr	r3, [r3, #0]
 8041466:	f003 0301 	and.w	r3, r3, #1
 804146a:	2b00      	cmp	r3, #0
 804146c:	d056      	beq.n	804151c <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 804146e:	f7ff fb95 	bl	8040b9c <HAL_GetTick>
 8041472:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8041474:	e04b      	b.n	804150e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8041476:	687b      	ldr	r3, [r7, #4]
 8041478:	681b      	ldr	r3, [r3, #0]
 804147a:	685b      	ldr	r3, [r3, #4]
 804147c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 804147e:	68fb      	ldr	r3, [r7, #12]
 8041480:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8041484:	2b00      	cmp	r3, #0
 8041486:	d023      	beq.n	80414d0 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8041488:	68fb      	ldr	r3, [r7, #12]
 804148a:	f003 0320 	and.w	r3, r3, #32
 804148e:	2b00      	cmp	r3, #0
 8041490:	d005      	beq.n	804149e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8041492:	687b      	ldr	r3, [r7, #4]
 8041494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8041496:	f043 0202 	orr.w	r2, r3, #2
 804149a:	687b      	ldr	r3, [r7, #4]
 804149c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 804149e:	68fb      	ldr	r3, [r7, #12]
 80414a0:	f003 0301 	and.w	r3, r3, #1
 80414a4:	2b00      	cmp	r3, #0
 80414a6:	d005      	beq.n	80414b4 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80414a8:	687b      	ldr	r3, [r7, #4]
 80414aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80414ac:	f043 0201 	orr.w	r2, r3, #1
 80414b0:	687b      	ldr	r3, [r7, #4]
 80414b2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80414b4:	687b      	ldr	r3, [r7, #4]
 80414b6:	681b      	ldr	r3, [r3, #0]
 80414b8:	2221      	movs	r2, #33	; 0x21
 80414ba:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80414bc:	687b      	ldr	r3, [r7, #4]
 80414be:	2204      	movs	r2, #4
 80414c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80414c4:	687b      	ldr	r3, [r7, #4]
 80414c6:	2200      	movs	r2, #0
 80414c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80414cc:	2301      	movs	r3, #1
 80414ce:	e0a5      	b.n	804161c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80414d0:	683b      	ldr	r3, [r7, #0]
 80414d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80414d6:	d01a      	beq.n	804150e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80414d8:	f7ff fb60 	bl	8040b9c <HAL_GetTick>
 80414dc:	4602      	mov	r2, r0
 80414de:	697b      	ldr	r3, [r7, #20]
 80414e0:	1ad3      	subs	r3, r2, r3
 80414e2:	683a      	ldr	r2, [r7, #0]
 80414e4:	429a      	cmp	r2, r3
 80414e6:	d302      	bcc.n	80414ee <HAL_DMA2D_PollForTransfer+0x9c>
 80414e8:	683b      	ldr	r3, [r7, #0]
 80414ea:	2b00      	cmp	r3, #0
 80414ec:	d10f      	bne.n	804150e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80414ee:	687b      	ldr	r3, [r7, #4]
 80414f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80414f2:	f043 0220 	orr.w	r2, r3, #32
 80414f6:	687b      	ldr	r3, [r7, #4]
 80414f8:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80414fa:	687b      	ldr	r3, [r7, #4]
 80414fc:	2203      	movs	r2, #3
 80414fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8041502:	687b      	ldr	r3, [r7, #4]
 8041504:	2200      	movs	r2, #0
 8041506:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 804150a:	2303      	movs	r3, #3
 804150c:	e086      	b.n	804161c <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 804150e:	687b      	ldr	r3, [r7, #4]
 8041510:	681b      	ldr	r3, [r3, #0]
 8041512:	685b      	ldr	r3, [r3, #4]
 8041514:	f003 0302 	and.w	r3, r3, #2
 8041518:	2b00      	cmp	r3, #0
 804151a:	d0ac      	beq.n	8041476 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 804151c:	687b      	ldr	r3, [r7, #4]
 804151e:	681b      	ldr	r3, [r3, #0]
 8041520:	69db      	ldr	r3, [r3, #28]
 8041522:	f003 0320 	and.w	r3, r3, #32
 8041526:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8041528:	687b      	ldr	r3, [r7, #4]
 804152a:	681b      	ldr	r3, [r3, #0]
 804152c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804152e:	f003 0320 	and.w	r3, r3, #32
 8041532:	693a      	ldr	r2, [r7, #16]
 8041534:	4313      	orrs	r3, r2
 8041536:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8041538:	693b      	ldr	r3, [r7, #16]
 804153a:	2b00      	cmp	r3, #0
 804153c:	d061      	beq.n	8041602 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 804153e:	f7ff fb2d 	bl	8040b9c <HAL_GetTick>
 8041542:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8041544:	e056      	b.n	80415f4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8041546:	687b      	ldr	r3, [r7, #4]
 8041548:	681b      	ldr	r3, [r3, #0]
 804154a:	685b      	ldr	r3, [r3, #4]
 804154c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 804154e:	68fb      	ldr	r3, [r7, #12]
 8041550:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8041554:	2b00      	cmp	r3, #0
 8041556:	d02e      	beq.n	80415b6 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8041558:	68fb      	ldr	r3, [r7, #12]
 804155a:	f003 0308 	and.w	r3, r3, #8
 804155e:	2b00      	cmp	r3, #0
 8041560:	d005      	beq.n	804156e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8041562:	687b      	ldr	r3, [r7, #4]
 8041564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8041566:	f043 0204 	orr.w	r2, r3, #4
 804156a:	687b      	ldr	r3, [r7, #4]
 804156c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 804156e:	68fb      	ldr	r3, [r7, #12]
 8041570:	f003 0320 	and.w	r3, r3, #32
 8041574:	2b00      	cmp	r3, #0
 8041576:	d005      	beq.n	8041584 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8041578:	687b      	ldr	r3, [r7, #4]
 804157a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804157c:	f043 0202 	orr.w	r2, r3, #2
 8041580:	687b      	ldr	r3, [r7, #4]
 8041582:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8041584:	68fb      	ldr	r3, [r7, #12]
 8041586:	f003 0301 	and.w	r3, r3, #1
 804158a:	2b00      	cmp	r3, #0
 804158c:	d005      	beq.n	804159a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 804158e:	687b      	ldr	r3, [r7, #4]
 8041590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8041592:	f043 0201 	orr.w	r2, r3, #1
 8041596:	687b      	ldr	r3, [r7, #4]
 8041598:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 804159a:	687b      	ldr	r3, [r7, #4]
 804159c:	681b      	ldr	r3, [r3, #0]
 804159e:	2229      	movs	r2, #41	; 0x29
 80415a0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80415a2:	687b      	ldr	r3, [r7, #4]
 80415a4:	2204      	movs	r2, #4
 80415a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80415aa:	687b      	ldr	r3, [r7, #4]
 80415ac:	2200      	movs	r2, #0
 80415ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80415b2:	2301      	movs	r3, #1
 80415b4:	e032      	b.n	804161c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80415b6:	683b      	ldr	r3, [r7, #0]
 80415b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80415bc:	d01a      	beq.n	80415f4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80415be:	f7ff faed 	bl	8040b9c <HAL_GetTick>
 80415c2:	4602      	mov	r2, r0
 80415c4:	697b      	ldr	r3, [r7, #20]
 80415c6:	1ad3      	subs	r3, r2, r3
 80415c8:	683a      	ldr	r2, [r7, #0]
 80415ca:	429a      	cmp	r2, r3
 80415cc:	d302      	bcc.n	80415d4 <HAL_DMA2D_PollForTransfer+0x182>
 80415ce:	683b      	ldr	r3, [r7, #0]
 80415d0:	2b00      	cmp	r3, #0
 80415d2:	d10f      	bne.n	80415f4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80415d4:	687b      	ldr	r3, [r7, #4]
 80415d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80415d8:	f043 0220 	orr.w	r2, r3, #32
 80415dc:	687b      	ldr	r3, [r7, #4]
 80415de:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80415e0:	687b      	ldr	r3, [r7, #4]
 80415e2:	2203      	movs	r2, #3
 80415e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80415e8:	687b      	ldr	r3, [r7, #4]
 80415ea:	2200      	movs	r2, #0
 80415ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80415f0:	2303      	movs	r3, #3
 80415f2:	e013      	b.n	804161c <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80415f4:	687b      	ldr	r3, [r7, #4]
 80415f6:	681b      	ldr	r3, [r3, #0]
 80415f8:	685b      	ldr	r3, [r3, #4]
 80415fa:	f003 0310 	and.w	r3, r3, #16
 80415fe:	2b00      	cmp	r3, #0
 8041600:	d0a1      	beq.n	8041546 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8041602:	687b      	ldr	r3, [r7, #4]
 8041604:	681b      	ldr	r3, [r3, #0]
 8041606:	2212      	movs	r2, #18
 8041608:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 804160a:	687b      	ldr	r3, [r7, #4]
 804160c:	2201      	movs	r2, #1
 804160e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8041612:	687b      	ldr	r3, [r7, #4]
 8041614:	2200      	movs	r2, #0
 8041616:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 804161a:	2300      	movs	r3, #0
}
 804161c:	4618      	mov	r0, r3
 804161e:	3718      	adds	r7, #24
 8041620:	46bd      	mov	sp, r7
 8041622:	bd80      	pop	{r7, pc}

08041624 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8041624:	b480      	push	{r7}
 8041626:	b087      	sub	sp, #28
 8041628:	af00      	add	r7, sp, #0
 804162a:	6078      	str	r0, [r7, #4]
 804162c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 804162e:	687b      	ldr	r3, [r7, #4]
 8041630:	685b      	ldr	r3, [r3, #4]
 8041632:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8041636:	687b      	ldr	r3, [r7, #4]
 8041638:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 804163c:	2b01      	cmp	r3, #1
 804163e:	d101      	bne.n	8041644 <HAL_DMA2D_ConfigLayer+0x20>
 8041640:	2302      	movs	r3, #2
 8041642:	e079      	b.n	8041738 <HAL_DMA2D_ConfigLayer+0x114>
 8041644:	687b      	ldr	r3, [r7, #4]
 8041646:	2201      	movs	r2, #1
 8041648:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 804164c:	687b      	ldr	r3, [r7, #4]
 804164e:	2202      	movs	r2, #2
 8041650:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8041654:	683b      	ldr	r3, [r7, #0]
 8041656:	011b      	lsls	r3, r3, #4
 8041658:	3318      	adds	r3, #24
 804165a:	687a      	ldr	r2, [r7, #4]
 804165c:	4413      	add	r3, r2
 804165e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8041660:	693b      	ldr	r3, [r7, #16]
 8041662:	685a      	ldr	r2, [r3, #4]
 8041664:	693b      	ldr	r3, [r7, #16]
 8041666:	689b      	ldr	r3, [r3, #8]
 8041668:	041b      	lsls	r3, r3, #16
 804166a:	4313      	orrs	r3, r2
 804166c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 804166e:	4b35      	ldr	r3, [pc, #212]	; (8041744 <HAL_DMA2D_ConfigLayer+0x120>)
 8041670:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8041672:	693b      	ldr	r3, [r7, #16]
 8041674:	685b      	ldr	r3, [r3, #4]
 8041676:	2b0a      	cmp	r3, #10
 8041678:	d003      	beq.n	8041682 <HAL_DMA2D_ConfigLayer+0x5e>
 804167a:	693b      	ldr	r3, [r7, #16]
 804167c:	685b      	ldr	r3, [r3, #4]
 804167e:	2b09      	cmp	r3, #9
 8041680:	d107      	bne.n	8041692 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8041682:	693b      	ldr	r3, [r7, #16]
 8041684:	68db      	ldr	r3, [r3, #12]
 8041686:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 804168a:	697a      	ldr	r2, [r7, #20]
 804168c:	4313      	orrs	r3, r2
 804168e:	617b      	str	r3, [r7, #20]
 8041690:	e005      	b.n	804169e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8041692:	693b      	ldr	r3, [r7, #16]
 8041694:	68db      	ldr	r3, [r3, #12]
 8041696:	061b      	lsls	r3, r3, #24
 8041698:	697a      	ldr	r2, [r7, #20]
 804169a:	4313      	orrs	r3, r2
 804169c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 804169e:	683b      	ldr	r3, [r7, #0]
 80416a0:	2b00      	cmp	r3, #0
 80416a2:	d120      	bne.n	80416e6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80416a4:	687b      	ldr	r3, [r7, #4]
 80416a6:	681b      	ldr	r3, [r3, #0]
 80416a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80416aa:	68fb      	ldr	r3, [r7, #12]
 80416ac:	43db      	mvns	r3, r3
 80416ae:	ea02 0103 	and.w	r1, r2, r3
 80416b2:	687b      	ldr	r3, [r7, #4]
 80416b4:	681b      	ldr	r3, [r3, #0]
 80416b6:	697a      	ldr	r2, [r7, #20]
 80416b8:	430a      	orrs	r2, r1
 80416ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80416bc:	687b      	ldr	r3, [r7, #4]
 80416be:	681b      	ldr	r3, [r3, #0]
 80416c0:	693a      	ldr	r2, [r7, #16]
 80416c2:	6812      	ldr	r2, [r2, #0]
 80416c4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80416c6:	693b      	ldr	r3, [r7, #16]
 80416c8:	685b      	ldr	r3, [r3, #4]
 80416ca:	2b0a      	cmp	r3, #10
 80416cc:	d003      	beq.n	80416d6 <HAL_DMA2D_ConfigLayer+0xb2>
 80416ce:	693b      	ldr	r3, [r7, #16]
 80416d0:	685b      	ldr	r3, [r3, #4]
 80416d2:	2b09      	cmp	r3, #9
 80416d4:	d127      	bne.n	8041726 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80416d6:	693b      	ldr	r3, [r7, #16]
 80416d8:	68da      	ldr	r2, [r3, #12]
 80416da:	687b      	ldr	r3, [r7, #4]
 80416dc:	681b      	ldr	r3, [r3, #0]
 80416de:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80416e2:	629a      	str	r2, [r3, #40]	; 0x28
 80416e4:	e01f      	b.n	8041726 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80416e6:	687b      	ldr	r3, [r7, #4]
 80416e8:	681b      	ldr	r3, [r3, #0]
 80416ea:	69da      	ldr	r2, [r3, #28]
 80416ec:	68fb      	ldr	r3, [r7, #12]
 80416ee:	43db      	mvns	r3, r3
 80416f0:	ea02 0103 	and.w	r1, r2, r3
 80416f4:	687b      	ldr	r3, [r7, #4]
 80416f6:	681b      	ldr	r3, [r3, #0]
 80416f8:	697a      	ldr	r2, [r7, #20]
 80416fa:	430a      	orrs	r2, r1
 80416fc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80416fe:	687b      	ldr	r3, [r7, #4]
 8041700:	681b      	ldr	r3, [r3, #0]
 8041702:	693a      	ldr	r2, [r7, #16]
 8041704:	6812      	ldr	r2, [r2, #0]
 8041706:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8041708:	693b      	ldr	r3, [r7, #16]
 804170a:	685b      	ldr	r3, [r3, #4]
 804170c:	2b0a      	cmp	r3, #10
 804170e:	d003      	beq.n	8041718 <HAL_DMA2D_ConfigLayer+0xf4>
 8041710:	693b      	ldr	r3, [r7, #16]
 8041712:	685b      	ldr	r3, [r3, #4]
 8041714:	2b09      	cmp	r3, #9
 8041716:	d106      	bne.n	8041726 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8041718:	693b      	ldr	r3, [r7, #16]
 804171a:	68da      	ldr	r2, [r3, #12]
 804171c:	687b      	ldr	r3, [r7, #4]
 804171e:	681b      	ldr	r3, [r3, #0]
 8041720:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8041724:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8041726:	687b      	ldr	r3, [r7, #4]
 8041728:	2201      	movs	r2, #1
 804172a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 804172e:	687b      	ldr	r3, [r7, #4]
 8041730:	2200      	movs	r2, #0
 8041732:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8041736:	2300      	movs	r3, #0
}
 8041738:	4618      	mov	r0, r3
 804173a:	371c      	adds	r7, #28
 804173c:	46bd      	mov	sp, r7
 804173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041742:	4770      	bx	lr
 8041744:	ff03000f 	.word	0xff03000f

08041748 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8041748:	b480      	push	{r7}
 804174a:	b08b      	sub	sp, #44	; 0x2c
 804174c:	af00      	add	r7, sp, #0
 804174e:	60f8      	str	r0, [r7, #12]
 8041750:	60b9      	str	r1, [r7, #8]
 8041752:	607a      	str	r2, [r7, #4]
 8041754:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8041756:	68fb      	ldr	r3, [r7, #12]
 8041758:	681b      	ldr	r3, [r3, #0]
 804175a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804175c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8041760:	683b      	ldr	r3, [r7, #0]
 8041762:	041a      	lsls	r2, r3, #16
 8041764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8041766:	431a      	orrs	r2, r3
 8041768:	68fb      	ldr	r3, [r7, #12]
 804176a:	681b      	ldr	r3, [r3, #0]
 804176c:	430a      	orrs	r2, r1
 804176e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8041770:	68fb      	ldr	r3, [r7, #12]
 8041772:	681b      	ldr	r3, [r3, #0]
 8041774:	687a      	ldr	r2, [r7, #4]
 8041776:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8041778:	68fb      	ldr	r3, [r7, #12]
 804177a:	685b      	ldr	r3, [r3, #4]
 804177c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8041780:	d174      	bne.n	804186c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8041782:	68bb      	ldr	r3, [r7, #8]
 8041784:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8041788:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 804178a:	68bb      	ldr	r3, [r7, #8]
 804178c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8041790:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8041792:	68bb      	ldr	r3, [r7, #8]
 8041794:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8041798:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 804179a:	68bb      	ldr	r3, [r7, #8]
 804179c:	b2db      	uxtb	r3, r3
 804179e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80417a0:	68fb      	ldr	r3, [r7, #12]
 80417a2:	689b      	ldr	r3, [r3, #8]
 80417a4:	2b00      	cmp	r3, #0
 80417a6:	d108      	bne.n	80417ba <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80417a8:	69ba      	ldr	r2, [r7, #24]
 80417aa:	69fb      	ldr	r3, [r7, #28]
 80417ac:	431a      	orrs	r2, r3
 80417ae:	6a3b      	ldr	r3, [r7, #32]
 80417b0:	4313      	orrs	r3, r2
 80417b2:	697a      	ldr	r2, [r7, #20]
 80417b4:	4313      	orrs	r3, r2
 80417b6:	627b      	str	r3, [r7, #36]	; 0x24
 80417b8:	e053      	b.n	8041862 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80417ba:	68fb      	ldr	r3, [r7, #12]
 80417bc:	689b      	ldr	r3, [r3, #8]
 80417be:	2b01      	cmp	r3, #1
 80417c0:	d106      	bne.n	80417d0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80417c2:	69ba      	ldr	r2, [r7, #24]
 80417c4:	69fb      	ldr	r3, [r7, #28]
 80417c6:	4313      	orrs	r3, r2
 80417c8:	697a      	ldr	r2, [r7, #20]
 80417ca:	4313      	orrs	r3, r2
 80417cc:	627b      	str	r3, [r7, #36]	; 0x24
 80417ce:	e048      	b.n	8041862 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80417d0:	68fb      	ldr	r3, [r7, #12]
 80417d2:	689b      	ldr	r3, [r3, #8]
 80417d4:	2b02      	cmp	r3, #2
 80417d6:	d111      	bne.n	80417fc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80417d8:	69fb      	ldr	r3, [r7, #28]
 80417da:	0cdb      	lsrs	r3, r3, #19
 80417dc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80417de:	69bb      	ldr	r3, [r7, #24]
 80417e0:	0a9b      	lsrs	r3, r3, #10
 80417e2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80417e4:	697b      	ldr	r3, [r7, #20]
 80417e6:	08db      	lsrs	r3, r3, #3
 80417e8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80417ea:	69bb      	ldr	r3, [r7, #24]
 80417ec:	015a      	lsls	r2, r3, #5
 80417ee:	69fb      	ldr	r3, [r7, #28]
 80417f0:	02db      	lsls	r3, r3, #11
 80417f2:	4313      	orrs	r3, r2
 80417f4:	697a      	ldr	r2, [r7, #20]
 80417f6:	4313      	orrs	r3, r2
 80417f8:	627b      	str	r3, [r7, #36]	; 0x24
 80417fa:	e032      	b.n	8041862 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80417fc:	68fb      	ldr	r3, [r7, #12]
 80417fe:	689b      	ldr	r3, [r3, #8]
 8041800:	2b03      	cmp	r3, #3
 8041802:	d117      	bne.n	8041834 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8041804:	6a3b      	ldr	r3, [r7, #32]
 8041806:	0fdb      	lsrs	r3, r3, #31
 8041808:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 804180a:	69fb      	ldr	r3, [r7, #28]
 804180c:	0cdb      	lsrs	r3, r3, #19
 804180e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8041810:	69bb      	ldr	r3, [r7, #24]
 8041812:	0adb      	lsrs	r3, r3, #11
 8041814:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8041816:	697b      	ldr	r3, [r7, #20]
 8041818:	08db      	lsrs	r3, r3, #3
 804181a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 804181c:	69bb      	ldr	r3, [r7, #24]
 804181e:	015a      	lsls	r2, r3, #5
 8041820:	69fb      	ldr	r3, [r7, #28]
 8041822:	029b      	lsls	r3, r3, #10
 8041824:	431a      	orrs	r2, r3
 8041826:	6a3b      	ldr	r3, [r7, #32]
 8041828:	03db      	lsls	r3, r3, #15
 804182a:	4313      	orrs	r3, r2
 804182c:	697a      	ldr	r2, [r7, #20]
 804182e:	4313      	orrs	r3, r2
 8041830:	627b      	str	r3, [r7, #36]	; 0x24
 8041832:	e016      	b.n	8041862 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8041834:	6a3b      	ldr	r3, [r7, #32]
 8041836:	0f1b      	lsrs	r3, r3, #28
 8041838:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 804183a:	69fb      	ldr	r3, [r7, #28]
 804183c:	0d1b      	lsrs	r3, r3, #20
 804183e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8041840:	69bb      	ldr	r3, [r7, #24]
 8041842:	0b1b      	lsrs	r3, r3, #12
 8041844:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8041846:	697b      	ldr	r3, [r7, #20]
 8041848:	091b      	lsrs	r3, r3, #4
 804184a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 804184c:	69bb      	ldr	r3, [r7, #24]
 804184e:	011a      	lsls	r2, r3, #4
 8041850:	69fb      	ldr	r3, [r7, #28]
 8041852:	021b      	lsls	r3, r3, #8
 8041854:	431a      	orrs	r2, r3
 8041856:	6a3b      	ldr	r3, [r7, #32]
 8041858:	031b      	lsls	r3, r3, #12
 804185a:	4313      	orrs	r3, r2
 804185c:	697a      	ldr	r2, [r7, #20]
 804185e:	4313      	orrs	r3, r2
 8041860:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8041862:	68fb      	ldr	r3, [r7, #12]
 8041864:	681b      	ldr	r3, [r3, #0]
 8041866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8041868:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 804186a:	e003      	b.n	8041874 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 804186c:	68fb      	ldr	r3, [r7, #12]
 804186e:	681b      	ldr	r3, [r3, #0]
 8041870:	68ba      	ldr	r2, [r7, #8]
 8041872:	60da      	str	r2, [r3, #12]
}
 8041874:	bf00      	nop
 8041876:	372c      	adds	r7, #44	; 0x2c
 8041878:	46bd      	mov	sp, r7
 804187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804187e:	4770      	bx	lr

08041880 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8041880:	b480      	push	{r7}
 8041882:	b089      	sub	sp, #36	; 0x24
 8041884:	af00      	add	r7, sp, #0
 8041886:	6078      	str	r0, [r7, #4]
 8041888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 804188a:	2300      	movs	r3, #0
 804188c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 804188e:	2300      	movs	r3, #0
 8041890:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8041892:	2300      	movs	r3, #0
 8041894:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8041896:	2300      	movs	r3, #0
 8041898:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 804189a:	2300      	movs	r3, #0
 804189c:	61fb      	str	r3, [r7, #28]
 804189e:	e175      	b.n	8041b8c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80418a0:	2201      	movs	r2, #1
 80418a2:	69fb      	ldr	r3, [r7, #28]
 80418a4:	fa02 f303 	lsl.w	r3, r2, r3
 80418a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80418aa:	683b      	ldr	r3, [r7, #0]
 80418ac:	681b      	ldr	r3, [r3, #0]
 80418ae:	697a      	ldr	r2, [r7, #20]
 80418b0:	4013      	ands	r3, r2
 80418b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80418b4:	693a      	ldr	r2, [r7, #16]
 80418b6:	697b      	ldr	r3, [r7, #20]
 80418b8:	429a      	cmp	r2, r3
 80418ba:	f040 8164 	bne.w	8041b86 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80418be:	683b      	ldr	r3, [r7, #0]
 80418c0:	685b      	ldr	r3, [r3, #4]
 80418c2:	2b01      	cmp	r3, #1
 80418c4:	d00b      	beq.n	80418de <HAL_GPIO_Init+0x5e>
 80418c6:	683b      	ldr	r3, [r7, #0]
 80418c8:	685b      	ldr	r3, [r3, #4]
 80418ca:	2b02      	cmp	r3, #2
 80418cc:	d007      	beq.n	80418de <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80418ce:	683b      	ldr	r3, [r7, #0]
 80418d0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80418d2:	2b11      	cmp	r3, #17
 80418d4:	d003      	beq.n	80418de <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80418d6:	683b      	ldr	r3, [r7, #0]
 80418d8:	685b      	ldr	r3, [r3, #4]
 80418da:	2b12      	cmp	r3, #18
 80418dc:	d130      	bne.n	8041940 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80418de:	687b      	ldr	r3, [r7, #4]
 80418e0:	689b      	ldr	r3, [r3, #8]
 80418e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80418e4:	69fb      	ldr	r3, [r7, #28]
 80418e6:	005b      	lsls	r3, r3, #1
 80418e8:	2203      	movs	r2, #3
 80418ea:	fa02 f303 	lsl.w	r3, r2, r3
 80418ee:	43db      	mvns	r3, r3
 80418f0:	69ba      	ldr	r2, [r7, #24]
 80418f2:	4013      	ands	r3, r2
 80418f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80418f6:	683b      	ldr	r3, [r7, #0]
 80418f8:	68da      	ldr	r2, [r3, #12]
 80418fa:	69fb      	ldr	r3, [r7, #28]
 80418fc:	005b      	lsls	r3, r3, #1
 80418fe:	fa02 f303 	lsl.w	r3, r2, r3
 8041902:	69ba      	ldr	r2, [r7, #24]
 8041904:	4313      	orrs	r3, r2
 8041906:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8041908:	687b      	ldr	r3, [r7, #4]
 804190a:	69ba      	ldr	r2, [r7, #24]
 804190c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 804190e:	687b      	ldr	r3, [r7, #4]
 8041910:	685b      	ldr	r3, [r3, #4]
 8041912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8041914:	2201      	movs	r2, #1
 8041916:	69fb      	ldr	r3, [r7, #28]
 8041918:	fa02 f303 	lsl.w	r3, r2, r3
 804191c:	43db      	mvns	r3, r3
 804191e:	69ba      	ldr	r2, [r7, #24]
 8041920:	4013      	ands	r3, r2
 8041922:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8041924:	683b      	ldr	r3, [r7, #0]
 8041926:	685b      	ldr	r3, [r3, #4]
 8041928:	091b      	lsrs	r3, r3, #4
 804192a:	f003 0201 	and.w	r2, r3, #1
 804192e:	69fb      	ldr	r3, [r7, #28]
 8041930:	fa02 f303 	lsl.w	r3, r2, r3
 8041934:	69ba      	ldr	r2, [r7, #24]
 8041936:	4313      	orrs	r3, r2
 8041938:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 804193a:	687b      	ldr	r3, [r7, #4]
 804193c:	69ba      	ldr	r2, [r7, #24]
 804193e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8041940:	687b      	ldr	r3, [r7, #4]
 8041942:	68db      	ldr	r3, [r3, #12]
 8041944:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8041946:	69fb      	ldr	r3, [r7, #28]
 8041948:	005b      	lsls	r3, r3, #1
 804194a:	2203      	movs	r2, #3
 804194c:	fa02 f303 	lsl.w	r3, r2, r3
 8041950:	43db      	mvns	r3, r3
 8041952:	69ba      	ldr	r2, [r7, #24]
 8041954:	4013      	ands	r3, r2
 8041956:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8041958:	683b      	ldr	r3, [r7, #0]
 804195a:	689a      	ldr	r2, [r3, #8]
 804195c:	69fb      	ldr	r3, [r7, #28]
 804195e:	005b      	lsls	r3, r3, #1
 8041960:	fa02 f303 	lsl.w	r3, r2, r3
 8041964:	69ba      	ldr	r2, [r7, #24]
 8041966:	4313      	orrs	r3, r2
 8041968:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 804196a:	687b      	ldr	r3, [r7, #4]
 804196c:	69ba      	ldr	r2, [r7, #24]
 804196e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8041970:	683b      	ldr	r3, [r7, #0]
 8041972:	685b      	ldr	r3, [r3, #4]
 8041974:	2b02      	cmp	r3, #2
 8041976:	d003      	beq.n	8041980 <HAL_GPIO_Init+0x100>
 8041978:	683b      	ldr	r3, [r7, #0]
 804197a:	685b      	ldr	r3, [r3, #4]
 804197c:	2b12      	cmp	r3, #18
 804197e:	d123      	bne.n	80419c8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8041980:	69fb      	ldr	r3, [r7, #28]
 8041982:	08da      	lsrs	r2, r3, #3
 8041984:	687b      	ldr	r3, [r7, #4]
 8041986:	3208      	adds	r2, #8
 8041988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804198c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 804198e:	69fb      	ldr	r3, [r7, #28]
 8041990:	f003 0307 	and.w	r3, r3, #7
 8041994:	009b      	lsls	r3, r3, #2
 8041996:	220f      	movs	r2, #15
 8041998:	fa02 f303 	lsl.w	r3, r2, r3
 804199c:	43db      	mvns	r3, r3
 804199e:	69ba      	ldr	r2, [r7, #24]
 80419a0:	4013      	ands	r3, r2
 80419a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80419a4:	683b      	ldr	r3, [r7, #0]
 80419a6:	691a      	ldr	r2, [r3, #16]
 80419a8:	69fb      	ldr	r3, [r7, #28]
 80419aa:	f003 0307 	and.w	r3, r3, #7
 80419ae:	009b      	lsls	r3, r3, #2
 80419b0:	fa02 f303 	lsl.w	r3, r2, r3
 80419b4:	69ba      	ldr	r2, [r7, #24]
 80419b6:	4313      	orrs	r3, r2
 80419b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80419ba:	69fb      	ldr	r3, [r7, #28]
 80419bc:	08da      	lsrs	r2, r3, #3
 80419be:	687b      	ldr	r3, [r7, #4]
 80419c0:	3208      	adds	r2, #8
 80419c2:	69b9      	ldr	r1, [r7, #24]
 80419c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80419c8:	687b      	ldr	r3, [r7, #4]
 80419ca:	681b      	ldr	r3, [r3, #0]
 80419cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80419ce:	69fb      	ldr	r3, [r7, #28]
 80419d0:	005b      	lsls	r3, r3, #1
 80419d2:	2203      	movs	r2, #3
 80419d4:	fa02 f303 	lsl.w	r3, r2, r3
 80419d8:	43db      	mvns	r3, r3
 80419da:	69ba      	ldr	r2, [r7, #24]
 80419dc:	4013      	ands	r3, r2
 80419de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80419e0:	683b      	ldr	r3, [r7, #0]
 80419e2:	685b      	ldr	r3, [r3, #4]
 80419e4:	f003 0203 	and.w	r2, r3, #3
 80419e8:	69fb      	ldr	r3, [r7, #28]
 80419ea:	005b      	lsls	r3, r3, #1
 80419ec:	fa02 f303 	lsl.w	r3, r2, r3
 80419f0:	69ba      	ldr	r2, [r7, #24]
 80419f2:	4313      	orrs	r3, r2
 80419f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80419f6:	687b      	ldr	r3, [r7, #4]
 80419f8:	69ba      	ldr	r2, [r7, #24]
 80419fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80419fc:	683b      	ldr	r3, [r7, #0]
 80419fe:	685b      	ldr	r3, [r3, #4]
 8041a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041a04:	2b00      	cmp	r3, #0
 8041a06:	f000 80be 	beq.w	8041b86 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8041a0a:	4b65      	ldr	r3, [pc, #404]	; (8041ba0 <HAL_GPIO_Init+0x320>)
 8041a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041a0e:	4a64      	ldr	r2, [pc, #400]	; (8041ba0 <HAL_GPIO_Init+0x320>)
 8041a10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8041a14:	6453      	str	r3, [r2, #68]	; 0x44
 8041a16:	4b62      	ldr	r3, [pc, #392]	; (8041ba0 <HAL_GPIO_Init+0x320>)
 8041a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8041a1e:	60fb      	str	r3, [r7, #12]
 8041a20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8041a22:	4a60      	ldr	r2, [pc, #384]	; (8041ba4 <HAL_GPIO_Init+0x324>)
 8041a24:	69fb      	ldr	r3, [r7, #28]
 8041a26:	089b      	lsrs	r3, r3, #2
 8041a28:	3302      	adds	r3, #2
 8041a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8041a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8041a30:	69fb      	ldr	r3, [r7, #28]
 8041a32:	f003 0303 	and.w	r3, r3, #3
 8041a36:	009b      	lsls	r3, r3, #2
 8041a38:	220f      	movs	r2, #15
 8041a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8041a3e:	43db      	mvns	r3, r3
 8041a40:	69ba      	ldr	r2, [r7, #24]
 8041a42:	4013      	ands	r3, r2
 8041a44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8041a46:	687b      	ldr	r3, [r7, #4]
 8041a48:	4a57      	ldr	r2, [pc, #348]	; (8041ba8 <HAL_GPIO_Init+0x328>)
 8041a4a:	4293      	cmp	r3, r2
 8041a4c:	d037      	beq.n	8041abe <HAL_GPIO_Init+0x23e>
 8041a4e:	687b      	ldr	r3, [r7, #4]
 8041a50:	4a56      	ldr	r2, [pc, #344]	; (8041bac <HAL_GPIO_Init+0x32c>)
 8041a52:	4293      	cmp	r3, r2
 8041a54:	d031      	beq.n	8041aba <HAL_GPIO_Init+0x23a>
 8041a56:	687b      	ldr	r3, [r7, #4]
 8041a58:	4a55      	ldr	r2, [pc, #340]	; (8041bb0 <HAL_GPIO_Init+0x330>)
 8041a5a:	4293      	cmp	r3, r2
 8041a5c:	d02b      	beq.n	8041ab6 <HAL_GPIO_Init+0x236>
 8041a5e:	687b      	ldr	r3, [r7, #4]
 8041a60:	4a54      	ldr	r2, [pc, #336]	; (8041bb4 <HAL_GPIO_Init+0x334>)
 8041a62:	4293      	cmp	r3, r2
 8041a64:	d025      	beq.n	8041ab2 <HAL_GPIO_Init+0x232>
 8041a66:	687b      	ldr	r3, [r7, #4]
 8041a68:	4a53      	ldr	r2, [pc, #332]	; (8041bb8 <HAL_GPIO_Init+0x338>)
 8041a6a:	4293      	cmp	r3, r2
 8041a6c:	d01f      	beq.n	8041aae <HAL_GPIO_Init+0x22e>
 8041a6e:	687b      	ldr	r3, [r7, #4]
 8041a70:	4a52      	ldr	r2, [pc, #328]	; (8041bbc <HAL_GPIO_Init+0x33c>)
 8041a72:	4293      	cmp	r3, r2
 8041a74:	d019      	beq.n	8041aaa <HAL_GPIO_Init+0x22a>
 8041a76:	687b      	ldr	r3, [r7, #4]
 8041a78:	4a51      	ldr	r2, [pc, #324]	; (8041bc0 <HAL_GPIO_Init+0x340>)
 8041a7a:	4293      	cmp	r3, r2
 8041a7c:	d013      	beq.n	8041aa6 <HAL_GPIO_Init+0x226>
 8041a7e:	687b      	ldr	r3, [r7, #4]
 8041a80:	4a50      	ldr	r2, [pc, #320]	; (8041bc4 <HAL_GPIO_Init+0x344>)
 8041a82:	4293      	cmp	r3, r2
 8041a84:	d00d      	beq.n	8041aa2 <HAL_GPIO_Init+0x222>
 8041a86:	687b      	ldr	r3, [r7, #4]
 8041a88:	4a4f      	ldr	r2, [pc, #316]	; (8041bc8 <HAL_GPIO_Init+0x348>)
 8041a8a:	4293      	cmp	r3, r2
 8041a8c:	d007      	beq.n	8041a9e <HAL_GPIO_Init+0x21e>
 8041a8e:	687b      	ldr	r3, [r7, #4]
 8041a90:	4a4e      	ldr	r2, [pc, #312]	; (8041bcc <HAL_GPIO_Init+0x34c>)
 8041a92:	4293      	cmp	r3, r2
 8041a94:	d101      	bne.n	8041a9a <HAL_GPIO_Init+0x21a>
 8041a96:	2309      	movs	r3, #9
 8041a98:	e012      	b.n	8041ac0 <HAL_GPIO_Init+0x240>
 8041a9a:	230a      	movs	r3, #10
 8041a9c:	e010      	b.n	8041ac0 <HAL_GPIO_Init+0x240>
 8041a9e:	2308      	movs	r3, #8
 8041aa0:	e00e      	b.n	8041ac0 <HAL_GPIO_Init+0x240>
 8041aa2:	2307      	movs	r3, #7
 8041aa4:	e00c      	b.n	8041ac0 <HAL_GPIO_Init+0x240>
 8041aa6:	2306      	movs	r3, #6
 8041aa8:	e00a      	b.n	8041ac0 <HAL_GPIO_Init+0x240>
 8041aaa:	2305      	movs	r3, #5
 8041aac:	e008      	b.n	8041ac0 <HAL_GPIO_Init+0x240>
 8041aae:	2304      	movs	r3, #4
 8041ab0:	e006      	b.n	8041ac0 <HAL_GPIO_Init+0x240>
 8041ab2:	2303      	movs	r3, #3
 8041ab4:	e004      	b.n	8041ac0 <HAL_GPIO_Init+0x240>
 8041ab6:	2302      	movs	r3, #2
 8041ab8:	e002      	b.n	8041ac0 <HAL_GPIO_Init+0x240>
 8041aba:	2301      	movs	r3, #1
 8041abc:	e000      	b.n	8041ac0 <HAL_GPIO_Init+0x240>
 8041abe:	2300      	movs	r3, #0
 8041ac0:	69fa      	ldr	r2, [r7, #28]
 8041ac2:	f002 0203 	and.w	r2, r2, #3
 8041ac6:	0092      	lsls	r2, r2, #2
 8041ac8:	4093      	lsls	r3, r2
 8041aca:	69ba      	ldr	r2, [r7, #24]
 8041acc:	4313      	orrs	r3, r2
 8041ace:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8041ad0:	4934      	ldr	r1, [pc, #208]	; (8041ba4 <HAL_GPIO_Init+0x324>)
 8041ad2:	69fb      	ldr	r3, [r7, #28]
 8041ad4:	089b      	lsrs	r3, r3, #2
 8041ad6:	3302      	adds	r3, #2
 8041ad8:	69ba      	ldr	r2, [r7, #24]
 8041ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8041ade:	4b3c      	ldr	r3, [pc, #240]	; (8041bd0 <HAL_GPIO_Init+0x350>)
 8041ae0:	681b      	ldr	r3, [r3, #0]
 8041ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8041ae4:	693b      	ldr	r3, [r7, #16]
 8041ae6:	43db      	mvns	r3, r3
 8041ae8:	69ba      	ldr	r2, [r7, #24]
 8041aea:	4013      	ands	r3, r2
 8041aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8041aee:	683b      	ldr	r3, [r7, #0]
 8041af0:	685b      	ldr	r3, [r3, #4]
 8041af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8041af6:	2b00      	cmp	r3, #0
 8041af8:	d003      	beq.n	8041b02 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8041afa:	69ba      	ldr	r2, [r7, #24]
 8041afc:	693b      	ldr	r3, [r7, #16]
 8041afe:	4313      	orrs	r3, r2
 8041b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8041b02:	4a33      	ldr	r2, [pc, #204]	; (8041bd0 <HAL_GPIO_Init+0x350>)
 8041b04:	69bb      	ldr	r3, [r7, #24]
 8041b06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8041b08:	4b31      	ldr	r3, [pc, #196]	; (8041bd0 <HAL_GPIO_Init+0x350>)
 8041b0a:	685b      	ldr	r3, [r3, #4]
 8041b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8041b0e:	693b      	ldr	r3, [r7, #16]
 8041b10:	43db      	mvns	r3, r3
 8041b12:	69ba      	ldr	r2, [r7, #24]
 8041b14:	4013      	ands	r3, r2
 8041b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8041b18:	683b      	ldr	r3, [r7, #0]
 8041b1a:	685b      	ldr	r3, [r3, #4]
 8041b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041b20:	2b00      	cmp	r3, #0
 8041b22:	d003      	beq.n	8041b2c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8041b24:	69ba      	ldr	r2, [r7, #24]
 8041b26:	693b      	ldr	r3, [r7, #16]
 8041b28:	4313      	orrs	r3, r2
 8041b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8041b2c:	4a28      	ldr	r2, [pc, #160]	; (8041bd0 <HAL_GPIO_Init+0x350>)
 8041b2e:	69bb      	ldr	r3, [r7, #24]
 8041b30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8041b32:	4b27      	ldr	r3, [pc, #156]	; (8041bd0 <HAL_GPIO_Init+0x350>)
 8041b34:	689b      	ldr	r3, [r3, #8]
 8041b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8041b38:	693b      	ldr	r3, [r7, #16]
 8041b3a:	43db      	mvns	r3, r3
 8041b3c:	69ba      	ldr	r2, [r7, #24]
 8041b3e:	4013      	ands	r3, r2
 8041b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8041b42:	683b      	ldr	r3, [r7, #0]
 8041b44:	685b      	ldr	r3, [r3, #4]
 8041b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8041b4a:	2b00      	cmp	r3, #0
 8041b4c:	d003      	beq.n	8041b56 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8041b4e:	69ba      	ldr	r2, [r7, #24]
 8041b50:	693b      	ldr	r3, [r7, #16]
 8041b52:	4313      	orrs	r3, r2
 8041b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8041b56:	4a1e      	ldr	r2, [pc, #120]	; (8041bd0 <HAL_GPIO_Init+0x350>)
 8041b58:	69bb      	ldr	r3, [r7, #24]
 8041b5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8041b5c:	4b1c      	ldr	r3, [pc, #112]	; (8041bd0 <HAL_GPIO_Init+0x350>)
 8041b5e:	68db      	ldr	r3, [r3, #12]
 8041b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8041b62:	693b      	ldr	r3, [r7, #16]
 8041b64:	43db      	mvns	r3, r3
 8041b66:	69ba      	ldr	r2, [r7, #24]
 8041b68:	4013      	ands	r3, r2
 8041b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8041b6c:	683b      	ldr	r3, [r7, #0]
 8041b6e:	685b      	ldr	r3, [r3, #4]
 8041b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8041b74:	2b00      	cmp	r3, #0
 8041b76:	d003      	beq.n	8041b80 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8041b78:	69ba      	ldr	r2, [r7, #24]
 8041b7a:	693b      	ldr	r3, [r7, #16]
 8041b7c:	4313      	orrs	r3, r2
 8041b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8041b80:	4a13      	ldr	r2, [pc, #76]	; (8041bd0 <HAL_GPIO_Init+0x350>)
 8041b82:	69bb      	ldr	r3, [r7, #24]
 8041b84:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8041b86:	69fb      	ldr	r3, [r7, #28]
 8041b88:	3301      	adds	r3, #1
 8041b8a:	61fb      	str	r3, [r7, #28]
 8041b8c:	69fb      	ldr	r3, [r7, #28]
 8041b8e:	2b0f      	cmp	r3, #15
 8041b90:	f67f ae86 	bls.w	80418a0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8041b94:	bf00      	nop
 8041b96:	3724      	adds	r7, #36	; 0x24
 8041b98:	46bd      	mov	sp, r7
 8041b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041b9e:	4770      	bx	lr
 8041ba0:	40023800 	.word	0x40023800
 8041ba4:	40013800 	.word	0x40013800
 8041ba8:	40020000 	.word	0x40020000
 8041bac:	40020400 	.word	0x40020400
 8041bb0:	40020800 	.word	0x40020800
 8041bb4:	40020c00 	.word	0x40020c00
 8041bb8:	40021000 	.word	0x40021000
 8041bbc:	40021400 	.word	0x40021400
 8041bc0:	40021800 	.word	0x40021800
 8041bc4:	40021c00 	.word	0x40021c00
 8041bc8:	40022000 	.word	0x40022000
 8041bcc:	40022400 	.word	0x40022400
 8041bd0:	40013c00 	.word	0x40013c00

08041bd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8041bd4:	b480      	push	{r7}
 8041bd6:	b083      	sub	sp, #12
 8041bd8:	af00      	add	r7, sp, #0
 8041bda:	6078      	str	r0, [r7, #4]
 8041bdc:	460b      	mov	r3, r1
 8041bde:	807b      	strh	r3, [r7, #2]
 8041be0:	4613      	mov	r3, r2
 8041be2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8041be4:	787b      	ldrb	r3, [r7, #1]
 8041be6:	2b00      	cmp	r3, #0
 8041be8:	d003      	beq.n	8041bf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8041bea:	887a      	ldrh	r2, [r7, #2]
 8041bec:	687b      	ldr	r3, [r7, #4]
 8041bee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8041bf0:	e003      	b.n	8041bfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8041bf2:	887b      	ldrh	r3, [r7, #2]
 8041bf4:	041a      	lsls	r2, r3, #16
 8041bf6:	687b      	ldr	r3, [r7, #4]
 8041bf8:	619a      	str	r2, [r3, #24]
}
 8041bfa:	bf00      	nop
 8041bfc:	370c      	adds	r7, #12
 8041bfe:	46bd      	mov	sp, r7
 8041c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041c04:	4770      	bx	lr
	...

08041c08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8041c08:	b580      	push	{r7, lr}
 8041c0a:	b082      	sub	sp, #8
 8041c0c:	af00      	add	r7, sp, #0
 8041c0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8041c10:	687b      	ldr	r3, [r7, #4]
 8041c12:	2b00      	cmp	r3, #0
 8041c14:	d101      	bne.n	8041c1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8041c16:	2301      	movs	r3, #1
 8041c18:	e07f      	b.n	8041d1a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8041c1a:	687b      	ldr	r3, [r7, #4]
 8041c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8041c20:	b2db      	uxtb	r3, r3
 8041c22:	2b00      	cmp	r3, #0
 8041c24:	d106      	bne.n	8041c34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8041c26:	687b      	ldr	r3, [r7, #4]
 8041c28:	2200      	movs	r2, #0
 8041c2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8041c2e:	6878      	ldr	r0, [r7, #4]
 8041c30:	f000 f8a9 	bl	8041d86 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8041c34:	687b      	ldr	r3, [r7, #4]
 8041c36:	2224      	movs	r2, #36	; 0x24
 8041c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8041c3c:	687b      	ldr	r3, [r7, #4]
 8041c3e:	681b      	ldr	r3, [r3, #0]
 8041c40:	681a      	ldr	r2, [r3, #0]
 8041c42:	687b      	ldr	r3, [r7, #4]
 8041c44:	681b      	ldr	r3, [r3, #0]
 8041c46:	f022 0201 	bic.w	r2, r2, #1
 8041c4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8041c4c:	687b      	ldr	r3, [r7, #4]
 8041c4e:	685a      	ldr	r2, [r3, #4]
 8041c50:	687b      	ldr	r3, [r7, #4]
 8041c52:	681b      	ldr	r3, [r3, #0]
 8041c54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8041c58:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8041c5a:	687b      	ldr	r3, [r7, #4]
 8041c5c:	681b      	ldr	r3, [r3, #0]
 8041c5e:	689a      	ldr	r2, [r3, #8]
 8041c60:	687b      	ldr	r3, [r7, #4]
 8041c62:	681b      	ldr	r3, [r3, #0]
 8041c64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8041c68:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8041c6a:	687b      	ldr	r3, [r7, #4]
 8041c6c:	68db      	ldr	r3, [r3, #12]
 8041c6e:	2b01      	cmp	r3, #1
 8041c70:	d107      	bne.n	8041c82 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8041c72:	687b      	ldr	r3, [r7, #4]
 8041c74:	689a      	ldr	r2, [r3, #8]
 8041c76:	687b      	ldr	r3, [r7, #4]
 8041c78:	681b      	ldr	r3, [r3, #0]
 8041c7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8041c7e:	609a      	str	r2, [r3, #8]
 8041c80:	e006      	b.n	8041c90 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8041c82:	687b      	ldr	r3, [r7, #4]
 8041c84:	689a      	ldr	r2, [r3, #8]
 8041c86:	687b      	ldr	r3, [r7, #4]
 8041c88:	681b      	ldr	r3, [r3, #0]
 8041c8a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8041c8e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8041c90:	687b      	ldr	r3, [r7, #4]
 8041c92:	68db      	ldr	r3, [r3, #12]
 8041c94:	2b02      	cmp	r3, #2
 8041c96:	d104      	bne.n	8041ca2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8041c98:	687b      	ldr	r3, [r7, #4]
 8041c9a:	681b      	ldr	r3, [r3, #0]
 8041c9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8041ca0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8041ca2:	687b      	ldr	r3, [r7, #4]
 8041ca4:	681b      	ldr	r3, [r3, #0]
 8041ca6:	6859      	ldr	r1, [r3, #4]
 8041ca8:	687b      	ldr	r3, [r7, #4]
 8041caa:	681a      	ldr	r2, [r3, #0]
 8041cac:	4b1d      	ldr	r3, [pc, #116]	; (8041d24 <HAL_I2C_Init+0x11c>)
 8041cae:	430b      	orrs	r3, r1
 8041cb0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8041cb2:	687b      	ldr	r3, [r7, #4]
 8041cb4:	681b      	ldr	r3, [r3, #0]
 8041cb6:	68da      	ldr	r2, [r3, #12]
 8041cb8:	687b      	ldr	r3, [r7, #4]
 8041cba:	681b      	ldr	r3, [r3, #0]
 8041cbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8041cc0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8041cc2:	687b      	ldr	r3, [r7, #4]
 8041cc4:	691a      	ldr	r2, [r3, #16]
 8041cc6:	687b      	ldr	r3, [r7, #4]
 8041cc8:	695b      	ldr	r3, [r3, #20]
 8041cca:	ea42 0103 	orr.w	r1, r2, r3
 8041cce:	687b      	ldr	r3, [r7, #4]
 8041cd0:	699b      	ldr	r3, [r3, #24]
 8041cd2:	021a      	lsls	r2, r3, #8
 8041cd4:	687b      	ldr	r3, [r7, #4]
 8041cd6:	681b      	ldr	r3, [r3, #0]
 8041cd8:	430a      	orrs	r2, r1
 8041cda:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8041cdc:	687b      	ldr	r3, [r7, #4]
 8041cde:	69d9      	ldr	r1, [r3, #28]
 8041ce0:	687b      	ldr	r3, [r7, #4]
 8041ce2:	6a1a      	ldr	r2, [r3, #32]
 8041ce4:	687b      	ldr	r3, [r7, #4]
 8041ce6:	681b      	ldr	r3, [r3, #0]
 8041ce8:	430a      	orrs	r2, r1
 8041cea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8041cec:	687b      	ldr	r3, [r7, #4]
 8041cee:	681b      	ldr	r3, [r3, #0]
 8041cf0:	681a      	ldr	r2, [r3, #0]
 8041cf2:	687b      	ldr	r3, [r7, #4]
 8041cf4:	681b      	ldr	r3, [r3, #0]
 8041cf6:	f042 0201 	orr.w	r2, r2, #1
 8041cfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8041cfc:	687b      	ldr	r3, [r7, #4]
 8041cfe:	2200      	movs	r2, #0
 8041d00:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8041d02:	687b      	ldr	r3, [r7, #4]
 8041d04:	2220      	movs	r2, #32
 8041d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8041d0a:	687b      	ldr	r3, [r7, #4]
 8041d0c:	2200      	movs	r2, #0
 8041d0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8041d10:	687b      	ldr	r3, [r7, #4]
 8041d12:	2200      	movs	r2, #0
 8041d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8041d18:	2300      	movs	r3, #0
}
 8041d1a:	4618      	mov	r0, r3
 8041d1c:	3708      	adds	r7, #8
 8041d1e:	46bd      	mov	sp, r7
 8041d20:	bd80      	pop	{r7, pc}
 8041d22:	bf00      	nop
 8041d24:	02008000 	.word	0x02008000

08041d28 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8041d28:	b580      	push	{r7, lr}
 8041d2a:	b082      	sub	sp, #8
 8041d2c:	af00      	add	r7, sp, #0
 8041d2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8041d30:	687b      	ldr	r3, [r7, #4]
 8041d32:	2b00      	cmp	r3, #0
 8041d34:	d101      	bne.n	8041d3a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8041d36:	2301      	movs	r3, #1
 8041d38:	e021      	b.n	8041d7e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8041d3a:	687b      	ldr	r3, [r7, #4]
 8041d3c:	2224      	movs	r2, #36	; 0x24
 8041d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8041d42:	687b      	ldr	r3, [r7, #4]
 8041d44:	681b      	ldr	r3, [r3, #0]
 8041d46:	681a      	ldr	r2, [r3, #0]
 8041d48:	687b      	ldr	r3, [r7, #4]
 8041d4a:	681b      	ldr	r3, [r3, #0]
 8041d4c:	f022 0201 	bic.w	r2, r2, #1
 8041d50:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8041d52:	6878      	ldr	r0, [r7, #4]
 8041d54:	f000 f821 	bl	8041d9a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8041d58:	687b      	ldr	r3, [r7, #4]
 8041d5a:	2200      	movs	r2, #0
 8041d5c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8041d5e:	687b      	ldr	r3, [r7, #4]
 8041d60:	2200      	movs	r2, #0
 8041d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8041d66:	687b      	ldr	r3, [r7, #4]
 8041d68:	2200      	movs	r2, #0
 8041d6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8041d6c:	687b      	ldr	r3, [r7, #4]
 8041d6e:	2200      	movs	r2, #0
 8041d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8041d74:	687b      	ldr	r3, [r7, #4]
 8041d76:	2200      	movs	r2, #0
 8041d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8041d7c:	2300      	movs	r3, #0
}
 8041d7e:	4618      	mov	r0, r3
 8041d80:	3708      	adds	r7, #8
 8041d82:	46bd      	mov	sp, r7
 8041d84:	bd80      	pop	{r7, pc}

08041d86 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8041d86:	b480      	push	{r7}
 8041d88:	b083      	sub	sp, #12
 8041d8a:	af00      	add	r7, sp, #0
 8041d8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8041d8e:	bf00      	nop
 8041d90:	370c      	adds	r7, #12
 8041d92:	46bd      	mov	sp, r7
 8041d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041d98:	4770      	bx	lr

08041d9a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8041d9a:	b480      	push	{r7}
 8041d9c:	b083      	sub	sp, #12
 8041d9e:	af00      	add	r7, sp, #0
 8041da0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8041da2:	bf00      	nop
 8041da4:	370c      	adds	r7, #12
 8041da6:	46bd      	mov	sp, r7
 8041da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041dac:	4770      	bx	lr
	...

08041db0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8041db0:	b580      	push	{r7, lr}
 8041db2:	b088      	sub	sp, #32
 8041db4:	af02      	add	r7, sp, #8
 8041db6:	60f8      	str	r0, [r7, #12]
 8041db8:	4608      	mov	r0, r1
 8041dba:	4611      	mov	r1, r2
 8041dbc:	461a      	mov	r2, r3
 8041dbe:	4603      	mov	r3, r0
 8041dc0:	817b      	strh	r3, [r7, #10]
 8041dc2:	460b      	mov	r3, r1
 8041dc4:	813b      	strh	r3, [r7, #8]
 8041dc6:	4613      	mov	r3, r2
 8041dc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8041dca:	68fb      	ldr	r3, [r7, #12]
 8041dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8041dd0:	b2db      	uxtb	r3, r3
 8041dd2:	2b20      	cmp	r3, #32
 8041dd4:	f040 80f9 	bne.w	8041fca <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8041dd8:	6a3b      	ldr	r3, [r7, #32]
 8041dda:	2b00      	cmp	r3, #0
 8041ddc:	d002      	beq.n	8041de4 <HAL_I2C_Mem_Write+0x34>
 8041dde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8041de0:	2b00      	cmp	r3, #0
 8041de2:	d105      	bne.n	8041df0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8041de4:	68fb      	ldr	r3, [r7, #12]
 8041de6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8041dea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8041dec:	2301      	movs	r3, #1
 8041dee:	e0ed      	b.n	8041fcc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8041df0:	68fb      	ldr	r3, [r7, #12]
 8041df2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8041df6:	2b01      	cmp	r3, #1
 8041df8:	d101      	bne.n	8041dfe <HAL_I2C_Mem_Write+0x4e>
 8041dfa:	2302      	movs	r3, #2
 8041dfc:	e0e6      	b.n	8041fcc <HAL_I2C_Mem_Write+0x21c>
 8041dfe:	68fb      	ldr	r3, [r7, #12]
 8041e00:	2201      	movs	r2, #1
 8041e02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8041e06:	f7fe fec9 	bl	8040b9c <HAL_GetTick>
 8041e0a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8041e0c:	697b      	ldr	r3, [r7, #20]
 8041e0e:	9300      	str	r3, [sp, #0]
 8041e10:	2319      	movs	r3, #25
 8041e12:	2201      	movs	r2, #1
 8041e14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8041e18:	68f8      	ldr	r0, [r7, #12]
 8041e1a:	f000 fad1 	bl	80423c0 <I2C_WaitOnFlagUntilTimeout>
 8041e1e:	4603      	mov	r3, r0
 8041e20:	2b00      	cmp	r3, #0
 8041e22:	d001      	beq.n	8041e28 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8041e24:	2301      	movs	r3, #1
 8041e26:	e0d1      	b.n	8041fcc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8041e28:	68fb      	ldr	r3, [r7, #12]
 8041e2a:	2221      	movs	r2, #33	; 0x21
 8041e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8041e30:	68fb      	ldr	r3, [r7, #12]
 8041e32:	2240      	movs	r2, #64	; 0x40
 8041e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8041e38:	68fb      	ldr	r3, [r7, #12]
 8041e3a:	2200      	movs	r2, #0
 8041e3c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8041e3e:	68fb      	ldr	r3, [r7, #12]
 8041e40:	6a3a      	ldr	r2, [r7, #32]
 8041e42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8041e44:	68fb      	ldr	r3, [r7, #12]
 8041e46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8041e48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8041e4a:	68fb      	ldr	r3, [r7, #12]
 8041e4c:	2200      	movs	r2, #0
 8041e4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8041e50:	88f8      	ldrh	r0, [r7, #6]
 8041e52:	893a      	ldrh	r2, [r7, #8]
 8041e54:	8979      	ldrh	r1, [r7, #10]
 8041e56:	697b      	ldr	r3, [r7, #20]
 8041e58:	9301      	str	r3, [sp, #4]
 8041e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8041e5c:	9300      	str	r3, [sp, #0]
 8041e5e:	4603      	mov	r3, r0
 8041e60:	68f8      	ldr	r0, [r7, #12]
 8041e62:	f000 f9e1 	bl	8042228 <I2C_RequestMemoryWrite>
 8041e66:	4603      	mov	r3, r0
 8041e68:	2b00      	cmp	r3, #0
 8041e6a:	d005      	beq.n	8041e78 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8041e6c:	68fb      	ldr	r3, [r7, #12]
 8041e6e:	2200      	movs	r2, #0
 8041e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8041e74:	2301      	movs	r3, #1
 8041e76:	e0a9      	b.n	8041fcc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8041e78:	68fb      	ldr	r3, [r7, #12]
 8041e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8041e7c:	b29b      	uxth	r3, r3
 8041e7e:	2bff      	cmp	r3, #255	; 0xff
 8041e80:	d90e      	bls.n	8041ea0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8041e82:	68fb      	ldr	r3, [r7, #12]
 8041e84:	22ff      	movs	r2, #255	; 0xff
 8041e86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8041e88:	68fb      	ldr	r3, [r7, #12]
 8041e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8041e8c:	b2da      	uxtb	r2, r3
 8041e8e:	8979      	ldrh	r1, [r7, #10]
 8041e90:	2300      	movs	r3, #0
 8041e92:	9300      	str	r3, [sp, #0]
 8041e94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8041e98:	68f8      	ldr	r0, [r7, #12]
 8041e9a:	f000 fbb3 	bl	8042604 <I2C_TransferConfig>
 8041e9e:	e00f      	b.n	8041ec0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8041ea0:	68fb      	ldr	r3, [r7, #12]
 8041ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8041ea4:	b29a      	uxth	r2, r3
 8041ea6:	68fb      	ldr	r3, [r7, #12]
 8041ea8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8041eaa:	68fb      	ldr	r3, [r7, #12]
 8041eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8041eae:	b2da      	uxtb	r2, r3
 8041eb0:	8979      	ldrh	r1, [r7, #10]
 8041eb2:	2300      	movs	r3, #0
 8041eb4:	9300      	str	r3, [sp, #0]
 8041eb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8041eba:	68f8      	ldr	r0, [r7, #12]
 8041ebc:	f000 fba2 	bl	8042604 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8041ec0:	697a      	ldr	r2, [r7, #20]
 8041ec2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8041ec4:	68f8      	ldr	r0, [r7, #12]
 8041ec6:	f000 fabb 	bl	8042440 <I2C_WaitOnTXISFlagUntilTimeout>
 8041eca:	4603      	mov	r3, r0
 8041ecc:	2b00      	cmp	r3, #0
 8041ece:	d001      	beq.n	8041ed4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8041ed0:	2301      	movs	r3, #1
 8041ed2:	e07b      	b.n	8041fcc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8041ed4:	68fb      	ldr	r3, [r7, #12]
 8041ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041ed8:	781a      	ldrb	r2, [r3, #0]
 8041eda:	68fb      	ldr	r3, [r7, #12]
 8041edc:	681b      	ldr	r3, [r3, #0]
 8041ede:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8041ee0:	68fb      	ldr	r3, [r7, #12]
 8041ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041ee4:	1c5a      	adds	r2, r3, #1
 8041ee6:	68fb      	ldr	r3, [r7, #12]
 8041ee8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8041eea:	68fb      	ldr	r3, [r7, #12]
 8041eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8041eee:	b29b      	uxth	r3, r3
 8041ef0:	3b01      	subs	r3, #1
 8041ef2:	b29a      	uxth	r2, r3
 8041ef4:	68fb      	ldr	r3, [r7, #12]
 8041ef6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8041ef8:	68fb      	ldr	r3, [r7, #12]
 8041efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8041efc:	3b01      	subs	r3, #1
 8041efe:	b29a      	uxth	r2, r3
 8041f00:	68fb      	ldr	r3, [r7, #12]
 8041f02:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8041f04:	68fb      	ldr	r3, [r7, #12]
 8041f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8041f08:	b29b      	uxth	r3, r3
 8041f0a:	2b00      	cmp	r3, #0
 8041f0c:	d034      	beq.n	8041f78 <HAL_I2C_Mem_Write+0x1c8>
 8041f0e:	68fb      	ldr	r3, [r7, #12]
 8041f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8041f12:	2b00      	cmp	r3, #0
 8041f14:	d130      	bne.n	8041f78 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8041f16:	697b      	ldr	r3, [r7, #20]
 8041f18:	9300      	str	r3, [sp, #0]
 8041f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8041f1c:	2200      	movs	r2, #0
 8041f1e:	2180      	movs	r1, #128	; 0x80
 8041f20:	68f8      	ldr	r0, [r7, #12]
 8041f22:	f000 fa4d 	bl	80423c0 <I2C_WaitOnFlagUntilTimeout>
 8041f26:	4603      	mov	r3, r0
 8041f28:	2b00      	cmp	r3, #0
 8041f2a:	d001      	beq.n	8041f30 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8041f2c:	2301      	movs	r3, #1
 8041f2e:	e04d      	b.n	8041fcc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8041f30:	68fb      	ldr	r3, [r7, #12]
 8041f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8041f34:	b29b      	uxth	r3, r3
 8041f36:	2bff      	cmp	r3, #255	; 0xff
 8041f38:	d90e      	bls.n	8041f58 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8041f3a:	68fb      	ldr	r3, [r7, #12]
 8041f3c:	22ff      	movs	r2, #255	; 0xff
 8041f3e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8041f40:	68fb      	ldr	r3, [r7, #12]
 8041f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8041f44:	b2da      	uxtb	r2, r3
 8041f46:	8979      	ldrh	r1, [r7, #10]
 8041f48:	2300      	movs	r3, #0
 8041f4a:	9300      	str	r3, [sp, #0]
 8041f4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8041f50:	68f8      	ldr	r0, [r7, #12]
 8041f52:	f000 fb57 	bl	8042604 <I2C_TransferConfig>
 8041f56:	e00f      	b.n	8041f78 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8041f58:	68fb      	ldr	r3, [r7, #12]
 8041f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8041f5c:	b29a      	uxth	r2, r3
 8041f5e:	68fb      	ldr	r3, [r7, #12]
 8041f60:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8041f62:	68fb      	ldr	r3, [r7, #12]
 8041f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8041f66:	b2da      	uxtb	r2, r3
 8041f68:	8979      	ldrh	r1, [r7, #10]
 8041f6a:	2300      	movs	r3, #0
 8041f6c:	9300      	str	r3, [sp, #0]
 8041f6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8041f72:	68f8      	ldr	r0, [r7, #12]
 8041f74:	f000 fb46 	bl	8042604 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8041f78:	68fb      	ldr	r3, [r7, #12]
 8041f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8041f7c:	b29b      	uxth	r3, r3
 8041f7e:	2b00      	cmp	r3, #0
 8041f80:	d19e      	bne.n	8041ec0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8041f82:	697a      	ldr	r2, [r7, #20]
 8041f84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8041f86:	68f8      	ldr	r0, [r7, #12]
 8041f88:	f000 fa9a 	bl	80424c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8041f8c:	4603      	mov	r3, r0
 8041f8e:	2b00      	cmp	r3, #0
 8041f90:	d001      	beq.n	8041f96 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8041f92:	2301      	movs	r3, #1
 8041f94:	e01a      	b.n	8041fcc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8041f96:	68fb      	ldr	r3, [r7, #12]
 8041f98:	681b      	ldr	r3, [r3, #0]
 8041f9a:	2220      	movs	r2, #32
 8041f9c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8041f9e:	68fb      	ldr	r3, [r7, #12]
 8041fa0:	681b      	ldr	r3, [r3, #0]
 8041fa2:	6859      	ldr	r1, [r3, #4]
 8041fa4:	68fb      	ldr	r3, [r7, #12]
 8041fa6:	681a      	ldr	r2, [r3, #0]
 8041fa8:	4b0a      	ldr	r3, [pc, #40]	; (8041fd4 <HAL_I2C_Mem_Write+0x224>)
 8041faa:	400b      	ands	r3, r1
 8041fac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8041fae:	68fb      	ldr	r3, [r7, #12]
 8041fb0:	2220      	movs	r2, #32
 8041fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8041fb6:	68fb      	ldr	r3, [r7, #12]
 8041fb8:	2200      	movs	r2, #0
 8041fba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8041fbe:	68fb      	ldr	r3, [r7, #12]
 8041fc0:	2200      	movs	r2, #0
 8041fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8041fc6:	2300      	movs	r3, #0
 8041fc8:	e000      	b.n	8041fcc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8041fca:	2302      	movs	r3, #2
  }
}
 8041fcc:	4618      	mov	r0, r3
 8041fce:	3718      	adds	r7, #24
 8041fd0:	46bd      	mov	sp, r7
 8041fd2:	bd80      	pop	{r7, pc}
 8041fd4:	fe00e800 	.word	0xfe00e800

08041fd8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8041fd8:	b580      	push	{r7, lr}
 8041fda:	b088      	sub	sp, #32
 8041fdc:	af02      	add	r7, sp, #8
 8041fde:	60f8      	str	r0, [r7, #12]
 8041fe0:	4608      	mov	r0, r1
 8041fe2:	4611      	mov	r1, r2
 8041fe4:	461a      	mov	r2, r3
 8041fe6:	4603      	mov	r3, r0
 8041fe8:	817b      	strh	r3, [r7, #10]
 8041fea:	460b      	mov	r3, r1
 8041fec:	813b      	strh	r3, [r7, #8]
 8041fee:	4613      	mov	r3, r2
 8041ff0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8041ff2:	68fb      	ldr	r3, [r7, #12]
 8041ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8041ff8:	b2db      	uxtb	r3, r3
 8041ffa:	2b20      	cmp	r3, #32
 8041ffc:	f040 80fd 	bne.w	80421fa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8042000:	6a3b      	ldr	r3, [r7, #32]
 8042002:	2b00      	cmp	r3, #0
 8042004:	d002      	beq.n	804200c <HAL_I2C_Mem_Read+0x34>
 8042006:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8042008:	2b00      	cmp	r3, #0
 804200a:	d105      	bne.n	8042018 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 804200c:	68fb      	ldr	r3, [r7, #12]
 804200e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8042012:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8042014:	2301      	movs	r3, #1
 8042016:	e0f1      	b.n	80421fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8042018:	68fb      	ldr	r3, [r7, #12]
 804201a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 804201e:	2b01      	cmp	r3, #1
 8042020:	d101      	bne.n	8042026 <HAL_I2C_Mem_Read+0x4e>
 8042022:	2302      	movs	r3, #2
 8042024:	e0ea      	b.n	80421fc <HAL_I2C_Mem_Read+0x224>
 8042026:	68fb      	ldr	r3, [r7, #12]
 8042028:	2201      	movs	r2, #1
 804202a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 804202e:	f7fe fdb5 	bl	8040b9c <HAL_GetTick>
 8042032:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8042034:	697b      	ldr	r3, [r7, #20]
 8042036:	9300      	str	r3, [sp, #0]
 8042038:	2319      	movs	r3, #25
 804203a:	2201      	movs	r2, #1
 804203c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8042040:	68f8      	ldr	r0, [r7, #12]
 8042042:	f000 f9bd 	bl	80423c0 <I2C_WaitOnFlagUntilTimeout>
 8042046:	4603      	mov	r3, r0
 8042048:	2b00      	cmp	r3, #0
 804204a:	d001      	beq.n	8042050 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 804204c:	2301      	movs	r3, #1
 804204e:	e0d5      	b.n	80421fc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8042050:	68fb      	ldr	r3, [r7, #12]
 8042052:	2222      	movs	r2, #34	; 0x22
 8042054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8042058:	68fb      	ldr	r3, [r7, #12]
 804205a:	2240      	movs	r2, #64	; 0x40
 804205c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8042060:	68fb      	ldr	r3, [r7, #12]
 8042062:	2200      	movs	r2, #0
 8042064:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8042066:	68fb      	ldr	r3, [r7, #12]
 8042068:	6a3a      	ldr	r2, [r7, #32]
 804206a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 804206c:	68fb      	ldr	r3, [r7, #12]
 804206e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8042070:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8042072:	68fb      	ldr	r3, [r7, #12]
 8042074:	2200      	movs	r2, #0
 8042076:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8042078:	88f8      	ldrh	r0, [r7, #6]
 804207a:	893a      	ldrh	r2, [r7, #8]
 804207c:	8979      	ldrh	r1, [r7, #10]
 804207e:	697b      	ldr	r3, [r7, #20]
 8042080:	9301      	str	r3, [sp, #4]
 8042082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8042084:	9300      	str	r3, [sp, #0]
 8042086:	4603      	mov	r3, r0
 8042088:	68f8      	ldr	r0, [r7, #12]
 804208a:	f000 f921 	bl	80422d0 <I2C_RequestMemoryRead>
 804208e:	4603      	mov	r3, r0
 8042090:	2b00      	cmp	r3, #0
 8042092:	d005      	beq.n	80420a0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8042094:	68fb      	ldr	r3, [r7, #12]
 8042096:	2200      	movs	r2, #0
 8042098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 804209c:	2301      	movs	r3, #1
 804209e:	e0ad      	b.n	80421fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80420a0:	68fb      	ldr	r3, [r7, #12]
 80420a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80420a4:	b29b      	uxth	r3, r3
 80420a6:	2bff      	cmp	r3, #255	; 0xff
 80420a8:	d90e      	bls.n	80420c8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80420aa:	68fb      	ldr	r3, [r7, #12]
 80420ac:	22ff      	movs	r2, #255	; 0xff
 80420ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80420b0:	68fb      	ldr	r3, [r7, #12]
 80420b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80420b4:	b2da      	uxtb	r2, r3
 80420b6:	8979      	ldrh	r1, [r7, #10]
 80420b8:	4b52      	ldr	r3, [pc, #328]	; (8042204 <HAL_I2C_Mem_Read+0x22c>)
 80420ba:	9300      	str	r3, [sp, #0]
 80420bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80420c0:	68f8      	ldr	r0, [r7, #12]
 80420c2:	f000 fa9f 	bl	8042604 <I2C_TransferConfig>
 80420c6:	e00f      	b.n	80420e8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80420c8:	68fb      	ldr	r3, [r7, #12]
 80420ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80420cc:	b29a      	uxth	r2, r3
 80420ce:	68fb      	ldr	r3, [r7, #12]
 80420d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80420d2:	68fb      	ldr	r3, [r7, #12]
 80420d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80420d6:	b2da      	uxtb	r2, r3
 80420d8:	8979      	ldrh	r1, [r7, #10]
 80420da:	4b4a      	ldr	r3, [pc, #296]	; (8042204 <HAL_I2C_Mem_Read+0x22c>)
 80420dc:	9300      	str	r3, [sp, #0]
 80420de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80420e2:	68f8      	ldr	r0, [r7, #12]
 80420e4:	f000 fa8e 	bl	8042604 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80420e8:	697b      	ldr	r3, [r7, #20]
 80420ea:	9300      	str	r3, [sp, #0]
 80420ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80420ee:	2200      	movs	r2, #0
 80420f0:	2104      	movs	r1, #4
 80420f2:	68f8      	ldr	r0, [r7, #12]
 80420f4:	f000 f964 	bl	80423c0 <I2C_WaitOnFlagUntilTimeout>
 80420f8:	4603      	mov	r3, r0
 80420fa:	2b00      	cmp	r3, #0
 80420fc:	d001      	beq.n	8042102 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80420fe:	2301      	movs	r3, #1
 8042100:	e07c      	b.n	80421fc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8042102:	68fb      	ldr	r3, [r7, #12]
 8042104:	681b      	ldr	r3, [r3, #0]
 8042106:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8042108:	68fb      	ldr	r3, [r7, #12]
 804210a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804210c:	b2d2      	uxtb	r2, r2
 804210e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8042110:	68fb      	ldr	r3, [r7, #12]
 8042112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042114:	1c5a      	adds	r2, r3, #1
 8042116:	68fb      	ldr	r3, [r7, #12]
 8042118:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 804211a:	68fb      	ldr	r3, [r7, #12]
 804211c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 804211e:	3b01      	subs	r3, #1
 8042120:	b29a      	uxth	r2, r3
 8042122:	68fb      	ldr	r3, [r7, #12]
 8042124:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8042126:	68fb      	ldr	r3, [r7, #12]
 8042128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 804212a:	b29b      	uxth	r3, r3
 804212c:	3b01      	subs	r3, #1
 804212e:	b29a      	uxth	r2, r3
 8042130:	68fb      	ldr	r3, [r7, #12]
 8042132:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8042134:	68fb      	ldr	r3, [r7, #12]
 8042136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8042138:	b29b      	uxth	r3, r3
 804213a:	2b00      	cmp	r3, #0
 804213c:	d034      	beq.n	80421a8 <HAL_I2C_Mem_Read+0x1d0>
 804213e:	68fb      	ldr	r3, [r7, #12]
 8042140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8042142:	2b00      	cmp	r3, #0
 8042144:	d130      	bne.n	80421a8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8042146:	697b      	ldr	r3, [r7, #20]
 8042148:	9300      	str	r3, [sp, #0]
 804214a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804214c:	2200      	movs	r2, #0
 804214e:	2180      	movs	r1, #128	; 0x80
 8042150:	68f8      	ldr	r0, [r7, #12]
 8042152:	f000 f935 	bl	80423c0 <I2C_WaitOnFlagUntilTimeout>
 8042156:	4603      	mov	r3, r0
 8042158:	2b00      	cmp	r3, #0
 804215a:	d001      	beq.n	8042160 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 804215c:	2301      	movs	r3, #1
 804215e:	e04d      	b.n	80421fc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8042160:	68fb      	ldr	r3, [r7, #12]
 8042162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8042164:	b29b      	uxth	r3, r3
 8042166:	2bff      	cmp	r3, #255	; 0xff
 8042168:	d90e      	bls.n	8042188 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 804216a:	68fb      	ldr	r3, [r7, #12]
 804216c:	22ff      	movs	r2, #255	; 0xff
 804216e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8042170:	68fb      	ldr	r3, [r7, #12]
 8042172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8042174:	b2da      	uxtb	r2, r3
 8042176:	8979      	ldrh	r1, [r7, #10]
 8042178:	2300      	movs	r3, #0
 804217a:	9300      	str	r3, [sp, #0]
 804217c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8042180:	68f8      	ldr	r0, [r7, #12]
 8042182:	f000 fa3f 	bl	8042604 <I2C_TransferConfig>
 8042186:	e00f      	b.n	80421a8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8042188:	68fb      	ldr	r3, [r7, #12]
 804218a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 804218c:	b29a      	uxth	r2, r3
 804218e:	68fb      	ldr	r3, [r7, #12]
 8042190:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8042192:	68fb      	ldr	r3, [r7, #12]
 8042194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8042196:	b2da      	uxtb	r2, r3
 8042198:	8979      	ldrh	r1, [r7, #10]
 804219a:	2300      	movs	r3, #0
 804219c:	9300      	str	r3, [sp, #0]
 804219e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80421a2:	68f8      	ldr	r0, [r7, #12]
 80421a4:	f000 fa2e 	bl	8042604 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80421a8:	68fb      	ldr	r3, [r7, #12]
 80421aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80421ac:	b29b      	uxth	r3, r3
 80421ae:	2b00      	cmp	r3, #0
 80421b0:	d19a      	bne.n	80420e8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80421b2:	697a      	ldr	r2, [r7, #20]
 80421b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80421b6:	68f8      	ldr	r0, [r7, #12]
 80421b8:	f000 f982 	bl	80424c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80421bc:	4603      	mov	r3, r0
 80421be:	2b00      	cmp	r3, #0
 80421c0:	d001      	beq.n	80421c6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80421c2:	2301      	movs	r3, #1
 80421c4:	e01a      	b.n	80421fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80421c6:	68fb      	ldr	r3, [r7, #12]
 80421c8:	681b      	ldr	r3, [r3, #0]
 80421ca:	2220      	movs	r2, #32
 80421cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80421ce:	68fb      	ldr	r3, [r7, #12]
 80421d0:	681b      	ldr	r3, [r3, #0]
 80421d2:	6859      	ldr	r1, [r3, #4]
 80421d4:	68fb      	ldr	r3, [r7, #12]
 80421d6:	681a      	ldr	r2, [r3, #0]
 80421d8:	4b0b      	ldr	r3, [pc, #44]	; (8042208 <HAL_I2C_Mem_Read+0x230>)
 80421da:	400b      	ands	r3, r1
 80421dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80421de:	68fb      	ldr	r3, [r7, #12]
 80421e0:	2220      	movs	r2, #32
 80421e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80421e6:	68fb      	ldr	r3, [r7, #12]
 80421e8:	2200      	movs	r2, #0
 80421ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80421ee:	68fb      	ldr	r3, [r7, #12]
 80421f0:	2200      	movs	r2, #0
 80421f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80421f6:	2300      	movs	r3, #0
 80421f8:	e000      	b.n	80421fc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80421fa:	2302      	movs	r3, #2
  }
}
 80421fc:	4618      	mov	r0, r3
 80421fe:	3718      	adds	r7, #24
 8042200:	46bd      	mov	sp, r7
 8042202:	bd80      	pop	{r7, pc}
 8042204:	80002400 	.word	0x80002400
 8042208:	fe00e800 	.word	0xfe00e800

0804220c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 804220c:	b480      	push	{r7}
 804220e:	b083      	sub	sp, #12
 8042210:	af00      	add	r7, sp, #0
 8042212:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8042214:	687b      	ldr	r3, [r7, #4]
 8042216:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 804221a:	b2db      	uxtb	r3, r3
}
 804221c:	4618      	mov	r0, r3
 804221e:	370c      	adds	r7, #12
 8042220:	46bd      	mov	sp, r7
 8042222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042226:	4770      	bx	lr

08042228 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8042228:	b580      	push	{r7, lr}
 804222a:	b086      	sub	sp, #24
 804222c:	af02      	add	r7, sp, #8
 804222e:	60f8      	str	r0, [r7, #12]
 8042230:	4608      	mov	r0, r1
 8042232:	4611      	mov	r1, r2
 8042234:	461a      	mov	r2, r3
 8042236:	4603      	mov	r3, r0
 8042238:	817b      	strh	r3, [r7, #10]
 804223a:	460b      	mov	r3, r1
 804223c:	813b      	strh	r3, [r7, #8]
 804223e:	4613      	mov	r3, r2
 8042240:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8042242:	88fb      	ldrh	r3, [r7, #6]
 8042244:	b2da      	uxtb	r2, r3
 8042246:	8979      	ldrh	r1, [r7, #10]
 8042248:	4b20      	ldr	r3, [pc, #128]	; (80422cc <I2C_RequestMemoryWrite+0xa4>)
 804224a:	9300      	str	r3, [sp, #0]
 804224c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8042250:	68f8      	ldr	r0, [r7, #12]
 8042252:	f000 f9d7 	bl	8042604 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8042256:	69fa      	ldr	r2, [r7, #28]
 8042258:	69b9      	ldr	r1, [r7, #24]
 804225a:	68f8      	ldr	r0, [r7, #12]
 804225c:	f000 f8f0 	bl	8042440 <I2C_WaitOnTXISFlagUntilTimeout>
 8042260:	4603      	mov	r3, r0
 8042262:	2b00      	cmp	r3, #0
 8042264:	d001      	beq.n	804226a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8042266:	2301      	movs	r3, #1
 8042268:	e02c      	b.n	80422c4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 804226a:	88fb      	ldrh	r3, [r7, #6]
 804226c:	2b01      	cmp	r3, #1
 804226e:	d105      	bne.n	804227c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8042270:	893b      	ldrh	r3, [r7, #8]
 8042272:	b2da      	uxtb	r2, r3
 8042274:	68fb      	ldr	r3, [r7, #12]
 8042276:	681b      	ldr	r3, [r3, #0]
 8042278:	629a      	str	r2, [r3, #40]	; 0x28
 804227a:	e015      	b.n	80422a8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 804227c:	893b      	ldrh	r3, [r7, #8]
 804227e:	0a1b      	lsrs	r3, r3, #8
 8042280:	b29b      	uxth	r3, r3
 8042282:	b2da      	uxtb	r2, r3
 8042284:	68fb      	ldr	r3, [r7, #12]
 8042286:	681b      	ldr	r3, [r3, #0]
 8042288:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 804228a:	69fa      	ldr	r2, [r7, #28]
 804228c:	69b9      	ldr	r1, [r7, #24]
 804228e:	68f8      	ldr	r0, [r7, #12]
 8042290:	f000 f8d6 	bl	8042440 <I2C_WaitOnTXISFlagUntilTimeout>
 8042294:	4603      	mov	r3, r0
 8042296:	2b00      	cmp	r3, #0
 8042298:	d001      	beq.n	804229e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 804229a:	2301      	movs	r3, #1
 804229c:	e012      	b.n	80422c4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 804229e:	893b      	ldrh	r3, [r7, #8]
 80422a0:	b2da      	uxtb	r2, r3
 80422a2:	68fb      	ldr	r3, [r7, #12]
 80422a4:	681b      	ldr	r3, [r3, #0]
 80422a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80422a8:	69fb      	ldr	r3, [r7, #28]
 80422aa:	9300      	str	r3, [sp, #0]
 80422ac:	69bb      	ldr	r3, [r7, #24]
 80422ae:	2200      	movs	r2, #0
 80422b0:	2180      	movs	r1, #128	; 0x80
 80422b2:	68f8      	ldr	r0, [r7, #12]
 80422b4:	f000 f884 	bl	80423c0 <I2C_WaitOnFlagUntilTimeout>
 80422b8:	4603      	mov	r3, r0
 80422ba:	2b00      	cmp	r3, #0
 80422bc:	d001      	beq.n	80422c2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80422be:	2301      	movs	r3, #1
 80422c0:	e000      	b.n	80422c4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80422c2:	2300      	movs	r3, #0
}
 80422c4:	4618      	mov	r0, r3
 80422c6:	3710      	adds	r7, #16
 80422c8:	46bd      	mov	sp, r7
 80422ca:	bd80      	pop	{r7, pc}
 80422cc:	80002000 	.word	0x80002000

080422d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80422d0:	b580      	push	{r7, lr}
 80422d2:	b086      	sub	sp, #24
 80422d4:	af02      	add	r7, sp, #8
 80422d6:	60f8      	str	r0, [r7, #12]
 80422d8:	4608      	mov	r0, r1
 80422da:	4611      	mov	r1, r2
 80422dc:	461a      	mov	r2, r3
 80422de:	4603      	mov	r3, r0
 80422e0:	817b      	strh	r3, [r7, #10]
 80422e2:	460b      	mov	r3, r1
 80422e4:	813b      	strh	r3, [r7, #8]
 80422e6:	4613      	mov	r3, r2
 80422e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80422ea:	88fb      	ldrh	r3, [r7, #6]
 80422ec:	b2da      	uxtb	r2, r3
 80422ee:	8979      	ldrh	r1, [r7, #10]
 80422f0:	4b20      	ldr	r3, [pc, #128]	; (8042374 <I2C_RequestMemoryRead+0xa4>)
 80422f2:	9300      	str	r3, [sp, #0]
 80422f4:	2300      	movs	r3, #0
 80422f6:	68f8      	ldr	r0, [r7, #12]
 80422f8:	f000 f984 	bl	8042604 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80422fc:	69fa      	ldr	r2, [r7, #28]
 80422fe:	69b9      	ldr	r1, [r7, #24]
 8042300:	68f8      	ldr	r0, [r7, #12]
 8042302:	f000 f89d 	bl	8042440 <I2C_WaitOnTXISFlagUntilTimeout>
 8042306:	4603      	mov	r3, r0
 8042308:	2b00      	cmp	r3, #0
 804230a:	d001      	beq.n	8042310 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 804230c:	2301      	movs	r3, #1
 804230e:	e02c      	b.n	804236a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8042310:	88fb      	ldrh	r3, [r7, #6]
 8042312:	2b01      	cmp	r3, #1
 8042314:	d105      	bne.n	8042322 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8042316:	893b      	ldrh	r3, [r7, #8]
 8042318:	b2da      	uxtb	r2, r3
 804231a:	68fb      	ldr	r3, [r7, #12]
 804231c:	681b      	ldr	r3, [r3, #0]
 804231e:	629a      	str	r2, [r3, #40]	; 0x28
 8042320:	e015      	b.n	804234e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8042322:	893b      	ldrh	r3, [r7, #8]
 8042324:	0a1b      	lsrs	r3, r3, #8
 8042326:	b29b      	uxth	r3, r3
 8042328:	b2da      	uxtb	r2, r3
 804232a:	68fb      	ldr	r3, [r7, #12]
 804232c:	681b      	ldr	r3, [r3, #0]
 804232e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8042330:	69fa      	ldr	r2, [r7, #28]
 8042332:	69b9      	ldr	r1, [r7, #24]
 8042334:	68f8      	ldr	r0, [r7, #12]
 8042336:	f000 f883 	bl	8042440 <I2C_WaitOnTXISFlagUntilTimeout>
 804233a:	4603      	mov	r3, r0
 804233c:	2b00      	cmp	r3, #0
 804233e:	d001      	beq.n	8042344 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8042340:	2301      	movs	r3, #1
 8042342:	e012      	b.n	804236a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8042344:	893b      	ldrh	r3, [r7, #8]
 8042346:	b2da      	uxtb	r2, r3
 8042348:	68fb      	ldr	r3, [r7, #12]
 804234a:	681b      	ldr	r3, [r3, #0]
 804234c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 804234e:	69fb      	ldr	r3, [r7, #28]
 8042350:	9300      	str	r3, [sp, #0]
 8042352:	69bb      	ldr	r3, [r7, #24]
 8042354:	2200      	movs	r2, #0
 8042356:	2140      	movs	r1, #64	; 0x40
 8042358:	68f8      	ldr	r0, [r7, #12]
 804235a:	f000 f831 	bl	80423c0 <I2C_WaitOnFlagUntilTimeout>
 804235e:	4603      	mov	r3, r0
 8042360:	2b00      	cmp	r3, #0
 8042362:	d001      	beq.n	8042368 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8042364:	2301      	movs	r3, #1
 8042366:	e000      	b.n	804236a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8042368:	2300      	movs	r3, #0
}
 804236a:	4618      	mov	r0, r3
 804236c:	3710      	adds	r7, #16
 804236e:	46bd      	mov	sp, r7
 8042370:	bd80      	pop	{r7, pc}
 8042372:	bf00      	nop
 8042374:	80002000 	.word	0x80002000

08042378 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8042378:	b480      	push	{r7}
 804237a:	b083      	sub	sp, #12
 804237c:	af00      	add	r7, sp, #0
 804237e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8042380:	687b      	ldr	r3, [r7, #4]
 8042382:	681b      	ldr	r3, [r3, #0]
 8042384:	699b      	ldr	r3, [r3, #24]
 8042386:	f003 0302 	and.w	r3, r3, #2
 804238a:	2b02      	cmp	r3, #2
 804238c:	d103      	bne.n	8042396 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 804238e:	687b      	ldr	r3, [r7, #4]
 8042390:	681b      	ldr	r3, [r3, #0]
 8042392:	2200      	movs	r2, #0
 8042394:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8042396:	687b      	ldr	r3, [r7, #4]
 8042398:	681b      	ldr	r3, [r3, #0]
 804239a:	699b      	ldr	r3, [r3, #24]
 804239c:	f003 0301 	and.w	r3, r3, #1
 80423a0:	2b01      	cmp	r3, #1
 80423a2:	d007      	beq.n	80423b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80423a4:	687b      	ldr	r3, [r7, #4]
 80423a6:	681b      	ldr	r3, [r3, #0]
 80423a8:	699a      	ldr	r2, [r3, #24]
 80423aa:	687b      	ldr	r3, [r7, #4]
 80423ac:	681b      	ldr	r3, [r3, #0]
 80423ae:	f042 0201 	orr.w	r2, r2, #1
 80423b2:	619a      	str	r2, [r3, #24]
  }
}
 80423b4:	bf00      	nop
 80423b6:	370c      	adds	r7, #12
 80423b8:	46bd      	mov	sp, r7
 80423ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80423be:	4770      	bx	lr

080423c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80423c0:	b580      	push	{r7, lr}
 80423c2:	b084      	sub	sp, #16
 80423c4:	af00      	add	r7, sp, #0
 80423c6:	60f8      	str	r0, [r7, #12]
 80423c8:	60b9      	str	r1, [r7, #8]
 80423ca:	603b      	str	r3, [r7, #0]
 80423cc:	4613      	mov	r3, r2
 80423ce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80423d0:	e022      	b.n	8042418 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80423d2:	683b      	ldr	r3, [r7, #0]
 80423d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80423d8:	d01e      	beq.n	8042418 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80423da:	f7fe fbdf 	bl	8040b9c <HAL_GetTick>
 80423de:	4602      	mov	r2, r0
 80423e0:	69bb      	ldr	r3, [r7, #24]
 80423e2:	1ad3      	subs	r3, r2, r3
 80423e4:	683a      	ldr	r2, [r7, #0]
 80423e6:	429a      	cmp	r2, r3
 80423e8:	d302      	bcc.n	80423f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80423ea:	683b      	ldr	r3, [r7, #0]
 80423ec:	2b00      	cmp	r3, #0
 80423ee:	d113      	bne.n	8042418 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80423f0:	68fb      	ldr	r3, [r7, #12]
 80423f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80423f4:	f043 0220 	orr.w	r2, r3, #32
 80423f8:	68fb      	ldr	r3, [r7, #12]
 80423fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80423fc:	68fb      	ldr	r3, [r7, #12]
 80423fe:	2220      	movs	r2, #32
 8042400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8042404:	68fb      	ldr	r3, [r7, #12]
 8042406:	2200      	movs	r2, #0
 8042408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 804240c:	68fb      	ldr	r3, [r7, #12]
 804240e:	2200      	movs	r2, #0
 8042410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8042414:	2301      	movs	r3, #1
 8042416:	e00f      	b.n	8042438 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8042418:	68fb      	ldr	r3, [r7, #12]
 804241a:	681b      	ldr	r3, [r3, #0]
 804241c:	699a      	ldr	r2, [r3, #24]
 804241e:	68bb      	ldr	r3, [r7, #8]
 8042420:	4013      	ands	r3, r2
 8042422:	68ba      	ldr	r2, [r7, #8]
 8042424:	429a      	cmp	r2, r3
 8042426:	bf0c      	ite	eq
 8042428:	2301      	moveq	r3, #1
 804242a:	2300      	movne	r3, #0
 804242c:	b2db      	uxtb	r3, r3
 804242e:	461a      	mov	r2, r3
 8042430:	79fb      	ldrb	r3, [r7, #7]
 8042432:	429a      	cmp	r2, r3
 8042434:	d0cd      	beq.n	80423d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8042436:	2300      	movs	r3, #0
}
 8042438:	4618      	mov	r0, r3
 804243a:	3710      	adds	r7, #16
 804243c:	46bd      	mov	sp, r7
 804243e:	bd80      	pop	{r7, pc}

08042440 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8042440:	b580      	push	{r7, lr}
 8042442:	b084      	sub	sp, #16
 8042444:	af00      	add	r7, sp, #0
 8042446:	60f8      	str	r0, [r7, #12]
 8042448:	60b9      	str	r1, [r7, #8]
 804244a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 804244c:	e02c      	b.n	80424a8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 804244e:	687a      	ldr	r2, [r7, #4]
 8042450:	68b9      	ldr	r1, [r7, #8]
 8042452:	68f8      	ldr	r0, [r7, #12]
 8042454:	f000 f870 	bl	8042538 <I2C_IsAcknowledgeFailed>
 8042458:	4603      	mov	r3, r0
 804245a:	2b00      	cmp	r3, #0
 804245c:	d001      	beq.n	8042462 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 804245e:	2301      	movs	r3, #1
 8042460:	e02a      	b.n	80424b8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8042462:	68bb      	ldr	r3, [r7, #8]
 8042464:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8042468:	d01e      	beq.n	80424a8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 804246a:	f7fe fb97 	bl	8040b9c <HAL_GetTick>
 804246e:	4602      	mov	r2, r0
 8042470:	687b      	ldr	r3, [r7, #4]
 8042472:	1ad3      	subs	r3, r2, r3
 8042474:	68ba      	ldr	r2, [r7, #8]
 8042476:	429a      	cmp	r2, r3
 8042478:	d302      	bcc.n	8042480 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 804247a:	68bb      	ldr	r3, [r7, #8]
 804247c:	2b00      	cmp	r3, #0
 804247e:	d113      	bne.n	80424a8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8042480:	68fb      	ldr	r3, [r7, #12]
 8042482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8042484:	f043 0220 	orr.w	r2, r3, #32
 8042488:	68fb      	ldr	r3, [r7, #12]
 804248a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 804248c:	68fb      	ldr	r3, [r7, #12]
 804248e:	2220      	movs	r2, #32
 8042490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8042494:	68fb      	ldr	r3, [r7, #12]
 8042496:	2200      	movs	r2, #0
 8042498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 804249c:	68fb      	ldr	r3, [r7, #12]
 804249e:	2200      	movs	r2, #0
 80424a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80424a4:	2301      	movs	r3, #1
 80424a6:	e007      	b.n	80424b8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80424a8:	68fb      	ldr	r3, [r7, #12]
 80424aa:	681b      	ldr	r3, [r3, #0]
 80424ac:	699b      	ldr	r3, [r3, #24]
 80424ae:	f003 0302 	and.w	r3, r3, #2
 80424b2:	2b02      	cmp	r3, #2
 80424b4:	d1cb      	bne.n	804244e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80424b6:	2300      	movs	r3, #0
}
 80424b8:	4618      	mov	r0, r3
 80424ba:	3710      	adds	r7, #16
 80424bc:	46bd      	mov	sp, r7
 80424be:	bd80      	pop	{r7, pc}

080424c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80424c0:	b580      	push	{r7, lr}
 80424c2:	b084      	sub	sp, #16
 80424c4:	af00      	add	r7, sp, #0
 80424c6:	60f8      	str	r0, [r7, #12]
 80424c8:	60b9      	str	r1, [r7, #8]
 80424ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80424cc:	e028      	b.n	8042520 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80424ce:	687a      	ldr	r2, [r7, #4]
 80424d0:	68b9      	ldr	r1, [r7, #8]
 80424d2:	68f8      	ldr	r0, [r7, #12]
 80424d4:	f000 f830 	bl	8042538 <I2C_IsAcknowledgeFailed>
 80424d8:	4603      	mov	r3, r0
 80424da:	2b00      	cmp	r3, #0
 80424dc:	d001      	beq.n	80424e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80424de:	2301      	movs	r3, #1
 80424e0:	e026      	b.n	8042530 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80424e2:	f7fe fb5b 	bl	8040b9c <HAL_GetTick>
 80424e6:	4602      	mov	r2, r0
 80424e8:	687b      	ldr	r3, [r7, #4]
 80424ea:	1ad3      	subs	r3, r2, r3
 80424ec:	68ba      	ldr	r2, [r7, #8]
 80424ee:	429a      	cmp	r2, r3
 80424f0:	d302      	bcc.n	80424f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80424f2:	68bb      	ldr	r3, [r7, #8]
 80424f4:	2b00      	cmp	r3, #0
 80424f6:	d113      	bne.n	8042520 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80424f8:	68fb      	ldr	r3, [r7, #12]
 80424fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80424fc:	f043 0220 	orr.w	r2, r3, #32
 8042500:	68fb      	ldr	r3, [r7, #12]
 8042502:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8042504:	68fb      	ldr	r3, [r7, #12]
 8042506:	2220      	movs	r2, #32
 8042508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 804250c:	68fb      	ldr	r3, [r7, #12]
 804250e:	2200      	movs	r2, #0
 8042510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8042514:	68fb      	ldr	r3, [r7, #12]
 8042516:	2200      	movs	r2, #0
 8042518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 804251c:	2301      	movs	r3, #1
 804251e:	e007      	b.n	8042530 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8042520:	68fb      	ldr	r3, [r7, #12]
 8042522:	681b      	ldr	r3, [r3, #0]
 8042524:	699b      	ldr	r3, [r3, #24]
 8042526:	f003 0320 	and.w	r3, r3, #32
 804252a:	2b20      	cmp	r3, #32
 804252c:	d1cf      	bne.n	80424ce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 804252e:	2300      	movs	r3, #0
}
 8042530:	4618      	mov	r0, r3
 8042532:	3710      	adds	r7, #16
 8042534:	46bd      	mov	sp, r7
 8042536:	bd80      	pop	{r7, pc}

08042538 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8042538:	b580      	push	{r7, lr}
 804253a:	b084      	sub	sp, #16
 804253c:	af00      	add	r7, sp, #0
 804253e:	60f8      	str	r0, [r7, #12]
 8042540:	60b9      	str	r1, [r7, #8]
 8042542:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8042544:	68fb      	ldr	r3, [r7, #12]
 8042546:	681b      	ldr	r3, [r3, #0]
 8042548:	699b      	ldr	r3, [r3, #24]
 804254a:	f003 0310 	and.w	r3, r3, #16
 804254e:	2b10      	cmp	r3, #16
 8042550:	d151      	bne.n	80425f6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8042552:	e022      	b.n	804259a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8042554:	68bb      	ldr	r3, [r7, #8]
 8042556:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 804255a:	d01e      	beq.n	804259a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 804255c:	f7fe fb1e 	bl	8040b9c <HAL_GetTick>
 8042560:	4602      	mov	r2, r0
 8042562:	687b      	ldr	r3, [r7, #4]
 8042564:	1ad3      	subs	r3, r2, r3
 8042566:	68ba      	ldr	r2, [r7, #8]
 8042568:	429a      	cmp	r2, r3
 804256a:	d302      	bcc.n	8042572 <I2C_IsAcknowledgeFailed+0x3a>
 804256c:	68bb      	ldr	r3, [r7, #8]
 804256e:	2b00      	cmp	r3, #0
 8042570:	d113      	bne.n	804259a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8042572:	68fb      	ldr	r3, [r7, #12]
 8042574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8042576:	f043 0220 	orr.w	r2, r3, #32
 804257a:	68fb      	ldr	r3, [r7, #12]
 804257c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 804257e:	68fb      	ldr	r3, [r7, #12]
 8042580:	2220      	movs	r2, #32
 8042582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8042586:	68fb      	ldr	r3, [r7, #12]
 8042588:	2200      	movs	r2, #0
 804258a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 804258e:	68fb      	ldr	r3, [r7, #12]
 8042590:	2200      	movs	r2, #0
 8042592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8042596:	2301      	movs	r3, #1
 8042598:	e02e      	b.n	80425f8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 804259a:	68fb      	ldr	r3, [r7, #12]
 804259c:	681b      	ldr	r3, [r3, #0]
 804259e:	699b      	ldr	r3, [r3, #24]
 80425a0:	f003 0320 	and.w	r3, r3, #32
 80425a4:	2b20      	cmp	r3, #32
 80425a6:	d1d5      	bne.n	8042554 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80425a8:	68fb      	ldr	r3, [r7, #12]
 80425aa:	681b      	ldr	r3, [r3, #0]
 80425ac:	2210      	movs	r2, #16
 80425ae:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80425b0:	68fb      	ldr	r3, [r7, #12]
 80425b2:	681b      	ldr	r3, [r3, #0]
 80425b4:	2220      	movs	r2, #32
 80425b6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80425b8:	68f8      	ldr	r0, [r7, #12]
 80425ba:	f7ff fedd 	bl	8042378 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80425be:	68fb      	ldr	r3, [r7, #12]
 80425c0:	681b      	ldr	r3, [r3, #0]
 80425c2:	6859      	ldr	r1, [r3, #4]
 80425c4:	68fb      	ldr	r3, [r7, #12]
 80425c6:	681a      	ldr	r2, [r3, #0]
 80425c8:	4b0d      	ldr	r3, [pc, #52]	; (8042600 <I2C_IsAcknowledgeFailed+0xc8>)
 80425ca:	400b      	ands	r3, r1
 80425cc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80425ce:	68fb      	ldr	r3, [r7, #12]
 80425d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80425d2:	f043 0204 	orr.w	r2, r3, #4
 80425d6:	68fb      	ldr	r3, [r7, #12]
 80425d8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80425da:	68fb      	ldr	r3, [r7, #12]
 80425dc:	2220      	movs	r2, #32
 80425de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80425e2:	68fb      	ldr	r3, [r7, #12]
 80425e4:	2200      	movs	r2, #0
 80425e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80425ea:	68fb      	ldr	r3, [r7, #12]
 80425ec:	2200      	movs	r2, #0
 80425ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80425f2:	2301      	movs	r3, #1
 80425f4:	e000      	b.n	80425f8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80425f6:	2300      	movs	r3, #0
}
 80425f8:	4618      	mov	r0, r3
 80425fa:	3710      	adds	r7, #16
 80425fc:	46bd      	mov	sp, r7
 80425fe:	bd80      	pop	{r7, pc}
 8042600:	fe00e800 	.word	0xfe00e800

08042604 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8042604:	b480      	push	{r7}
 8042606:	b085      	sub	sp, #20
 8042608:	af00      	add	r7, sp, #0
 804260a:	60f8      	str	r0, [r7, #12]
 804260c:	607b      	str	r3, [r7, #4]
 804260e:	460b      	mov	r3, r1
 8042610:	817b      	strh	r3, [r7, #10]
 8042612:	4613      	mov	r3, r2
 8042614:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8042616:	68fb      	ldr	r3, [r7, #12]
 8042618:	681b      	ldr	r3, [r3, #0]
 804261a:	685a      	ldr	r2, [r3, #4]
 804261c:	69bb      	ldr	r3, [r7, #24]
 804261e:	0d5b      	lsrs	r3, r3, #21
 8042620:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8042624:	4b0d      	ldr	r3, [pc, #52]	; (804265c <I2C_TransferConfig+0x58>)
 8042626:	430b      	orrs	r3, r1
 8042628:	43db      	mvns	r3, r3
 804262a:	ea02 0103 	and.w	r1, r2, r3
 804262e:	897b      	ldrh	r3, [r7, #10]
 8042630:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8042634:	7a7b      	ldrb	r3, [r7, #9]
 8042636:	041b      	lsls	r3, r3, #16
 8042638:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 804263c:	431a      	orrs	r2, r3
 804263e:	687b      	ldr	r3, [r7, #4]
 8042640:	431a      	orrs	r2, r3
 8042642:	69bb      	ldr	r3, [r7, #24]
 8042644:	431a      	orrs	r2, r3
 8042646:	68fb      	ldr	r3, [r7, #12]
 8042648:	681b      	ldr	r3, [r3, #0]
 804264a:	430a      	orrs	r2, r1
 804264c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 804264e:	bf00      	nop
 8042650:	3714      	adds	r7, #20
 8042652:	46bd      	mov	sp, r7
 8042654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042658:	4770      	bx	lr
 804265a:	bf00      	nop
 804265c:	03ff63ff 	.word	0x03ff63ff

08042660 <HAL_LTDC_Init>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8042660:	b580      	push	{r7, lr}
 8042662:	b084      	sub	sp, #16
 8042664:	af00      	add	r7, sp, #0
 8042666:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, tmp1 = 0;
 8042668:	2300      	movs	r3, #0
 804266a:	60fb      	str	r3, [r7, #12]
 804266c:	2300      	movs	r3, #0
 804266e:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 8042670:	687b      	ldr	r3, [r7, #4]
 8042672:	2b00      	cmp	r3, #0
 8042674:	d101      	bne.n	804267a <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 8042676:	2301      	movs	r3, #1
 8042678:	e0c7      	b.n	804280a <HAL_LTDC_Init+0x1aa>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 804267a:	687b      	ldr	r3, [r7, #4]
 804267c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8042680:	b2db      	uxtb	r3, r3
 8042682:	2b00      	cmp	r3, #0
 8042684:	d106      	bne.n	8042694 <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8042686:	687b      	ldr	r3, [r7, #4]
 8042688:	2200      	movs	r2, #0
 804268a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 804268e:	6878      	ldr	r0, [r7, #4]
 8042690:	f000 f8c2 	bl	8042818 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8042694:	687b      	ldr	r3, [r7, #4]
 8042696:	2202      	movs	r2, #2
 8042698:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 804269c:	687b      	ldr	r3, [r7, #4]
 804269e:	681b      	ldr	r3, [r3, #0]
 80426a0:	699a      	ldr	r2, [r3, #24]
 80426a2:	687b      	ldr	r3, [r7, #4]
 80426a4:	681b      	ldr	r3, [r3, #0]
 80426a6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80426aa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80426ac:	687b      	ldr	r3, [r7, #4]
 80426ae:	681b      	ldr	r3, [r3, #0]
 80426b0:	6999      	ldr	r1, [r3, #24]
 80426b2:	687b      	ldr	r3, [r7, #4]
 80426b4:	685a      	ldr	r2, [r3, #4]
 80426b6:	687b      	ldr	r3, [r7, #4]
 80426b8:	689b      	ldr	r3, [r3, #8]
 80426ba:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80426bc:	687b      	ldr	r3, [r7, #4]
 80426be:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80426c0:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80426c2:	687b      	ldr	r3, [r7, #4]
 80426c4:	691b      	ldr	r3, [r3, #16]
 80426c6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80426c8:	687b      	ldr	r3, [r7, #4]
 80426ca:	681b      	ldr	r3, [r3, #0]
 80426cc:	430a      	orrs	r2, r1
 80426ce:	619a      	str	r2, [r3, #24]

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80426d0:	687b      	ldr	r3, [r7, #4]
 80426d2:	681b      	ldr	r3, [r3, #0]
 80426d4:	6899      	ldr	r1, [r3, #8]
 80426d6:	687b      	ldr	r3, [r7, #4]
 80426d8:	681a      	ldr	r2, [r3, #0]
 80426da:	4b4e      	ldr	r3, [pc, #312]	; (8042814 <HAL_LTDC_Init+0x1b4>)
 80426dc:	400b      	ands	r3, r1
 80426de:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
 80426e0:	687b      	ldr	r3, [r7, #4]
 80426e2:	695b      	ldr	r3, [r3, #20]
 80426e4:	041b      	lsls	r3, r3, #16
 80426e6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80426e8:	687b      	ldr	r3, [r7, #4]
 80426ea:	681b      	ldr	r3, [r3, #0]
 80426ec:	6899      	ldr	r1, [r3, #8]
 80426ee:	687b      	ldr	r3, [r7, #4]
 80426f0:	699a      	ldr	r2, [r3, #24]
 80426f2:	68fb      	ldr	r3, [r7, #12]
 80426f4:	431a      	orrs	r2, r3
 80426f6:	687b      	ldr	r3, [r7, #4]
 80426f8:	681b      	ldr	r3, [r3, #0]
 80426fa:	430a      	orrs	r2, r1
 80426fc:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80426fe:	687b      	ldr	r3, [r7, #4]
 8042700:	681b      	ldr	r3, [r3, #0]
 8042702:	68d9      	ldr	r1, [r3, #12]
 8042704:	687b      	ldr	r3, [r7, #4]
 8042706:	681a      	ldr	r2, [r3, #0]
 8042708:	4b42      	ldr	r3, [pc, #264]	; (8042814 <HAL_LTDC_Init+0x1b4>)
 804270a:	400b      	ands	r3, r1
 804270c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 804270e:	687b      	ldr	r3, [r7, #4]
 8042710:	69db      	ldr	r3, [r3, #28]
 8042712:	041b      	lsls	r3, r3, #16
 8042714:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8042716:	687b      	ldr	r3, [r7, #4]
 8042718:	681b      	ldr	r3, [r3, #0]
 804271a:	68d9      	ldr	r1, [r3, #12]
 804271c:	687b      	ldr	r3, [r7, #4]
 804271e:	6a1a      	ldr	r2, [r3, #32]
 8042720:	68fb      	ldr	r3, [r7, #12]
 8042722:	431a      	orrs	r2, r3
 8042724:	687b      	ldr	r3, [r7, #4]
 8042726:	681b      	ldr	r3, [r3, #0]
 8042728:	430a      	orrs	r2, r1
 804272a:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 804272c:	687b      	ldr	r3, [r7, #4]
 804272e:	681b      	ldr	r3, [r3, #0]
 8042730:	6919      	ldr	r1, [r3, #16]
 8042732:	687b      	ldr	r3, [r7, #4]
 8042734:	681a      	ldr	r2, [r3, #0]
 8042736:	4b37      	ldr	r3, [pc, #220]	; (8042814 <HAL_LTDC_Init+0x1b4>)
 8042738:	400b      	ands	r3, r1
 804273a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 804273c:	687b      	ldr	r3, [r7, #4]
 804273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042740:	041b      	lsls	r3, r3, #16
 8042742:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8042744:	687b      	ldr	r3, [r7, #4]
 8042746:	681b      	ldr	r3, [r3, #0]
 8042748:	6919      	ldr	r1, [r3, #16]
 804274a:	687b      	ldr	r3, [r7, #4]
 804274c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 804274e:	68fb      	ldr	r3, [r7, #12]
 8042750:	431a      	orrs	r2, r3
 8042752:	687b      	ldr	r3, [r7, #4]
 8042754:	681b      	ldr	r3, [r3, #0]
 8042756:	430a      	orrs	r2, r1
 8042758:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 804275a:	687b      	ldr	r3, [r7, #4]
 804275c:	681b      	ldr	r3, [r3, #0]
 804275e:	6959      	ldr	r1, [r3, #20]
 8042760:	687b      	ldr	r3, [r7, #4]
 8042762:	681a      	ldr	r2, [r3, #0]
 8042764:	4b2b      	ldr	r3, [pc, #172]	; (8042814 <HAL_LTDC_Init+0x1b4>)
 8042766:	400b      	ands	r3, r1
 8042768:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 804276a:	687b      	ldr	r3, [r7, #4]
 804276c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804276e:	041b      	lsls	r3, r3, #16
 8042770:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8042772:	687b      	ldr	r3, [r7, #4]
 8042774:	681b      	ldr	r3, [r3, #0]
 8042776:	6959      	ldr	r1, [r3, #20]
 8042778:	687b      	ldr	r3, [r7, #4]
 804277a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804277c:	68fb      	ldr	r3, [r7, #12]
 804277e:	431a      	orrs	r2, r3
 8042780:	687b      	ldr	r3, [r7, #4]
 8042782:	681b      	ldr	r3, [r3, #0]
 8042784:	430a      	orrs	r2, r1
 8042786:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 8042788:	687b      	ldr	r3, [r7, #4]
 804278a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 804278e:	021b      	lsls	r3, r3, #8
 8042790:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 8042792:	687b      	ldr	r3, [r7, #4]
 8042794:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8042798:	041b      	lsls	r3, r3, #16
 804279a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 804279c:	687b      	ldr	r3, [r7, #4]
 804279e:	681b      	ldr	r3, [r3, #0]
 80427a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80427a2:	687b      	ldr	r3, [r7, #4]
 80427a4:	681b      	ldr	r3, [r3, #0]
 80427a6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80427aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80427ac:	687b      	ldr	r3, [r7, #4]
 80427ae:	681b      	ldr	r3, [r3, #0]
 80427b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80427b2:	68ba      	ldr	r2, [r7, #8]
 80427b4:	68fb      	ldr	r3, [r7, #12]
 80427b6:	4313      	orrs	r3, r2
 80427b8:	687a      	ldr	r2, [r7, #4]
 80427ba:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80427be:	431a      	orrs	r2, r3
 80427c0:	687b      	ldr	r3, [r7, #4]
 80427c2:	681b      	ldr	r3, [r3, #0]
 80427c4:	430a      	orrs	r2, r1
 80427c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 80427c8:	687b      	ldr	r3, [r7, #4]
 80427ca:	681b      	ldr	r3, [r3, #0]
 80427cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80427ce:	687b      	ldr	r3, [r7, #4]
 80427d0:	681b      	ldr	r3, [r3, #0]
 80427d2:	f042 0204 	orr.w	r2, r2, #4
 80427d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 80427d8:	687b      	ldr	r3, [r7, #4]
 80427da:	681b      	ldr	r3, [r3, #0]
 80427dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80427de:	687b      	ldr	r3, [r7, #4]
 80427e0:	681b      	ldr	r3, [r3, #0]
 80427e2:	f042 0202 	orr.w	r2, r2, #2
 80427e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80427e8:	687b      	ldr	r3, [r7, #4]
 80427ea:	681b      	ldr	r3, [r3, #0]
 80427ec:	699a      	ldr	r2, [r3, #24]
 80427ee:	687b      	ldr	r3, [r7, #4]
 80427f0:	681b      	ldr	r3, [r3, #0]
 80427f2:	f042 0201 	orr.w	r2, r2, #1
 80427f6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 80427f8:	687b      	ldr	r3, [r7, #4]
 80427fa:	2200      	movs	r2, #0
 80427fc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8042800:	687b      	ldr	r3, [r7, #4]
 8042802:	2201      	movs	r2, #1
 8042804:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8042808:	2300      	movs	r3, #0
}
 804280a:	4618      	mov	r0, r3
 804280c:	3710      	adds	r7, #16
 804280e:	46bd      	mov	sp, r7
 8042810:	bd80      	pop	{r7, pc}
 8042812:	bf00      	nop
 8042814:	f000f800 	.word	0xf000f800

08042818 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8042818:	b480      	push	{r7}
 804281a:	b083      	sub	sp, #12
 804281c:	af00      	add	r7, sp, #0
 804281e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */ 
}
 8042820:	bf00      	nop
 8042822:	370c      	adds	r7, #12
 8042824:	46bd      	mov	sp, r7
 8042826:	f85d 7b04 	ldr.w	r7, [sp], #4
 804282a:	4770      	bx	lr

0804282c <HAL_LTDC_IRQHandler>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.  
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 804282c:	b580      	push	{r7, lr}
 804282e:	b082      	sub	sp, #8
 8042830:	af00      	add	r7, sp, #0
 8042832:	6078      	str	r0, [r7, #4]
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_TE) != RESET)
 8042834:	687b      	ldr	r3, [r7, #4]
 8042836:	681b      	ldr	r3, [r3, #0]
 8042838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804283a:	f003 0304 	and.w	r3, r3, #4
 804283e:	2b00      	cmp	r3, #0
 8042840:	d025      	beq.n	804288e <HAL_LTDC_IRQHandler+0x62>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_TE) != RESET)
 8042842:	687b      	ldr	r3, [r7, #4]
 8042844:	681b      	ldr	r3, [r3, #0]
 8042846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8042848:	f003 0304 	and.w	r3, r3, #4
 804284c:	2b00      	cmp	r3, #0
 804284e:	d01e      	beq.n	804288e <HAL_LTDC_IRQHandler+0x62>
    {
      /* Disable the transfer Error interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8042850:	687b      	ldr	r3, [r7, #4]
 8042852:	681b      	ldr	r3, [r3, #0]
 8042854:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8042856:	687b      	ldr	r3, [r7, #4]
 8042858:	681b      	ldr	r3, [r3, #0]
 804285a:	f022 0204 	bic.w	r2, r2, #4
 804285e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the transfer error flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8042860:	687b      	ldr	r3, [r7, #4]
 8042862:	681b      	ldr	r3, [r3, #0]
 8042864:	2204      	movs	r2, #4
 8042866:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Update error code */
      hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8042868:	687b      	ldr	r3, [r7, #4]
 804286a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 804286e:	f043 0201 	orr.w	r2, r3, #1
 8042872:	687b      	ldr	r3, [r7, #4]
 8042874:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_ERROR;
 8042878:	687b      	ldr	r3, [r7, #4]
 804287a:	2204      	movs	r2, #4
 804287c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8042880:	687b      	ldr	r3, [r7, #4]
 8042882:	2200      	movs	r2, #0
 8042884:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

      /* Transfer error Callback */
      HAL_LTDC_ErrorCallback(hltdc);
 8042888:	6878      	ldr	r0, [r7, #4]
 804288a:	f000 f87b 	bl	8042984 <HAL_LTDC_ErrorCallback>
    }
  }
  /* FIFO underrun Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_FU) != RESET)
 804288e:	687b      	ldr	r3, [r7, #4]
 8042890:	681b      	ldr	r3, [r3, #0]
 8042892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8042894:	f003 0302 	and.w	r3, r3, #2
 8042898:	2b00      	cmp	r3, #0
 804289a:	d025      	beq.n	80428e8 <HAL_LTDC_IRQHandler+0xbc>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_FU) != RESET)
 804289c:	687b      	ldr	r3, [r7, #4]
 804289e:	681b      	ldr	r3, [r3, #0]
 80428a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80428a2:	f003 0302 	and.w	r3, r3, #2
 80428a6:	2b00      	cmp	r3, #0
 80428a8:	d01e      	beq.n	80428e8 <HAL_LTDC_IRQHandler+0xbc>
    {
      /* Disable the FIFO underrun interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80428aa:	687b      	ldr	r3, [r7, #4]
 80428ac:	681b      	ldr	r3, [r3, #0]
 80428ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80428b0:	687b      	ldr	r3, [r7, #4]
 80428b2:	681b      	ldr	r3, [r3, #0]
 80428b4:	f022 0202 	bic.w	r2, r2, #2
 80428b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the FIFO underrun flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80428ba:	687b      	ldr	r3, [r7, #4]
 80428bc:	681b      	ldr	r3, [r3, #0]
 80428be:	2202      	movs	r2, #2
 80428c0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Update error code */
      hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80428c2:	687b      	ldr	r3, [r7, #4]
 80428c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80428c8:	f043 0202 	orr.w	r2, r3, #2
 80428cc:	687b      	ldr	r3, [r7, #4]
 80428ce:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_ERROR;
 80428d2:	687b      	ldr	r3, [r7, #4]
 80428d4:	2204      	movs	r2, #4
 80428d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 80428da:	687b      	ldr	r3, [r7, #4]
 80428dc:	2200      	movs	r2, #0
 80428de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
      /* Transfer error Callback */
      HAL_LTDC_ErrorCallback(hltdc);
 80428e2:	6878      	ldr	r0, [r7, #4]
 80428e4:	f000 f84e 	bl	8042984 <HAL_LTDC_ErrorCallback>
    }
  }
  /* Line Interrupt management ************************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_LI) != RESET)
 80428e8:	687b      	ldr	r3, [r7, #4]
 80428ea:	681b      	ldr	r3, [r3, #0]
 80428ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80428ee:	f003 0301 	and.w	r3, r3, #1
 80428f2:	2b00      	cmp	r3, #0
 80428f4:	d01d      	beq.n	8042932 <HAL_LTDC_IRQHandler+0x106>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_LI) != RESET)
 80428f6:	687b      	ldr	r3, [r7, #4]
 80428f8:	681b      	ldr	r3, [r3, #0]
 80428fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80428fc:	f003 0301 	and.w	r3, r3, #1
 8042900:	2b00      	cmp	r3, #0
 8042902:	d016      	beq.n	8042932 <HAL_LTDC_IRQHandler+0x106>
    {
      /* Disable the Line interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8042904:	687b      	ldr	r3, [r7, #4]
 8042906:	681b      	ldr	r3, [r3, #0]
 8042908:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 804290a:	687b      	ldr	r3, [r7, #4]
 804290c:	681b      	ldr	r3, [r3, #0]
 804290e:	f022 0201 	bic.w	r2, r2, #1
 8042912:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the Line interrupt flag */  
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8042914:	687b      	ldr	r3, [r7, #4]
 8042916:	681b      	ldr	r3, [r3, #0]
 8042918:	2201      	movs	r2, #1
 804291a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_READY;
 804291c:	687b      	ldr	r3, [r7, #4]
 804291e:	2201      	movs	r2, #1
 8042920:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8042924:	687b      	ldr	r3, [r7, #4]
 8042926:	2200      	movs	r2, #0
 8042928:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

      /* Line interrupt Callback */
      HAL_LTDC_LineEventCallback(hltdc);
 804292c:	6878      	ldr	r0, [r7, #4]
 804292e:	f000 f833 	bl	8042998 <HAL_LTDC_LineEventCallback>
    }
  }
  /* Register reload Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_RR) != RESET)
 8042932:	687b      	ldr	r3, [r7, #4]
 8042934:	681b      	ldr	r3, [r3, #0]
 8042936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8042938:	f003 0308 	and.w	r3, r3, #8
 804293c:	2b00      	cmp	r3, #0
 804293e:	d01d      	beq.n	804297c <HAL_LTDC_IRQHandler+0x150>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_RR) != RESET)
 8042940:	687b      	ldr	r3, [r7, #4]
 8042942:	681b      	ldr	r3, [r3, #0]
 8042944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8042946:	f003 0308 	and.w	r3, r3, #8
 804294a:	2b00      	cmp	r3, #0
 804294c:	d016      	beq.n	804297c <HAL_LTDC_IRQHandler+0x150>
    {
      /* Disable the register reload interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 804294e:	687b      	ldr	r3, [r7, #4]
 8042950:	681b      	ldr	r3, [r3, #0]
 8042952:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8042954:	687b      	ldr	r3, [r7, #4]
 8042956:	681b      	ldr	r3, [r3, #0]
 8042958:	f022 0208 	bic.w	r2, r2, #8
 804295c:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Clear the register reload flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 804295e:	687b      	ldr	r3, [r7, #4]
 8042960:	681b      	ldr	r3, [r3, #0]
 8042962:	2208      	movs	r2, #8
 8042964:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_READY;
 8042966:	687b      	ldr	r3, [r7, #4]
 8042968:	2201      	movs	r2, #1
 804296a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
      
      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 804296e:	687b      	ldr	r3, [r7, #4]
 8042970:	2200      	movs	r2, #0
 8042972:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
      /* Register reload interrupt Callback */
      HAL_LTDC_ReloadEventCallback(hltdc);
 8042976:	6878      	ldr	r0, [r7, #4]
 8042978:	f000 f818 	bl	80429ac <HAL_LTDC_ReloadEventCallback>
    }
  }  
}
 804297c:	bf00      	nop
 804297e:	3708      	adds	r7, #8
 8042980:	46bd      	mov	sp, r7
 8042982:	bd80      	pop	{r7, pc}

08042984 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8042984:	b480      	push	{r7}
 8042986:	b083      	sub	sp, #12
 8042988:	af00      	add	r7, sp, #0
 804298a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 804298c:	bf00      	nop
 804298e:	370c      	adds	r7, #12
 8042990:	46bd      	mov	sp, r7
 8042992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042996:	4770      	bx	lr

08042998 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8042998:	b480      	push	{r7}
 804299a:	b083      	sub	sp, #12
 804299c:	af00      	add	r7, sp, #0
 804299e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80429a0:	bf00      	nop
 80429a2:	370c      	adds	r7, #12
 80429a4:	46bd      	mov	sp, r7
 80429a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80429aa:	4770      	bx	lr

080429ac <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80429ac:	b480      	push	{r7}
 80429ae:	b083      	sub	sp, #12
 80429b0:	af00      	add	r7, sp, #0
 80429b2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80429b4:	bf00      	nop
 80429b6:	370c      	adds	r7, #12
 80429b8:	46bd      	mov	sp, r7
 80429ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80429be:	4770      	bx	lr

080429c0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 80429c0:	b5b0      	push	{r4, r5, r7, lr}
 80429c2:	b084      	sub	sp, #16
 80429c4:	af00      	add	r7, sp, #0
 80429c6:	60f8      	str	r0, [r7, #12]
 80429c8:	60b9      	str	r1, [r7, #8]
 80429ca:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80429cc:	68fb      	ldr	r3, [r7, #12]
 80429ce:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80429d2:	2b01      	cmp	r3, #1
 80429d4:	d101      	bne.n	80429da <HAL_LTDC_ConfigLayer+0x1a>
 80429d6:	2302      	movs	r3, #2
 80429d8:	e02c      	b.n	8042a34 <HAL_LTDC_ConfigLayer+0x74>
 80429da:	68fb      	ldr	r3, [r7, #12]
 80429dc:	2201      	movs	r2, #1
 80429de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80429e2:	68fb      	ldr	r3, [r7, #12]
 80429e4:	2202      	movs	r2, #2
 80429e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80429ea:	68fa      	ldr	r2, [r7, #12]
 80429ec:	687b      	ldr	r3, [r7, #4]
 80429ee:	2134      	movs	r1, #52	; 0x34
 80429f0:	fb01 f303 	mul.w	r3, r1, r3
 80429f4:	4413      	add	r3, r2
 80429f6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80429fa:	68bb      	ldr	r3, [r7, #8]
 80429fc:	4614      	mov	r4, r2
 80429fe:	461d      	mov	r5, r3
 8042a00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8042a02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8042a04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8042a06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8042a08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8042a0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8042a0c:	682b      	ldr	r3, [r5, #0]
 8042a0e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8042a10:	687a      	ldr	r2, [r7, #4]
 8042a12:	68b9      	ldr	r1, [r7, #8]
 8042a14:	68f8      	ldr	r0, [r7, #12]
 8042a16:	f000 f81f 	bl	8042a58 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8042a1a:	68fb      	ldr	r3, [r7, #12]
 8042a1c:	681b      	ldr	r3, [r3, #0]
 8042a1e:	2201      	movs	r2, #1
 8042a20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8042a22:	68fb      	ldr	r3, [r7, #12]
 8042a24:	2201      	movs	r2, #1
 8042a26:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8042a2a:	68fb      	ldr	r3, [r7, #12]
 8042a2c:	2200      	movs	r2, #0
 8042a2e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8042a32:	2300      	movs	r3, #0
}
 8042a34:	4618      	mov	r0, r3
 8042a36:	3710      	adds	r7, #16
 8042a38:	46bd      	mov	sp, r7
 8042a3a:	bdb0      	pop	{r4, r5, r7, pc}

08042a3c <HAL_LTDC_GetState>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8042a3c:	b480      	push	{r7}
 8042a3e:	b083      	sub	sp, #12
 8042a40:	af00      	add	r7, sp, #0
 8042a42:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8042a44:	687b      	ldr	r3, [r7, #4]
 8042a46:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8042a4a:	b2db      	uxtb	r3, r3
}
 8042a4c:	4618      	mov	r0, r3
 8042a4e:	370c      	adds	r7, #12
 8042a50:	46bd      	mov	sp, r7
 8042a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042a56:	4770      	bx	lr

08042a58 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8042a58:	b480      	push	{r7}
 8042a5a:	b089      	sub	sp, #36	; 0x24
 8042a5c:	af00      	add	r7, sp, #0
 8042a5e:	60f8      	str	r0, [r7, #12]
 8042a60:	60b9      	str	r1, [r7, #8]
 8042a62:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 8042a64:	2300      	movs	r3, #0
 8042a66:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0;
 8042a68:	2300      	movs	r3, #0
 8042a6a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0;
 8042a6c:	2300      	movs	r3, #0
 8042a6e:	617b      	str	r3, [r7, #20]

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8042a70:	68bb      	ldr	r3, [r7, #8]
 8042a72:	685a      	ldr	r2, [r3, #4]
 8042a74:	68fb      	ldr	r3, [r7, #12]
 8042a76:	681b      	ldr	r3, [r3, #0]
 8042a78:	68db      	ldr	r3, [r3, #12]
 8042a7a:	0c1b      	lsrs	r3, r3, #16
 8042a7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8042a80:	4413      	add	r3, r2
 8042a82:	041b      	lsls	r3, r3, #16
 8042a84:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8042a86:	68fb      	ldr	r3, [r7, #12]
 8042a88:	681b      	ldr	r3, [r3, #0]
 8042a8a:	461a      	mov	r2, r3
 8042a8c:	687b      	ldr	r3, [r7, #4]
 8042a8e:	01db      	lsls	r3, r3, #7
 8042a90:	4413      	add	r3, r2
 8042a92:	3384      	adds	r3, #132	; 0x84
 8042a94:	685b      	ldr	r3, [r3, #4]
 8042a96:	68fa      	ldr	r2, [r7, #12]
 8042a98:	6812      	ldr	r2, [r2, #0]
 8042a9a:	4611      	mov	r1, r2
 8042a9c:	687a      	ldr	r2, [r7, #4]
 8042a9e:	01d2      	lsls	r2, r2, #7
 8042aa0:	440a      	add	r2, r1
 8042aa2:	3284      	adds	r2, #132	; 0x84
 8042aa4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8042aa8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8042aaa:	68bb      	ldr	r3, [r7, #8]
 8042aac:	681a      	ldr	r2, [r3, #0]
 8042aae:	68fb      	ldr	r3, [r7, #12]
 8042ab0:	681b      	ldr	r3, [r3, #0]
 8042ab2:	68db      	ldr	r3, [r3, #12]
 8042ab4:	0c1b      	lsrs	r3, r3, #16
 8042ab6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8042aba:	4413      	add	r3, r2
 8042abc:	1c5a      	adds	r2, r3, #1
 8042abe:	68fb      	ldr	r3, [r7, #12]
 8042ac0:	681b      	ldr	r3, [r3, #0]
 8042ac2:	4619      	mov	r1, r3
 8042ac4:	687b      	ldr	r3, [r7, #4]
 8042ac6:	01db      	lsls	r3, r3, #7
 8042ac8:	440b      	add	r3, r1
 8042aca:	3384      	adds	r3, #132	; 0x84
 8042acc:	4619      	mov	r1, r3
 8042ace:	69fb      	ldr	r3, [r7, #28]
 8042ad0:	4313      	orrs	r3, r2
 8042ad2:	604b      	str	r3, [r1, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8042ad4:	68bb      	ldr	r3, [r7, #8]
 8042ad6:	68da      	ldr	r2, [r3, #12]
 8042ad8:	68fb      	ldr	r3, [r7, #12]
 8042ada:	681b      	ldr	r3, [r3, #0]
 8042adc:	68db      	ldr	r3, [r3, #12]
 8042ade:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8042ae2:	4413      	add	r3, r2
 8042ae4:	041b      	lsls	r3, r3, #16
 8042ae6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8042ae8:	68fb      	ldr	r3, [r7, #12]
 8042aea:	681b      	ldr	r3, [r3, #0]
 8042aec:	461a      	mov	r2, r3
 8042aee:	687b      	ldr	r3, [r7, #4]
 8042af0:	01db      	lsls	r3, r3, #7
 8042af2:	4413      	add	r3, r2
 8042af4:	3384      	adds	r3, #132	; 0x84
 8042af6:	689b      	ldr	r3, [r3, #8]
 8042af8:	68fa      	ldr	r2, [r7, #12]
 8042afa:	6812      	ldr	r2, [r2, #0]
 8042afc:	4611      	mov	r1, r2
 8042afe:	687a      	ldr	r2, [r7, #4]
 8042b00:	01d2      	lsls	r2, r2, #7
 8042b02:	440a      	add	r2, r1
 8042b04:	3284      	adds	r2, #132	; 0x84
 8042b06:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8042b0a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8042b0c:	68bb      	ldr	r3, [r7, #8]
 8042b0e:	689a      	ldr	r2, [r3, #8]
 8042b10:	68fb      	ldr	r3, [r7, #12]
 8042b12:	681b      	ldr	r3, [r3, #0]
 8042b14:	68db      	ldr	r3, [r3, #12]
 8042b16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8042b1a:	4413      	add	r3, r2
 8042b1c:	1c5a      	adds	r2, r3, #1
 8042b1e:	68fb      	ldr	r3, [r7, #12]
 8042b20:	681b      	ldr	r3, [r3, #0]
 8042b22:	4619      	mov	r1, r3
 8042b24:	687b      	ldr	r3, [r7, #4]
 8042b26:	01db      	lsls	r3, r3, #7
 8042b28:	440b      	add	r3, r1
 8042b2a:	3384      	adds	r3, #132	; 0x84
 8042b2c:	4619      	mov	r1, r3
 8042b2e:	69fb      	ldr	r3, [r7, #28]
 8042b30:	4313      	orrs	r3, r2
 8042b32:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8042b34:	68fb      	ldr	r3, [r7, #12]
 8042b36:	681b      	ldr	r3, [r3, #0]
 8042b38:	461a      	mov	r2, r3
 8042b3a:	687b      	ldr	r3, [r7, #4]
 8042b3c:	01db      	lsls	r3, r3, #7
 8042b3e:	4413      	add	r3, r2
 8042b40:	3384      	adds	r3, #132	; 0x84
 8042b42:	691b      	ldr	r3, [r3, #16]
 8042b44:	68fa      	ldr	r2, [r7, #12]
 8042b46:	6812      	ldr	r2, [r2, #0]
 8042b48:	4611      	mov	r1, r2
 8042b4a:	687a      	ldr	r2, [r7, #4]
 8042b4c:	01d2      	lsls	r2, r2, #7
 8042b4e:	440a      	add	r2, r1
 8042b50:	3284      	adds	r2, #132	; 0x84
 8042b52:	f023 0307 	bic.w	r3, r3, #7
 8042b56:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8042b58:	68fb      	ldr	r3, [r7, #12]
 8042b5a:	681b      	ldr	r3, [r3, #0]
 8042b5c:	461a      	mov	r2, r3
 8042b5e:	687b      	ldr	r3, [r7, #4]
 8042b60:	01db      	lsls	r3, r3, #7
 8042b62:	4413      	add	r3, r2
 8042b64:	3384      	adds	r3, #132	; 0x84
 8042b66:	461a      	mov	r2, r3
 8042b68:	68bb      	ldr	r3, [r7, #8]
 8042b6a:	691b      	ldr	r3, [r3, #16]
 8042b6c:	6113      	str	r3, [r2, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8042b6e:	68bb      	ldr	r3, [r7, #8]
 8042b70:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8042b74:	021b      	lsls	r3, r3, #8
 8042b76:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8042b78:	68bb      	ldr	r3, [r7, #8]
 8042b7a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8042b7e:	041b      	lsls	r3, r3, #16
 8042b80:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8042b82:	68bb      	ldr	r3, [r7, #8]
 8042b84:	699b      	ldr	r3, [r3, #24]
 8042b86:	061b      	lsls	r3, r3, #24
 8042b88:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8042b8a:	68fb      	ldr	r3, [r7, #12]
 8042b8c:	681b      	ldr	r3, [r3, #0]
 8042b8e:	461a      	mov	r2, r3
 8042b90:	687b      	ldr	r3, [r7, #4]
 8042b92:	01db      	lsls	r3, r3, #7
 8042b94:	4413      	add	r3, r2
 8042b96:	3384      	adds	r3, #132	; 0x84
 8042b98:	699b      	ldr	r3, [r3, #24]
 8042b9a:	68fb      	ldr	r3, [r7, #12]
 8042b9c:	681b      	ldr	r3, [r3, #0]
 8042b9e:	461a      	mov	r2, r3
 8042ba0:	687b      	ldr	r3, [r7, #4]
 8042ba2:	01db      	lsls	r3, r3, #7
 8042ba4:	4413      	add	r3, r2
 8042ba6:	3384      	adds	r3, #132	; 0x84
 8042ba8:	461a      	mov	r2, r3
 8042baa:	2300      	movs	r3, #0
 8042bac:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8042bae:	68bb      	ldr	r3, [r7, #8]
 8042bb0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8042bb4:	461a      	mov	r2, r3
 8042bb6:	69fb      	ldr	r3, [r7, #28]
 8042bb8:	431a      	orrs	r2, r3
 8042bba:	69bb      	ldr	r3, [r7, #24]
 8042bbc:	431a      	orrs	r2, r3
 8042bbe:	68fb      	ldr	r3, [r7, #12]
 8042bc0:	681b      	ldr	r3, [r3, #0]
 8042bc2:	4619      	mov	r1, r3
 8042bc4:	687b      	ldr	r3, [r7, #4]
 8042bc6:	01db      	lsls	r3, r3, #7
 8042bc8:	440b      	add	r3, r1
 8042bca:	3384      	adds	r3, #132	; 0x84
 8042bcc:	4619      	mov	r1, r3
 8042bce:	697b      	ldr	r3, [r7, #20]
 8042bd0:	4313      	orrs	r3, r2
 8042bd2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8042bd4:	68fb      	ldr	r3, [r7, #12]
 8042bd6:	681b      	ldr	r3, [r3, #0]
 8042bd8:	461a      	mov	r2, r3
 8042bda:	687b      	ldr	r3, [r7, #4]
 8042bdc:	01db      	lsls	r3, r3, #7
 8042bde:	4413      	add	r3, r2
 8042be0:	3384      	adds	r3, #132	; 0x84
 8042be2:	695b      	ldr	r3, [r3, #20]
 8042be4:	68fa      	ldr	r2, [r7, #12]
 8042be6:	6812      	ldr	r2, [r2, #0]
 8042be8:	4611      	mov	r1, r2
 8042bea:	687a      	ldr	r2, [r7, #4]
 8042bec:	01d2      	lsls	r2, r2, #7
 8042bee:	440a      	add	r2, r1
 8042bf0:	3284      	adds	r2, #132	; 0x84
 8042bf2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8042bf6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8042bf8:	68fb      	ldr	r3, [r7, #12]
 8042bfa:	681b      	ldr	r3, [r3, #0]
 8042bfc:	461a      	mov	r2, r3
 8042bfe:	687b      	ldr	r3, [r7, #4]
 8042c00:	01db      	lsls	r3, r3, #7
 8042c02:	4413      	add	r3, r2
 8042c04:	3384      	adds	r3, #132	; 0x84
 8042c06:	461a      	mov	r2, r3
 8042c08:	68bb      	ldr	r3, [r7, #8]
 8042c0a:	695b      	ldr	r3, [r3, #20]
 8042c0c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8042c0e:	68fb      	ldr	r3, [r7, #12]
 8042c10:	681b      	ldr	r3, [r3, #0]
 8042c12:	461a      	mov	r2, r3
 8042c14:	687b      	ldr	r3, [r7, #4]
 8042c16:	01db      	lsls	r3, r3, #7
 8042c18:	4413      	add	r3, r2
 8042c1a:	3384      	adds	r3, #132	; 0x84
 8042c1c:	69da      	ldr	r2, [r3, #28]
 8042c1e:	68fb      	ldr	r3, [r7, #12]
 8042c20:	681b      	ldr	r3, [r3, #0]
 8042c22:	4619      	mov	r1, r3
 8042c24:	687b      	ldr	r3, [r7, #4]
 8042c26:	01db      	lsls	r3, r3, #7
 8042c28:	440b      	add	r3, r1
 8042c2a:	3384      	adds	r3, #132	; 0x84
 8042c2c:	4619      	mov	r1, r3
 8042c2e:	4b58      	ldr	r3, [pc, #352]	; (8042d90 <LTDC_SetConfig+0x338>)
 8042c30:	4013      	ands	r3, r2
 8042c32:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8042c34:	68bb      	ldr	r3, [r7, #8]
 8042c36:	69da      	ldr	r2, [r3, #28]
 8042c38:	68bb      	ldr	r3, [r7, #8]
 8042c3a:	6a1b      	ldr	r3, [r3, #32]
 8042c3c:	68f9      	ldr	r1, [r7, #12]
 8042c3e:	6809      	ldr	r1, [r1, #0]
 8042c40:	4608      	mov	r0, r1
 8042c42:	6879      	ldr	r1, [r7, #4]
 8042c44:	01c9      	lsls	r1, r1, #7
 8042c46:	4401      	add	r1, r0
 8042c48:	3184      	adds	r1, #132	; 0x84
 8042c4a:	4313      	orrs	r3, r2
 8042c4c:	61cb      	str	r3, [r1, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8042c4e:	68fb      	ldr	r3, [r7, #12]
 8042c50:	681b      	ldr	r3, [r3, #0]
 8042c52:	461a      	mov	r2, r3
 8042c54:	687b      	ldr	r3, [r7, #4]
 8042c56:	01db      	lsls	r3, r3, #7
 8042c58:	4413      	add	r3, r2
 8042c5a:	3384      	adds	r3, #132	; 0x84
 8042c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042c5e:	68fb      	ldr	r3, [r7, #12]
 8042c60:	681b      	ldr	r3, [r3, #0]
 8042c62:	461a      	mov	r2, r3
 8042c64:	687b      	ldr	r3, [r7, #4]
 8042c66:	01db      	lsls	r3, r3, #7
 8042c68:	4413      	add	r3, r2
 8042c6a:	3384      	adds	r3, #132	; 0x84
 8042c6c:	461a      	mov	r2, r3
 8042c6e:	2300      	movs	r3, #0
 8042c70:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8042c72:	68fb      	ldr	r3, [r7, #12]
 8042c74:	681b      	ldr	r3, [r3, #0]
 8042c76:	461a      	mov	r2, r3
 8042c78:	687b      	ldr	r3, [r7, #4]
 8042c7a:	01db      	lsls	r3, r3, #7
 8042c7c:	4413      	add	r3, r2
 8042c7e:	3384      	adds	r3, #132	; 0x84
 8042c80:	461a      	mov	r2, r3
 8042c82:	68bb      	ldr	r3, [r7, #8]
 8042c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042c86:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8042c88:	68bb      	ldr	r3, [r7, #8]
 8042c8a:	691b      	ldr	r3, [r3, #16]
 8042c8c:	2b00      	cmp	r3, #0
 8042c8e:	d102      	bne.n	8042c96 <LTDC_SetConfig+0x23e>
  {
    tmp = 4;
 8042c90:	2304      	movs	r3, #4
 8042c92:	61fb      	str	r3, [r7, #28]
 8042c94:	e01b      	b.n	8042cce <LTDC_SetConfig+0x276>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8042c96:	68bb      	ldr	r3, [r7, #8]
 8042c98:	691b      	ldr	r3, [r3, #16]
 8042c9a:	2b01      	cmp	r3, #1
 8042c9c:	d102      	bne.n	8042ca4 <LTDC_SetConfig+0x24c>
  {
    tmp = 3;
 8042c9e:	2303      	movs	r3, #3
 8042ca0:	61fb      	str	r3, [r7, #28]
 8042ca2:	e014      	b.n	8042cce <LTDC_SetConfig+0x276>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8042ca4:	68bb      	ldr	r3, [r7, #8]
 8042ca6:	691b      	ldr	r3, [r3, #16]
 8042ca8:	2b04      	cmp	r3, #4
 8042caa:	d00b      	beq.n	8042cc4 <LTDC_SetConfig+0x26c>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8042cac:	68bb      	ldr	r3, [r7, #8]
 8042cae:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8042cb0:	2b02      	cmp	r3, #2
 8042cb2:	d007      	beq.n	8042cc4 <LTDC_SetConfig+0x26c>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8042cb4:	68bb      	ldr	r3, [r7, #8]
 8042cb6:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8042cb8:	2b03      	cmp	r3, #3
 8042cba:	d003      	beq.n	8042cc4 <LTDC_SetConfig+0x26c>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8042cbc:	68bb      	ldr	r3, [r7, #8]
 8042cbe:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8042cc0:	2b07      	cmp	r3, #7
 8042cc2:	d102      	bne.n	8042cca <LTDC_SetConfig+0x272>
  {
    tmp = 2;
 8042cc4:	2302      	movs	r3, #2
 8042cc6:	61fb      	str	r3, [r7, #28]
 8042cc8:	e001      	b.n	8042cce <LTDC_SetConfig+0x276>
  }
  else
  {
    tmp = 1;
 8042cca:	2301      	movs	r3, #1
 8042ccc:	61fb      	str	r3, [r7, #28]
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8042cce:	68fb      	ldr	r3, [r7, #12]
 8042cd0:	681b      	ldr	r3, [r3, #0]
 8042cd2:	461a      	mov	r2, r3
 8042cd4:	687b      	ldr	r3, [r7, #4]
 8042cd6:	01db      	lsls	r3, r3, #7
 8042cd8:	4413      	add	r3, r2
 8042cda:	3384      	adds	r3, #132	; 0x84
 8042cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042cde:	68fa      	ldr	r2, [r7, #12]
 8042ce0:	6812      	ldr	r2, [r2, #0]
 8042ce2:	4611      	mov	r1, r2
 8042ce4:	687a      	ldr	r2, [r7, #4]
 8042ce6:	01d2      	lsls	r2, r2, #7
 8042ce8:	440a      	add	r2, r1
 8042cea:	3284      	adds	r2, #132	; 0x84
 8042cec:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8042cf0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8042cf2:	68bb      	ldr	r3, [r7, #8]
 8042cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042cf6:	69fa      	ldr	r2, [r7, #28]
 8042cf8:	fb02 f303 	mul.w	r3, r2, r3
 8042cfc:	041a      	lsls	r2, r3, #16
 8042cfe:	68bb      	ldr	r3, [r7, #8]
 8042d00:	6859      	ldr	r1, [r3, #4]
 8042d02:	68bb      	ldr	r3, [r7, #8]
 8042d04:	681b      	ldr	r3, [r3, #0]
 8042d06:	1acb      	subs	r3, r1, r3
 8042d08:	69f9      	ldr	r1, [r7, #28]
 8042d0a:	fb01 f303 	mul.w	r3, r1, r3
 8042d0e:	3303      	adds	r3, #3
 8042d10:	68f9      	ldr	r1, [r7, #12]
 8042d12:	6809      	ldr	r1, [r1, #0]
 8042d14:	4608      	mov	r0, r1
 8042d16:	6879      	ldr	r1, [r7, #4]
 8042d18:	01c9      	lsls	r1, r1, #7
 8042d1a:	4401      	add	r1, r0
 8042d1c:	3184      	adds	r1, #132	; 0x84
 8042d1e:	4313      	orrs	r3, r2
 8042d20:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8042d22:	68fb      	ldr	r3, [r7, #12]
 8042d24:	681b      	ldr	r3, [r3, #0]
 8042d26:	461a      	mov	r2, r3
 8042d28:	687b      	ldr	r3, [r7, #4]
 8042d2a:	01db      	lsls	r3, r3, #7
 8042d2c:	4413      	add	r3, r2
 8042d2e:	3384      	adds	r3, #132	; 0x84
 8042d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8042d32:	68fb      	ldr	r3, [r7, #12]
 8042d34:	681b      	ldr	r3, [r3, #0]
 8042d36:	4619      	mov	r1, r3
 8042d38:	687b      	ldr	r3, [r7, #4]
 8042d3a:	01db      	lsls	r3, r3, #7
 8042d3c:	440b      	add	r3, r1
 8042d3e:	3384      	adds	r3, #132	; 0x84
 8042d40:	4619      	mov	r1, r3
 8042d42:	4b14      	ldr	r3, [pc, #80]	; (8042d94 <LTDC_SetConfig+0x33c>)
 8042d44:	4013      	ands	r3, r2
 8042d46:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8042d48:	68fb      	ldr	r3, [r7, #12]
 8042d4a:	681b      	ldr	r3, [r3, #0]
 8042d4c:	461a      	mov	r2, r3
 8042d4e:	687b      	ldr	r3, [r7, #4]
 8042d50:	01db      	lsls	r3, r3, #7
 8042d52:	4413      	add	r3, r2
 8042d54:	3384      	adds	r3, #132	; 0x84
 8042d56:	461a      	mov	r2, r3
 8042d58:	68bb      	ldr	r3, [r7, #8]
 8042d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042d5c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8042d5e:	68fb      	ldr	r3, [r7, #12]
 8042d60:	681b      	ldr	r3, [r3, #0]
 8042d62:	461a      	mov	r2, r3
 8042d64:	687b      	ldr	r3, [r7, #4]
 8042d66:	01db      	lsls	r3, r3, #7
 8042d68:	4413      	add	r3, r2
 8042d6a:	3384      	adds	r3, #132	; 0x84
 8042d6c:	681b      	ldr	r3, [r3, #0]
 8042d6e:	68fa      	ldr	r2, [r7, #12]
 8042d70:	6812      	ldr	r2, [r2, #0]
 8042d72:	4611      	mov	r1, r2
 8042d74:	687a      	ldr	r2, [r7, #4]
 8042d76:	01d2      	lsls	r2, r2, #7
 8042d78:	440a      	add	r2, r1
 8042d7a:	3284      	adds	r2, #132	; 0x84
 8042d7c:	f043 0301 	orr.w	r3, r3, #1
 8042d80:	6013      	str	r3, [r2, #0]
}
 8042d82:	bf00      	nop
 8042d84:	3724      	adds	r7, #36	; 0x24
 8042d86:	46bd      	mov	sp, r7
 8042d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042d8c:	4770      	bx	lr
 8042d8e:	bf00      	nop
 8042d90:	fffff8f8 	.word	0xfffff8f8
 8042d94:	fffff800 	.word	0xfffff800

08042d98 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8042d98:	b580      	push	{r7, lr}
 8042d9a:	b082      	sub	sp, #8
 8042d9c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8042d9e:	2300      	movs	r3, #0
 8042da0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8042da2:	4b23      	ldr	r3, [pc, #140]	; (8042e30 <HAL_PWREx_EnableOverDrive+0x98>)
 8042da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042da6:	4a22      	ldr	r2, [pc, #136]	; (8042e30 <HAL_PWREx_EnableOverDrive+0x98>)
 8042da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8042dac:	6413      	str	r3, [r2, #64]	; 0x40
 8042dae:	4b20      	ldr	r3, [pc, #128]	; (8042e30 <HAL_PWREx_EnableOverDrive+0x98>)
 8042db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8042db6:	603b      	str	r3, [r7, #0]
 8042db8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8042dba:	4b1e      	ldr	r3, [pc, #120]	; (8042e34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8042dbc:	681b      	ldr	r3, [r3, #0]
 8042dbe:	4a1d      	ldr	r2, [pc, #116]	; (8042e34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8042dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8042dc4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8042dc6:	f7fd fee9 	bl	8040b9c <HAL_GetTick>
 8042dca:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8042dcc:	e009      	b.n	8042de2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8042dce:	f7fd fee5 	bl	8040b9c <HAL_GetTick>
 8042dd2:	4602      	mov	r2, r0
 8042dd4:	687b      	ldr	r3, [r7, #4]
 8042dd6:	1ad3      	subs	r3, r2, r3
 8042dd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8042ddc:	d901      	bls.n	8042de2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8042dde:	2303      	movs	r3, #3
 8042de0:	e022      	b.n	8042e28 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8042de2:	4b14      	ldr	r3, [pc, #80]	; (8042e34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8042de4:	685b      	ldr	r3, [r3, #4]
 8042de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8042dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8042dee:	d1ee      	bne.n	8042dce <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8042df0:	4b10      	ldr	r3, [pc, #64]	; (8042e34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8042df2:	681b      	ldr	r3, [r3, #0]
 8042df4:	4a0f      	ldr	r2, [pc, #60]	; (8042e34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8042df6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8042dfa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8042dfc:	f7fd fece 	bl	8040b9c <HAL_GetTick>
 8042e00:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8042e02:	e009      	b.n	8042e18 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8042e04:	f7fd feca 	bl	8040b9c <HAL_GetTick>
 8042e08:	4602      	mov	r2, r0
 8042e0a:	687b      	ldr	r3, [r7, #4]
 8042e0c:	1ad3      	subs	r3, r2, r3
 8042e0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8042e12:	d901      	bls.n	8042e18 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8042e14:	2303      	movs	r3, #3
 8042e16:	e007      	b.n	8042e28 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8042e18:	4b06      	ldr	r3, [pc, #24]	; (8042e34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8042e1a:	685b      	ldr	r3, [r3, #4]
 8042e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8042e20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8042e24:	d1ee      	bne.n	8042e04 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8042e26:	2300      	movs	r3, #0
}
 8042e28:	4618      	mov	r0, r3
 8042e2a:	3708      	adds	r7, #8
 8042e2c:	46bd      	mov	sp, r7
 8042e2e:	bd80      	pop	{r7, pc}
 8042e30:	40023800 	.word	0x40023800
 8042e34:	40007000 	.word	0x40007000

08042e38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8042e38:	b580      	push	{r7, lr}
 8042e3a:	b086      	sub	sp, #24
 8042e3c:	af00      	add	r7, sp, #0
 8042e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8042e40:	2300      	movs	r3, #0
 8042e42:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8042e44:	687b      	ldr	r3, [r7, #4]
 8042e46:	2b00      	cmp	r3, #0
 8042e48:	d101      	bne.n	8042e4e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8042e4a:	2301      	movs	r3, #1
 8042e4c:	e291      	b.n	8043372 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8042e4e:	687b      	ldr	r3, [r7, #4]
 8042e50:	681b      	ldr	r3, [r3, #0]
 8042e52:	f003 0301 	and.w	r3, r3, #1
 8042e56:	2b00      	cmp	r3, #0
 8042e58:	f000 8087 	beq.w	8042f6a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8042e5c:	4b96      	ldr	r3, [pc, #600]	; (80430b8 <HAL_RCC_OscConfig+0x280>)
 8042e5e:	689b      	ldr	r3, [r3, #8]
 8042e60:	f003 030c 	and.w	r3, r3, #12
 8042e64:	2b04      	cmp	r3, #4
 8042e66:	d00c      	beq.n	8042e82 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8042e68:	4b93      	ldr	r3, [pc, #588]	; (80430b8 <HAL_RCC_OscConfig+0x280>)
 8042e6a:	689b      	ldr	r3, [r3, #8]
 8042e6c:	f003 030c 	and.w	r3, r3, #12
 8042e70:	2b08      	cmp	r3, #8
 8042e72:	d112      	bne.n	8042e9a <HAL_RCC_OscConfig+0x62>
 8042e74:	4b90      	ldr	r3, [pc, #576]	; (80430b8 <HAL_RCC_OscConfig+0x280>)
 8042e76:	685b      	ldr	r3, [r3, #4]
 8042e78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8042e7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8042e80:	d10b      	bne.n	8042e9a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8042e82:	4b8d      	ldr	r3, [pc, #564]	; (80430b8 <HAL_RCC_OscConfig+0x280>)
 8042e84:	681b      	ldr	r3, [r3, #0]
 8042e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8042e8a:	2b00      	cmp	r3, #0
 8042e8c:	d06c      	beq.n	8042f68 <HAL_RCC_OscConfig+0x130>
 8042e8e:	687b      	ldr	r3, [r7, #4]
 8042e90:	685b      	ldr	r3, [r3, #4]
 8042e92:	2b00      	cmp	r3, #0
 8042e94:	d168      	bne.n	8042f68 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8042e96:	2301      	movs	r3, #1
 8042e98:	e26b      	b.n	8043372 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8042e9a:	687b      	ldr	r3, [r7, #4]
 8042e9c:	685b      	ldr	r3, [r3, #4]
 8042e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8042ea2:	d106      	bne.n	8042eb2 <HAL_RCC_OscConfig+0x7a>
 8042ea4:	4b84      	ldr	r3, [pc, #528]	; (80430b8 <HAL_RCC_OscConfig+0x280>)
 8042ea6:	681b      	ldr	r3, [r3, #0]
 8042ea8:	4a83      	ldr	r2, [pc, #524]	; (80430b8 <HAL_RCC_OscConfig+0x280>)
 8042eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8042eae:	6013      	str	r3, [r2, #0]
 8042eb0:	e02e      	b.n	8042f10 <HAL_RCC_OscConfig+0xd8>
 8042eb2:	687b      	ldr	r3, [r7, #4]
 8042eb4:	685b      	ldr	r3, [r3, #4]
 8042eb6:	2b00      	cmp	r3, #0
 8042eb8:	d10c      	bne.n	8042ed4 <HAL_RCC_OscConfig+0x9c>
 8042eba:	4b7f      	ldr	r3, [pc, #508]	; (80430b8 <HAL_RCC_OscConfig+0x280>)
 8042ebc:	681b      	ldr	r3, [r3, #0]
 8042ebe:	4a7e      	ldr	r2, [pc, #504]	; (80430b8 <HAL_RCC_OscConfig+0x280>)
 8042ec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8042ec4:	6013      	str	r3, [r2, #0]
 8042ec6:	4b7c      	ldr	r3, [pc, #496]	; (80430b8 <HAL_RCC_OscConfig+0x280>)
 8042ec8:	681b      	ldr	r3, [r3, #0]
 8042eca:	4a7b      	ldr	r2, [pc, #492]	; (80430b8 <HAL_RCC_OscConfig+0x280>)
 8042ecc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8042ed0:	6013      	str	r3, [r2, #0]
 8042ed2:	e01d      	b.n	8042f10 <HAL_RCC_OscConfig+0xd8>
 8042ed4:	687b      	ldr	r3, [r7, #4]
 8042ed6:	685b      	ldr	r3, [r3, #4]
 8042ed8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8042edc:	d10c      	bne.n	8042ef8 <HAL_RCC_OscConfig+0xc0>
 8042ede:	4b76      	ldr	r3, [pc, #472]	; (80430b8 <HAL_RCC_OscConfig+0x280>)
 8042ee0:	681b      	ldr	r3, [r3, #0]
 8042ee2:	4a75      	ldr	r2, [pc, #468]	; (80430b8 <HAL_RCC_OscConfig+0x280>)
 8042ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8042ee8:	6013      	str	r3, [r2, #0]
 8042eea:	4b73      	ldr	r3, [pc, #460]	; (80430b8 <HAL_RCC_OscConfig+0x280>)
 8042eec:	681b      	ldr	r3, [r3, #0]
 8042eee:	4a72      	ldr	r2, [pc, #456]	; (80430b8 <HAL_RCC_OscConfig+0x280>)
 8042ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8042ef4:	6013      	str	r3, [r2, #0]
 8042ef6:	e00b      	b.n	8042f10 <HAL_RCC_OscConfig+0xd8>
 8042ef8:	4b6f      	ldr	r3, [pc, #444]	; (80430b8 <HAL_RCC_OscConfig+0x280>)
 8042efa:	681b      	ldr	r3, [r3, #0]
 8042efc:	4a6e      	ldr	r2, [pc, #440]	; (80430b8 <HAL_RCC_OscConfig+0x280>)
 8042efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8042f02:	6013      	str	r3, [r2, #0]
 8042f04:	4b6c      	ldr	r3, [pc, #432]	; (80430b8 <HAL_RCC_OscConfig+0x280>)
 8042f06:	681b      	ldr	r3, [r3, #0]
 8042f08:	4a6b      	ldr	r2, [pc, #428]	; (80430b8 <HAL_RCC_OscConfig+0x280>)
 8042f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8042f0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8042f10:	687b      	ldr	r3, [r7, #4]
 8042f12:	685b      	ldr	r3, [r3, #4]
 8042f14:	2b00      	cmp	r3, #0
 8042f16:	d013      	beq.n	8042f40 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8042f18:	f7fd fe40 	bl	8040b9c <HAL_GetTick>
 8042f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8042f1e:	e008      	b.n	8042f32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8042f20:	f7fd fe3c 	bl	8040b9c <HAL_GetTick>
 8042f24:	4602      	mov	r2, r0
 8042f26:	693b      	ldr	r3, [r7, #16]
 8042f28:	1ad3      	subs	r3, r2, r3
 8042f2a:	2b64      	cmp	r3, #100	; 0x64
 8042f2c:	d901      	bls.n	8042f32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8042f2e:	2303      	movs	r3, #3
 8042f30:	e21f      	b.n	8043372 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8042f32:	4b61      	ldr	r3, [pc, #388]	; (80430b8 <HAL_RCC_OscConfig+0x280>)
 8042f34:	681b      	ldr	r3, [r3, #0]
 8042f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8042f3a:	2b00      	cmp	r3, #0
 8042f3c:	d0f0      	beq.n	8042f20 <HAL_RCC_OscConfig+0xe8>
 8042f3e:	e014      	b.n	8042f6a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8042f40:	f7fd fe2c 	bl	8040b9c <HAL_GetTick>
 8042f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8042f46:	e008      	b.n	8042f5a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8042f48:	f7fd fe28 	bl	8040b9c <HAL_GetTick>
 8042f4c:	4602      	mov	r2, r0
 8042f4e:	693b      	ldr	r3, [r7, #16]
 8042f50:	1ad3      	subs	r3, r2, r3
 8042f52:	2b64      	cmp	r3, #100	; 0x64
 8042f54:	d901      	bls.n	8042f5a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8042f56:	2303      	movs	r3, #3
 8042f58:	e20b      	b.n	8043372 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8042f5a:	4b57      	ldr	r3, [pc, #348]	; (80430b8 <HAL_RCC_OscConfig+0x280>)
 8042f5c:	681b      	ldr	r3, [r3, #0]
 8042f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8042f62:	2b00      	cmp	r3, #0
 8042f64:	d1f0      	bne.n	8042f48 <HAL_RCC_OscConfig+0x110>
 8042f66:	e000      	b.n	8042f6a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8042f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8042f6a:	687b      	ldr	r3, [r7, #4]
 8042f6c:	681b      	ldr	r3, [r3, #0]
 8042f6e:	f003 0302 	and.w	r3, r3, #2
 8042f72:	2b00      	cmp	r3, #0
 8042f74:	d069      	beq.n	804304a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8042f76:	4b50      	ldr	r3, [pc, #320]	; (80430b8 <HAL_RCC_OscConfig+0x280>)
 8042f78:	689b      	ldr	r3, [r3, #8]
 8042f7a:	f003 030c 	and.w	r3, r3, #12
 8042f7e:	2b00      	cmp	r3, #0
 8042f80:	d00b      	beq.n	8042f9a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8042f82:	4b4d      	ldr	r3, [pc, #308]	; (80430b8 <HAL_RCC_OscConfig+0x280>)
 8042f84:	689b      	ldr	r3, [r3, #8]
 8042f86:	f003 030c 	and.w	r3, r3, #12
 8042f8a:	2b08      	cmp	r3, #8
 8042f8c:	d11c      	bne.n	8042fc8 <HAL_RCC_OscConfig+0x190>
 8042f8e:	4b4a      	ldr	r3, [pc, #296]	; (80430b8 <HAL_RCC_OscConfig+0x280>)
 8042f90:	685b      	ldr	r3, [r3, #4]
 8042f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8042f96:	2b00      	cmp	r3, #0
 8042f98:	d116      	bne.n	8042fc8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8042f9a:	4b47      	ldr	r3, [pc, #284]	; (80430b8 <HAL_RCC_OscConfig+0x280>)
 8042f9c:	681b      	ldr	r3, [r3, #0]
 8042f9e:	f003 0302 	and.w	r3, r3, #2
 8042fa2:	2b00      	cmp	r3, #0
 8042fa4:	d005      	beq.n	8042fb2 <HAL_RCC_OscConfig+0x17a>
 8042fa6:	687b      	ldr	r3, [r7, #4]
 8042fa8:	68db      	ldr	r3, [r3, #12]
 8042faa:	2b01      	cmp	r3, #1
 8042fac:	d001      	beq.n	8042fb2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8042fae:	2301      	movs	r3, #1
 8042fb0:	e1df      	b.n	8043372 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8042fb2:	4b41      	ldr	r3, [pc, #260]	; (80430b8 <HAL_RCC_OscConfig+0x280>)
 8042fb4:	681b      	ldr	r3, [r3, #0]
 8042fb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8042fba:	687b      	ldr	r3, [r7, #4]
 8042fbc:	691b      	ldr	r3, [r3, #16]
 8042fbe:	00db      	lsls	r3, r3, #3
 8042fc0:	493d      	ldr	r1, [pc, #244]	; (80430b8 <HAL_RCC_OscConfig+0x280>)
 8042fc2:	4313      	orrs	r3, r2
 8042fc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8042fc6:	e040      	b.n	804304a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8042fc8:	687b      	ldr	r3, [r7, #4]
 8042fca:	68db      	ldr	r3, [r3, #12]
 8042fcc:	2b00      	cmp	r3, #0
 8042fce:	d023      	beq.n	8043018 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8042fd0:	4b39      	ldr	r3, [pc, #228]	; (80430b8 <HAL_RCC_OscConfig+0x280>)
 8042fd2:	681b      	ldr	r3, [r3, #0]
 8042fd4:	4a38      	ldr	r2, [pc, #224]	; (80430b8 <HAL_RCC_OscConfig+0x280>)
 8042fd6:	f043 0301 	orr.w	r3, r3, #1
 8042fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8042fdc:	f7fd fdde 	bl	8040b9c <HAL_GetTick>
 8042fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8042fe2:	e008      	b.n	8042ff6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8042fe4:	f7fd fdda 	bl	8040b9c <HAL_GetTick>
 8042fe8:	4602      	mov	r2, r0
 8042fea:	693b      	ldr	r3, [r7, #16]
 8042fec:	1ad3      	subs	r3, r2, r3
 8042fee:	2b02      	cmp	r3, #2
 8042ff0:	d901      	bls.n	8042ff6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8042ff2:	2303      	movs	r3, #3
 8042ff4:	e1bd      	b.n	8043372 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8042ff6:	4b30      	ldr	r3, [pc, #192]	; (80430b8 <HAL_RCC_OscConfig+0x280>)
 8042ff8:	681b      	ldr	r3, [r3, #0]
 8042ffa:	f003 0302 	and.w	r3, r3, #2
 8042ffe:	2b00      	cmp	r3, #0
 8043000:	d0f0      	beq.n	8042fe4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8043002:	4b2d      	ldr	r3, [pc, #180]	; (80430b8 <HAL_RCC_OscConfig+0x280>)
 8043004:	681b      	ldr	r3, [r3, #0]
 8043006:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 804300a:	687b      	ldr	r3, [r7, #4]
 804300c:	691b      	ldr	r3, [r3, #16]
 804300e:	00db      	lsls	r3, r3, #3
 8043010:	4929      	ldr	r1, [pc, #164]	; (80430b8 <HAL_RCC_OscConfig+0x280>)
 8043012:	4313      	orrs	r3, r2
 8043014:	600b      	str	r3, [r1, #0]
 8043016:	e018      	b.n	804304a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8043018:	4b27      	ldr	r3, [pc, #156]	; (80430b8 <HAL_RCC_OscConfig+0x280>)
 804301a:	681b      	ldr	r3, [r3, #0]
 804301c:	4a26      	ldr	r2, [pc, #152]	; (80430b8 <HAL_RCC_OscConfig+0x280>)
 804301e:	f023 0301 	bic.w	r3, r3, #1
 8043022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8043024:	f7fd fdba 	bl	8040b9c <HAL_GetTick>
 8043028:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 804302a:	e008      	b.n	804303e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 804302c:	f7fd fdb6 	bl	8040b9c <HAL_GetTick>
 8043030:	4602      	mov	r2, r0
 8043032:	693b      	ldr	r3, [r7, #16]
 8043034:	1ad3      	subs	r3, r2, r3
 8043036:	2b02      	cmp	r3, #2
 8043038:	d901      	bls.n	804303e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 804303a:	2303      	movs	r3, #3
 804303c:	e199      	b.n	8043372 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 804303e:	4b1e      	ldr	r3, [pc, #120]	; (80430b8 <HAL_RCC_OscConfig+0x280>)
 8043040:	681b      	ldr	r3, [r3, #0]
 8043042:	f003 0302 	and.w	r3, r3, #2
 8043046:	2b00      	cmp	r3, #0
 8043048:	d1f0      	bne.n	804302c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 804304a:	687b      	ldr	r3, [r7, #4]
 804304c:	681b      	ldr	r3, [r3, #0]
 804304e:	f003 0308 	and.w	r3, r3, #8
 8043052:	2b00      	cmp	r3, #0
 8043054:	d038      	beq.n	80430c8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8043056:	687b      	ldr	r3, [r7, #4]
 8043058:	695b      	ldr	r3, [r3, #20]
 804305a:	2b00      	cmp	r3, #0
 804305c:	d019      	beq.n	8043092 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 804305e:	4b16      	ldr	r3, [pc, #88]	; (80430b8 <HAL_RCC_OscConfig+0x280>)
 8043060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8043062:	4a15      	ldr	r2, [pc, #84]	; (80430b8 <HAL_RCC_OscConfig+0x280>)
 8043064:	f043 0301 	orr.w	r3, r3, #1
 8043068:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 804306a:	f7fd fd97 	bl	8040b9c <HAL_GetTick>
 804306e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8043070:	e008      	b.n	8043084 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8043072:	f7fd fd93 	bl	8040b9c <HAL_GetTick>
 8043076:	4602      	mov	r2, r0
 8043078:	693b      	ldr	r3, [r7, #16]
 804307a:	1ad3      	subs	r3, r2, r3
 804307c:	2b02      	cmp	r3, #2
 804307e:	d901      	bls.n	8043084 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8043080:	2303      	movs	r3, #3
 8043082:	e176      	b.n	8043372 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8043084:	4b0c      	ldr	r3, [pc, #48]	; (80430b8 <HAL_RCC_OscConfig+0x280>)
 8043086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8043088:	f003 0302 	and.w	r3, r3, #2
 804308c:	2b00      	cmp	r3, #0
 804308e:	d0f0      	beq.n	8043072 <HAL_RCC_OscConfig+0x23a>
 8043090:	e01a      	b.n	80430c8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8043092:	4b09      	ldr	r3, [pc, #36]	; (80430b8 <HAL_RCC_OscConfig+0x280>)
 8043094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8043096:	4a08      	ldr	r2, [pc, #32]	; (80430b8 <HAL_RCC_OscConfig+0x280>)
 8043098:	f023 0301 	bic.w	r3, r3, #1
 804309c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 804309e:	f7fd fd7d 	bl	8040b9c <HAL_GetTick>
 80430a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80430a4:	e00a      	b.n	80430bc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80430a6:	f7fd fd79 	bl	8040b9c <HAL_GetTick>
 80430aa:	4602      	mov	r2, r0
 80430ac:	693b      	ldr	r3, [r7, #16]
 80430ae:	1ad3      	subs	r3, r2, r3
 80430b0:	2b02      	cmp	r3, #2
 80430b2:	d903      	bls.n	80430bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80430b4:	2303      	movs	r3, #3
 80430b6:	e15c      	b.n	8043372 <HAL_RCC_OscConfig+0x53a>
 80430b8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80430bc:	4b91      	ldr	r3, [pc, #580]	; (8043304 <HAL_RCC_OscConfig+0x4cc>)
 80430be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80430c0:	f003 0302 	and.w	r3, r3, #2
 80430c4:	2b00      	cmp	r3, #0
 80430c6:	d1ee      	bne.n	80430a6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80430c8:	687b      	ldr	r3, [r7, #4]
 80430ca:	681b      	ldr	r3, [r3, #0]
 80430cc:	f003 0304 	and.w	r3, r3, #4
 80430d0:	2b00      	cmp	r3, #0
 80430d2:	f000 80a4 	beq.w	804321e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80430d6:	4b8b      	ldr	r3, [pc, #556]	; (8043304 <HAL_RCC_OscConfig+0x4cc>)
 80430d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80430da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80430de:	2b00      	cmp	r3, #0
 80430e0:	d10d      	bne.n	80430fe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80430e2:	4b88      	ldr	r3, [pc, #544]	; (8043304 <HAL_RCC_OscConfig+0x4cc>)
 80430e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80430e6:	4a87      	ldr	r2, [pc, #540]	; (8043304 <HAL_RCC_OscConfig+0x4cc>)
 80430e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80430ec:	6413      	str	r3, [r2, #64]	; 0x40
 80430ee:	4b85      	ldr	r3, [pc, #532]	; (8043304 <HAL_RCC_OscConfig+0x4cc>)
 80430f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80430f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80430f6:	60bb      	str	r3, [r7, #8]
 80430f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80430fa:	2301      	movs	r3, #1
 80430fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80430fe:	4b82      	ldr	r3, [pc, #520]	; (8043308 <HAL_RCC_OscConfig+0x4d0>)
 8043100:	681b      	ldr	r3, [r3, #0]
 8043102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8043106:	2b00      	cmp	r3, #0
 8043108:	d118      	bne.n	804313c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 804310a:	4b7f      	ldr	r3, [pc, #508]	; (8043308 <HAL_RCC_OscConfig+0x4d0>)
 804310c:	681b      	ldr	r3, [r3, #0]
 804310e:	4a7e      	ldr	r2, [pc, #504]	; (8043308 <HAL_RCC_OscConfig+0x4d0>)
 8043110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8043114:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8043116:	f7fd fd41 	bl	8040b9c <HAL_GetTick>
 804311a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 804311c:	e008      	b.n	8043130 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 804311e:	f7fd fd3d 	bl	8040b9c <HAL_GetTick>
 8043122:	4602      	mov	r2, r0
 8043124:	693b      	ldr	r3, [r7, #16]
 8043126:	1ad3      	subs	r3, r2, r3
 8043128:	2b64      	cmp	r3, #100	; 0x64
 804312a:	d901      	bls.n	8043130 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 804312c:	2303      	movs	r3, #3
 804312e:	e120      	b.n	8043372 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8043130:	4b75      	ldr	r3, [pc, #468]	; (8043308 <HAL_RCC_OscConfig+0x4d0>)
 8043132:	681b      	ldr	r3, [r3, #0]
 8043134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8043138:	2b00      	cmp	r3, #0
 804313a:	d0f0      	beq.n	804311e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 804313c:	687b      	ldr	r3, [r7, #4]
 804313e:	689b      	ldr	r3, [r3, #8]
 8043140:	2b01      	cmp	r3, #1
 8043142:	d106      	bne.n	8043152 <HAL_RCC_OscConfig+0x31a>
 8043144:	4b6f      	ldr	r3, [pc, #444]	; (8043304 <HAL_RCC_OscConfig+0x4cc>)
 8043146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8043148:	4a6e      	ldr	r2, [pc, #440]	; (8043304 <HAL_RCC_OscConfig+0x4cc>)
 804314a:	f043 0301 	orr.w	r3, r3, #1
 804314e:	6713      	str	r3, [r2, #112]	; 0x70
 8043150:	e02d      	b.n	80431ae <HAL_RCC_OscConfig+0x376>
 8043152:	687b      	ldr	r3, [r7, #4]
 8043154:	689b      	ldr	r3, [r3, #8]
 8043156:	2b00      	cmp	r3, #0
 8043158:	d10c      	bne.n	8043174 <HAL_RCC_OscConfig+0x33c>
 804315a:	4b6a      	ldr	r3, [pc, #424]	; (8043304 <HAL_RCC_OscConfig+0x4cc>)
 804315c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804315e:	4a69      	ldr	r2, [pc, #420]	; (8043304 <HAL_RCC_OscConfig+0x4cc>)
 8043160:	f023 0301 	bic.w	r3, r3, #1
 8043164:	6713      	str	r3, [r2, #112]	; 0x70
 8043166:	4b67      	ldr	r3, [pc, #412]	; (8043304 <HAL_RCC_OscConfig+0x4cc>)
 8043168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804316a:	4a66      	ldr	r2, [pc, #408]	; (8043304 <HAL_RCC_OscConfig+0x4cc>)
 804316c:	f023 0304 	bic.w	r3, r3, #4
 8043170:	6713      	str	r3, [r2, #112]	; 0x70
 8043172:	e01c      	b.n	80431ae <HAL_RCC_OscConfig+0x376>
 8043174:	687b      	ldr	r3, [r7, #4]
 8043176:	689b      	ldr	r3, [r3, #8]
 8043178:	2b05      	cmp	r3, #5
 804317a:	d10c      	bne.n	8043196 <HAL_RCC_OscConfig+0x35e>
 804317c:	4b61      	ldr	r3, [pc, #388]	; (8043304 <HAL_RCC_OscConfig+0x4cc>)
 804317e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8043180:	4a60      	ldr	r2, [pc, #384]	; (8043304 <HAL_RCC_OscConfig+0x4cc>)
 8043182:	f043 0304 	orr.w	r3, r3, #4
 8043186:	6713      	str	r3, [r2, #112]	; 0x70
 8043188:	4b5e      	ldr	r3, [pc, #376]	; (8043304 <HAL_RCC_OscConfig+0x4cc>)
 804318a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804318c:	4a5d      	ldr	r2, [pc, #372]	; (8043304 <HAL_RCC_OscConfig+0x4cc>)
 804318e:	f043 0301 	orr.w	r3, r3, #1
 8043192:	6713      	str	r3, [r2, #112]	; 0x70
 8043194:	e00b      	b.n	80431ae <HAL_RCC_OscConfig+0x376>
 8043196:	4b5b      	ldr	r3, [pc, #364]	; (8043304 <HAL_RCC_OscConfig+0x4cc>)
 8043198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804319a:	4a5a      	ldr	r2, [pc, #360]	; (8043304 <HAL_RCC_OscConfig+0x4cc>)
 804319c:	f023 0301 	bic.w	r3, r3, #1
 80431a0:	6713      	str	r3, [r2, #112]	; 0x70
 80431a2:	4b58      	ldr	r3, [pc, #352]	; (8043304 <HAL_RCC_OscConfig+0x4cc>)
 80431a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80431a6:	4a57      	ldr	r2, [pc, #348]	; (8043304 <HAL_RCC_OscConfig+0x4cc>)
 80431a8:	f023 0304 	bic.w	r3, r3, #4
 80431ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80431ae:	687b      	ldr	r3, [r7, #4]
 80431b0:	689b      	ldr	r3, [r3, #8]
 80431b2:	2b00      	cmp	r3, #0
 80431b4:	d015      	beq.n	80431e2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80431b6:	f7fd fcf1 	bl	8040b9c <HAL_GetTick>
 80431ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80431bc:	e00a      	b.n	80431d4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80431be:	f7fd fced 	bl	8040b9c <HAL_GetTick>
 80431c2:	4602      	mov	r2, r0
 80431c4:	693b      	ldr	r3, [r7, #16]
 80431c6:	1ad3      	subs	r3, r2, r3
 80431c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80431cc:	4293      	cmp	r3, r2
 80431ce:	d901      	bls.n	80431d4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80431d0:	2303      	movs	r3, #3
 80431d2:	e0ce      	b.n	8043372 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80431d4:	4b4b      	ldr	r3, [pc, #300]	; (8043304 <HAL_RCC_OscConfig+0x4cc>)
 80431d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80431d8:	f003 0302 	and.w	r3, r3, #2
 80431dc:	2b00      	cmp	r3, #0
 80431de:	d0ee      	beq.n	80431be <HAL_RCC_OscConfig+0x386>
 80431e0:	e014      	b.n	804320c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80431e2:	f7fd fcdb 	bl	8040b9c <HAL_GetTick>
 80431e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80431e8:	e00a      	b.n	8043200 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80431ea:	f7fd fcd7 	bl	8040b9c <HAL_GetTick>
 80431ee:	4602      	mov	r2, r0
 80431f0:	693b      	ldr	r3, [r7, #16]
 80431f2:	1ad3      	subs	r3, r2, r3
 80431f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80431f8:	4293      	cmp	r3, r2
 80431fa:	d901      	bls.n	8043200 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80431fc:	2303      	movs	r3, #3
 80431fe:	e0b8      	b.n	8043372 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8043200:	4b40      	ldr	r3, [pc, #256]	; (8043304 <HAL_RCC_OscConfig+0x4cc>)
 8043202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8043204:	f003 0302 	and.w	r3, r3, #2
 8043208:	2b00      	cmp	r3, #0
 804320a:	d1ee      	bne.n	80431ea <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 804320c:	7dfb      	ldrb	r3, [r7, #23]
 804320e:	2b01      	cmp	r3, #1
 8043210:	d105      	bne.n	804321e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8043212:	4b3c      	ldr	r3, [pc, #240]	; (8043304 <HAL_RCC_OscConfig+0x4cc>)
 8043214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043216:	4a3b      	ldr	r2, [pc, #236]	; (8043304 <HAL_RCC_OscConfig+0x4cc>)
 8043218:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 804321c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 804321e:	687b      	ldr	r3, [r7, #4]
 8043220:	699b      	ldr	r3, [r3, #24]
 8043222:	2b00      	cmp	r3, #0
 8043224:	f000 80a4 	beq.w	8043370 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8043228:	4b36      	ldr	r3, [pc, #216]	; (8043304 <HAL_RCC_OscConfig+0x4cc>)
 804322a:	689b      	ldr	r3, [r3, #8]
 804322c:	f003 030c 	and.w	r3, r3, #12
 8043230:	2b08      	cmp	r3, #8
 8043232:	d06b      	beq.n	804330c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8043234:	687b      	ldr	r3, [r7, #4]
 8043236:	699b      	ldr	r3, [r3, #24]
 8043238:	2b02      	cmp	r3, #2
 804323a:	d149      	bne.n	80432d0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 804323c:	4b31      	ldr	r3, [pc, #196]	; (8043304 <HAL_RCC_OscConfig+0x4cc>)
 804323e:	681b      	ldr	r3, [r3, #0]
 8043240:	4a30      	ldr	r2, [pc, #192]	; (8043304 <HAL_RCC_OscConfig+0x4cc>)
 8043242:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8043246:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8043248:	f7fd fca8 	bl	8040b9c <HAL_GetTick>
 804324c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 804324e:	e008      	b.n	8043262 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8043250:	f7fd fca4 	bl	8040b9c <HAL_GetTick>
 8043254:	4602      	mov	r2, r0
 8043256:	693b      	ldr	r3, [r7, #16]
 8043258:	1ad3      	subs	r3, r2, r3
 804325a:	2b02      	cmp	r3, #2
 804325c:	d901      	bls.n	8043262 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 804325e:	2303      	movs	r3, #3
 8043260:	e087      	b.n	8043372 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8043262:	4b28      	ldr	r3, [pc, #160]	; (8043304 <HAL_RCC_OscConfig+0x4cc>)
 8043264:	681b      	ldr	r3, [r3, #0]
 8043266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804326a:	2b00      	cmp	r3, #0
 804326c:	d1f0      	bne.n	8043250 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 804326e:	687b      	ldr	r3, [r7, #4]
 8043270:	69da      	ldr	r2, [r3, #28]
 8043272:	687b      	ldr	r3, [r7, #4]
 8043274:	6a1b      	ldr	r3, [r3, #32]
 8043276:	431a      	orrs	r2, r3
 8043278:	687b      	ldr	r3, [r7, #4]
 804327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804327c:	019b      	lsls	r3, r3, #6
 804327e:	431a      	orrs	r2, r3
 8043280:	687b      	ldr	r3, [r7, #4]
 8043282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043284:	085b      	lsrs	r3, r3, #1
 8043286:	3b01      	subs	r3, #1
 8043288:	041b      	lsls	r3, r3, #16
 804328a:	431a      	orrs	r2, r3
 804328c:	687b      	ldr	r3, [r7, #4]
 804328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043290:	061b      	lsls	r3, r3, #24
 8043292:	4313      	orrs	r3, r2
 8043294:	4a1b      	ldr	r2, [pc, #108]	; (8043304 <HAL_RCC_OscConfig+0x4cc>)
 8043296:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 804329a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 804329c:	4b19      	ldr	r3, [pc, #100]	; (8043304 <HAL_RCC_OscConfig+0x4cc>)
 804329e:	681b      	ldr	r3, [r3, #0]
 80432a0:	4a18      	ldr	r2, [pc, #96]	; (8043304 <HAL_RCC_OscConfig+0x4cc>)
 80432a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80432a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80432a8:	f7fd fc78 	bl	8040b9c <HAL_GetTick>
 80432ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80432ae:	e008      	b.n	80432c2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80432b0:	f7fd fc74 	bl	8040b9c <HAL_GetTick>
 80432b4:	4602      	mov	r2, r0
 80432b6:	693b      	ldr	r3, [r7, #16]
 80432b8:	1ad3      	subs	r3, r2, r3
 80432ba:	2b02      	cmp	r3, #2
 80432bc:	d901      	bls.n	80432c2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80432be:	2303      	movs	r3, #3
 80432c0:	e057      	b.n	8043372 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80432c2:	4b10      	ldr	r3, [pc, #64]	; (8043304 <HAL_RCC_OscConfig+0x4cc>)
 80432c4:	681b      	ldr	r3, [r3, #0]
 80432c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80432ca:	2b00      	cmp	r3, #0
 80432cc:	d0f0      	beq.n	80432b0 <HAL_RCC_OscConfig+0x478>
 80432ce:	e04f      	b.n	8043370 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80432d0:	4b0c      	ldr	r3, [pc, #48]	; (8043304 <HAL_RCC_OscConfig+0x4cc>)
 80432d2:	681b      	ldr	r3, [r3, #0]
 80432d4:	4a0b      	ldr	r2, [pc, #44]	; (8043304 <HAL_RCC_OscConfig+0x4cc>)
 80432d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80432da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80432dc:	f7fd fc5e 	bl	8040b9c <HAL_GetTick>
 80432e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80432e2:	e008      	b.n	80432f6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80432e4:	f7fd fc5a 	bl	8040b9c <HAL_GetTick>
 80432e8:	4602      	mov	r2, r0
 80432ea:	693b      	ldr	r3, [r7, #16]
 80432ec:	1ad3      	subs	r3, r2, r3
 80432ee:	2b02      	cmp	r3, #2
 80432f0:	d901      	bls.n	80432f6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80432f2:	2303      	movs	r3, #3
 80432f4:	e03d      	b.n	8043372 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80432f6:	4b03      	ldr	r3, [pc, #12]	; (8043304 <HAL_RCC_OscConfig+0x4cc>)
 80432f8:	681b      	ldr	r3, [r3, #0]
 80432fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80432fe:	2b00      	cmp	r3, #0
 8043300:	d1f0      	bne.n	80432e4 <HAL_RCC_OscConfig+0x4ac>
 8043302:	e035      	b.n	8043370 <HAL_RCC_OscConfig+0x538>
 8043304:	40023800 	.word	0x40023800
 8043308:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 804330c:	4b1b      	ldr	r3, [pc, #108]	; (804337c <HAL_RCC_OscConfig+0x544>)
 804330e:	685b      	ldr	r3, [r3, #4]
 8043310:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8043312:	687b      	ldr	r3, [r7, #4]
 8043314:	699b      	ldr	r3, [r3, #24]
 8043316:	2b01      	cmp	r3, #1
 8043318:	d028      	beq.n	804336c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 804331a:	68fb      	ldr	r3, [r7, #12]
 804331c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8043320:	687b      	ldr	r3, [r7, #4]
 8043322:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8043324:	429a      	cmp	r2, r3
 8043326:	d121      	bne.n	804336c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8043328:	68fb      	ldr	r3, [r7, #12]
 804332a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 804332e:	687b      	ldr	r3, [r7, #4]
 8043330:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8043332:	429a      	cmp	r2, r3
 8043334:	d11a      	bne.n	804336c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8043336:	68fa      	ldr	r2, [r7, #12]
 8043338:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 804333c:	4013      	ands	r3, r2
 804333e:	687a      	ldr	r2, [r7, #4]
 8043340:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8043342:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8043344:	4293      	cmp	r3, r2
 8043346:	d111      	bne.n	804336c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8043348:	68fb      	ldr	r3, [r7, #12]
 804334a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 804334e:	687b      	ldr	r3, [r7, #4]
 8043350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043352:	085b      	lsrs	r3, r3, #1
 8043354:	3b01      	subs	r3, #1
 8043356:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8043358:	429a      	cmp	r2, r3
 804335a:	d107      	bne.n	804336c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 804335c:	68fb      	ldr	r3, [r7, #12]
 804335e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8043362:	687b      	ldr	r3, [r7, #4]
 8043364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043366:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8043368:	429a      	cmp	r2, r3
 804336a:	d001      	beq.n	8043370 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 804336c:	2301      	movs	r3, #1
 804336e:	e000      	b.n	8043372 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8043370:	2300      	movs	r3, #0
}
 8043372:	4618      	mov	r0, r3
 8043374:	3718      	adds	r7, #24
 8043376:	46bd      	mov	sp, r7
 8043378:	bd80      	pop	{r7, pc}
 804337a:	bf00      	nop
 804337c:	40023800 	.word	0x40023800

08043380 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8043380:	b580      	push	{r7, lr}
 8043382:	b084      	sub	sp, #16
 8043384:	af00      	add	r7, sp, #0
 8043386:	6078      	str	r0, [r7, #4]
 8043388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 804338a:	2300      	movs	r3, #0
 804338c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 804338e:	687b      	ldr	r3, [r7, #4]
 8043390:	2b00      	cmp	r3, #0
 8043392:	d101      	bne.n	8043398 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8043394:	2301      	movs	r3, #1
 8043396:	e0d0      	b.n	804353a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8043398:	4b6a      	ldr	r3, [pc, #424]	; (8043544 <HAL_RCC_ClockConfig+0x1c4>)
 804339a:	681b      	ldr	r3, [r3, #0]
 804339c:	f003 030f 	and.w	r3, r3, #15
 80433a0:	683a      	ldr	r2, [r7, #0]
 80433a2:	429a      	cmp	r2, r3
 80433a4:	d910      	bls.n	80433c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80433a6:	4b67      	ldr	r3, [pc, #412]	; (8043544 <HAL_RCC_ClockConfig+0x1c4>)
 80433a8:	681b      	ldr	r3, [r3, #0]
 80433aa:	f023 020f 	bic.w	r2, r3, #15
 80433ae:	4965      	ldr	r1, [pc, #404]	; (8043544 <HAL_RCC_ClockConfig+0x1c4>)
 80433b0:	683b      	ldr	r3, [r7, #0]
 80433b2:	4313      	orrs	r3, r2
 80433b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80433b6:	4b63      	ldr	r3, [pc, #396]	; (8043544 <HAL_RCC_ClockConfig+0x1c4>)
 80433b8:	681b      	ldr	r3, [r3, #0]
 80433ba:	f003 030f 	and.w	r3, r3, #15
 80433be:	683a      	ldr	r2, [r7, #0]
 80433c0:	429a      	cmp	r2, r3
 80433c2:	d001      	beq.n	80433c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80433c4:	2301      	movs	r3, #1
 80433c6:	e0b8      	b.n	804353a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80433c8:	687b      	ldr	r3, [r7, #4]
 80433ca:	681b      	ldr	r3, [r3, #0]
 80433cc:	f003 0302 	and.w	r3, r3, #2
 80433d0:	2b00      	cmp	r3, #0
 80433d2:	d020      	beq.n	8043416 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80433d4:	687b      	ldr	r3, [r7, #4]
 80433d6:	681b      	ldr	r3, [r3, #0]
 80433d8:	f003 0304 	and.w	r3, r3, #4
 80433dc:	2b00      	cmp	r3, #0
 80433de:	d005      	beq.n	80433ec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80433e0:	4b59      	ldr	r3, [pc, #356]	; (8043548 <HAL_RCC_ClockConfig+0x1c8>)
 80433e2:	689b      	ldr	r3, [r3, #8]
 80433e4:	4a58      	ldr	r2, [pc, #352]	; (8043548 <HAL_RCC_ClockConfig+0x1c8>)
 80433e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80433ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80433ec:	687b      	ldr	r3, [r7, #4]
 80433ee:	681b      	ldr	r3, [r3, #0]
 80433f0:	f003 0308 	and.w	r3, r3, #8
 80433f4:	2b00      	cmp	r3, #0
 80433f6:	d005      	beq.n	8043404 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80433f8:	4b53      	ldr	r3, [pc, #332]	; (8043548 <HAL_RCC_ClockConfig+0x1c8>)
 80433fa:	689b      	ldr	r3, [r3, #8]
 80433fc:	4a52      	ldr	r2, [pc, #328]	; (8043548 <HAL_RCC_ClockConfig+0x1c8>)
 80433fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8043402:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8043404:	4b50      	ldr	r3, [pc, #320]	; (8043548 <HAL_RCC_ClockConfig+0x1c8>)
 8043406:	689b      	ldr	r3, [r3, #8]
 8043408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 804340c:	687b      	ldr	r3, [r7, #4]
 804340e:	689b      	ldr	r3, [r3, #8]
 8043410:	494d      	ldr	r1, [pc, #308]	; (8043548 <HAL_RCC_ClockConfig+0x1c8>)
 8043412:	4313      	orrs	r3, r2
 8043414:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8043416:	687b      	ldr	r3, [r7, #4]
 8043418:	681b      	ldr	r3, [r3, #0]
 804341a:	f003 0301 	and.w	r3, r3, #1
 804341e:	2b00      	cmp	r3, #0
 8043420:	d040      	beq.n	80434a4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8043422:	687b      	ldr	r3, [r7, #4]
 8043424:	685b      	ldr	r3, [r3, #4]
 8043426:	2b01      	cmp	r3, #1
 8043428:	d107      	bne.n	804343a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 804342a:	4b47      	ldr	r3, [pc, #284]	; (8043548 <HAL_RCC_ClockConfig+0x1c8>)
 804342c:	681b      	ldr	r3, [r3, #0]
 804342e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8043432:	2b00      	cmp	r3, #0
 8043434:	d115      	bne.n	8043462 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8043436:	2301      	movs	r3, #1
 8043438:	e07f      	b.n	804353a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 804343a:	687b      	ldr	r3, [r7, #4]
 804343c:	685b      	ldr	r3, [r3, #4]
 804343e:	2b02      	cmp	r3, #2
 8043440:	d107      	bne.n	8043452 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8043442:	4b41      	ldr	r3, [pc, #260]	; (8043548 <HAL_RCC_ClockConfig+0x1c8>)
 8043444:	681b      	ldr	r3, [r3, #0]
 8043446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804344a:	2b00      	cmp	r3, #0
 804344c:	d109      	bne.n	8043462 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 804344e:	2301      	movs	r3, #1
 8043450:	e073      	b.n	804353a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8043452:	4b3d      	ldr	r3, [pc, #244]	; (8043548 <HAL_RCC_ClockConfig+0x1c8>)
 8043454:	681b      	ldr	r3, [r3, #0]
 8043456:	f003 0302 	and.w	r3, r3, #2
 804345a:	2b00      	cmp	r3, #0
 804345c:	d101      	bne.n	8043462 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 804345e:	2301      	movs	r3, #1
 8043460:	e06b      	b.n	804353a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8043462:	4b39      	ldr	r3, [pc, #228]	; (8043548 <HAL_RCC_ClockConfig+0x1c8>)
 8043464:	689b      	ldr	r3, [r3, #8]
 8043466:	f023 0203 	bic.w	r2, r3, #3
 804346a:	687b      	ldr	r3, [r7, #4]
 804346c:	685b      	ldr	r3, [r3, #4]
 804346e:	4936      	ldr	r1, [pc, #216]	; (8043548 <HAL_RCC_ClockConfig+0x1c8>)
 8043470:	4313      	orrs	r3, r2
 8043472:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8043474:	f7fd fb92 	bl	8040b9c <HAL_GetTick>
 8043478:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 804347a:	e00a      	b.n	8043492 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 804347c:	f7fd fb8e 	bl	8040b9c <HAL_GetTick>
 8043480:	4602      	mov	r2, r0
 8043482:	68fb      	ldr	r3, [r7, #12]
 8043484:	1ad3      	subs	r3, r2, r3
 8043486:	f241 3288 	movw	r2, #5000	; 0x1388
 804348a:	4293      	cmp	r3, r2
 804348c:	d901      	bls.n	8043492 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 804348e:	2303      	movs	r3, #3
 8043490:	e053      	b.n	804353a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8043492:	4b2d      	ldr	r3, [pc, #180]	; (8043548 <HAL_RCC_ClockConfig+0x1c8>)
 8043494:	689b      	ldr	r3, [r3, #8]
 8043496:	f003 020c 	and.w	r2, r3, #12
 804349a:	687b      	ldr	r3, [r7, #4]
 804349c:	685b      	ldr	r3, [r3, #4]
 804349e:	009b      	lsls	r3, r3, #2
 80434a0:	429a      	cmp	r2, r3
 80434a2:	d1eb      	bne.n	804347c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80434a4:	4b27      	ldr	r3, [pc, #156]	; (8043544 <HAL_RCC_ClockConfig+0x1c4>)
 80434a6:	681b      	ldr	r3, [r3, #0]
 80434a8:	f003 030f 	and.w	r3, r3, #15
 80434ac:	683a      	ldr	r2, [r7, #0]
 80434ae:	429a      	cmp	r2, r3
 80434b0:	d210      	bcs.n	80434d4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80434b2:	4b24      	ldr	r3, [pc, #144]	; (8043544 <HAL_RCC_ClockConfig+0x1c4>)
 80434b4:	681b      	ldr	r3, [r3, #0]
 80434b6:	f023 020f 	bic.w	r2, r3, #15
 80434ba:	4922      	ldr	r1, [pc, #136]	; (8043544 <HAL_RCC_ClockConfig+0x1c4>)
 80434bc:	683b      	ldr	r3, [r7, #0]
 80434be:	4313      	orrs	r3, r2
 80434c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80434c2:	4b20      	ldr	r3, [pc, #128]	; (8043544 <HAL_RCC_ClockConfig+0x1c4>)
 80434c4:	681b      	ldr	r3, [r3, #0]
 80434c6:	f003 030f 	and.w	r3, r3, #15
 80434ca:	683a      	ldr	r2, [r7, #0]
 80434cc:	429a      	cmp	r2, r3
 80434ce:	d001      	beq.n	80434d4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80434d0:	2301      	movs	r3, #1
 80434d2:	e032      	b.n	804353a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80434d4:	687b      	ldr	r3, [r7, #4]
 80434d6:	681b      	ldr	r3, [r3, #0]
 80434d8:	f003 0304 	and.w	r3, r3, #4
 80434dc:	2b00      	cmp	r3, #0
 80434de:	d008      	beq.n	80434f2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80434e0:	4b19      	ldr	r3, [pc, #100]	; (8043548 <HAL_RCC_ClockConfig+0x1c8>)
 80434e2:	689b      	ldr	r3, [r3, #8]
 80434e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80434e8:	687b      	ldr	r3, [r7, #4]
 80434ea:	68db      	ldr	r3, [r3, #12]
 80434ec:	4916      	ldr	r1, [pc, #88]	; (8043548 <HAL_RCC_ClockConfig+0x1c8>)
 80434ee:	4313      	orrs	r3, r2
 80434f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80434f2:	687b      	ldr	r3, [r7, #4]
 80434f4:	681b      	ldr	r3, [r3, #0]
 80434f6:	f003 0308 	and.w	r3, r3, #8
 80434fa:	2b00      	cmp	r3, #0
 80434fc:	d009      	beq.n	8043512 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80434fe:	4b12      	ldr	r3, [pc, #72]	; (8043548 <HAL_RCC_ClockConfig+0x1c8>)
 8043500:	689b      	ldr	r3, [r3, #8]
 8043502:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8043506:	687b      	ldr	r3, [r7, #4]
 8043508:	691b      	ldr	r3, [r3, #16]
 804350a:	00db      	lsls	r3, r3, #3
 804350c:	490e      	ldr	r1, [pc, #56]	; (8043548 <HAL_RCC_ClockConfig+0x1c8>)
 804350e:	4313      	orrs	r3, r2
 8043510:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8043512:	f000 f821 	bl	8043558 <HAL_RCC_GetSysClockFreq>
 8043516:	4601      	mov	r1, r0
 8043518:	4b0b      	ldr	r3, [pc, #44]	; (8043548 <HAL_RCC_ClockConfig+0x1c8>)
 804351a:	689b      	ldr	r3, [r3, #8]
 804351c:	091b      	lsrs	r3, r3, #4
 804351e:	f003 030f 	and.w	r3, r3, #15
 8043522:	4a0a      	ldr	r2, [pc, #40]	; (804354c <HAL_RCC_ClockConfig+0x1cc>)
 8043524:	5cd3      	ldrb	r3, [r2, r3]
 8043526:	fa21 f303 	lsr.w	r3, r1, r3
 804352a:	4a09      	ldr	r2, [pc, #36]	; (8043550 <HAL_RCC_ClockConfig+0x1d0>)
 804352c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 804352e:	4b09      	ldr	r3, [pc, #36]	; (8043554 <HAL_RCC_ClockConfig+0x1d4>)
 8043530:	681b      	ldr	r3, [r3, #0]
 8043532:	4618      	mov	r0, r3
 8043534:	f7fd faee 	bl	8040b14 <HAL_InitTick>

  return HAL_OK;
 8043538:	2300      	movs	r3, #0
}
 804353a:	4618      	mov	r0, r3
 804353c:	3710      	adds	r7, #16
 804353e:	46bd      	mov	sp, r7
 8043540:	bd80      	pop	{r7, pc}
 8043542:	bf00      	nop
 8043544:	40023c00 	.word	0x40023c00
 8043548:	40023800 	.word	0x40023800
 804354c:	08045974 	.word	0x08045974
 8043550:	20000000 	.word	0x20000000
 8043554:	20000004 	.word	0x20000004

08043558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8043558:	b5f0      	push	{r4, r5, r6, r7, lr}
 804355a:	b085      	sub	sp, #20
 804355c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 804355e:	2300      	movs	r3, #0
 8043560:	607b      	str	r3, [r7, #4]
 8043562:	2300      	movs	r3, #0
 8043564:	60fb      	str	r3, [r7, #12]
 8043566:	2300      	movs	r3, #0
 8043568:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 804356a:	2300      	movs	r3, #0
 804356c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 804356e:	4b50      	ldr	r3, [pc, #320]	; (80436b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8043570:	689b      	ldr	r3, [r3, #8]
 8043572:	f003 030c 	and.w	r3, r3, #12
 8043576:	2b04      	cmp	r3, #4
 8043578:	d007      	beq.n	804358a <HAL_RCC_GetSysClockFreq+0x32>
 804357a:	2b08      	cmp	r3, #8
 804357c:	d008      	beq.n	8043590 <HAL_RCC_GetSysClockFreq+0x38>
 804357e:	2b00      	cmp	r3, #0
 8043580:	f040 808d 	bne.w	804369e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8043584:	4b4b      	ldr	r3, [pc, #300]	; (80436b4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8043586:	60bb      	str	r3, [r7, #8]
      break;
 8043588:	e08c      	b.n	80436a4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 804358a:	4b4b      	ldr	r3, [pc, #300]	; (80436b8 <HAL_RCC_GetSysClockFreq+0x160>)
 804358c:	60bb      	str	r3, [r7, #8]
      break;
 804358e:	e089      	b.n	80436a4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8043590:	4b47      	ldr	r3, [pc, #284]	; (80436b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8043592:	685b      	ldr	r3, [r3, #4]
 8043594:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8043598:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 804359a:	4b45      	ldr	r3, [pc, #276]	; (80436b0 <HAL_RCC_GetSysClockFreq+0x158>)
 804359c:	685b      	ldr	r3, [r3, #4]
 804359e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80435a2:	2b00      	cmp	r3, #0
 80435a4:	d023      	beq.n	80435ee <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80435a6:	4b42      	ldr	r3, [pc, #264]	; (80436b0 <HAL_RCC_GetSysClockFreq+0x158>)
 80435a8:	685b      	ldr	r3, [r3, #4]
 80435aa:	099b      	lsrs	r3, r3, #6
 80435ac:	f04f 0400 	mov.w	r4, #0
 80435b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80435b4:	f04f 0200 	mov.w	r2, #0
 80435b8:	ea03 0501 	and.w	r5, r3, r1
 80435bc:	ea04 0602 	and.w	r6, r4, r2
 80435c0:	4a3d      	ldr	r2, [pc, #244]	; (80436b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80435c2:	fb02 f106 	mul.w	r1, r2, r6
 80435c6:	2200      	movs	r2, #0
 80435c8:	fb02 f205 	mul.w	r2, r2, r5
 80435cc:	440a      	add	r2, r1
 80435ce:	493a      	ldr	r1, [pc, #232]	; (80436b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80435d0:	fba5 0101 	umull	r0, r1, r5, r1
 80435d4:	1853      	adds	r3, r2, r1
 80435d6:	4619      	mov	r1, r3
 80435d8:	687b      	ldr	r3, [r7, #4]
 80435da:	f04f 0400 	mov.w	r4, #0
 80435de:	461a      	mov	r2, r3
 80435e0:	4623      	mov	r3, r4
 80435e2:	f7fc fe11 	bl	8040208 <__aeabi_uldivmod>
 80435e6:	4603      	mov	r3, r0
 80435e8:	460c      	mov	r4, r1
 80435ea:	60fb      	str	r3, [r7, #12]
 80435ec:	e049      	b.n	8043682 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80435ee:	4b30      	ldr	r3, [pc, #192]	; (80436b0 <HAL_RCC_GetSysClockFreq+0x158>)
 80435f0:	685b      	ldr	r3, [r3, #4]
 80435f2:	099b      	lsrs	r3, r3, #6
 80435f4:	f04f 0400 	mov.w	r4, #0
 80435f8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80435fc:	f04f 0200 	mov.w	r2, #0
 8043600:	ea03 0501 	and.w	r5, r3, r1
 8043604:	ea04 0602 	and.w	r6, r4, r2
 8043608:	4629      	mov	r1, r5
 804360a:	4632      	mov	r2, r6
 804360c:	f04f 0300 	mov.w	r3, #0
 8043610:	f04f 0400 	mov.w	r4, #0
 8043614:	0154      	lsls	r4, r2, #5
 8043616:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 804361a:	014b      	lsls	r3, r1, #5
 804361c:	4619      	mov	r1, r3
 804361e:	4622      	mov	r2, r4
 8043620:	1b49      	subs	r1, r1, r5
 8043622:	eb62 0206 	sbc.w	r2, r2, r6
 8043626:	f04f 0300 	mov.w	r3, #0
 804362a:	f04f 0400 	mov.w	r4, #0
 804362e:	0194      	lsls	r4, r2, #6
 8043630:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8043634:	018b      	lsls	r3, r1, #6
 8043636:	1a5b      	subs	r3, r3, r1
 8043638:	eb64 0402 	sbc.w	r4, r4, r2
 804363c:	f04f 0100 	mov.w	r1, #0
 8043640:	f04f 0200 	mov.w	r2, #0
 8043644:	00e2      	lsls	r2, r4, #3
 8043646:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 804364a:	00d9      	lsls	r1, r3, #3
 804364c:	460b      	mov	r3, r1
 804364e:	4614      	mov	r4, r2
 8043650:	195b      	adds	r3, r3, r5
 8043652:	eb44 0406 	adc.w	r4, r4, r6
 8043656:	f04f 0100 	mov.w	r1, #0
 804365a:	f04f 0200 	mov.w	r2, #0
 804365e:	02a2      	lsls	r2, r4, #10
 8043660:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8043664:	0299      	lsls	r1, r3, #10
 8043666:	460b      	mov	r3, r1
 8043668:	4614      	mov	r4, r2
 804366a:	4618      	mov	r0, r3
 804366c:	4621      	mov	r1, r4
 804366e:	687b      	ldr	r3, [r7, #4]
 8043670:	f04f 0400 	mov.w	r4, #0
 8043674:	461a      	mov	r2, r3
 8043676:	4623      	mov	r3, r4
 8043678:	f7fc fdc6 	bl	8040208 <__aeabi_uldivmod>
 804367c:	4603      	mov	r3, r0
 804367e:	460c      	mov	r4, r1
 8043680:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8043682:	4b0b      	ldr	r3, [pc, #44]	; (80436b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8043684:	685b      	ldr	r3, [r3, #4]
 8043686:	0c1b      	lsrs	r3, r3, #16
 8043688:	f003 0303 	and.w	r3, r3, #3
 804368c:	3301      	adds	r3, #1
 804368e:	005b      	lsls	r3, r3, #1
 8043690:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8043692:	68fa      	ldr	r2, [r7, #12]
 8043694:	683b      	ldr	r3, [r7, #0]
 8043696:	fbb2 f3f3 	udiv	r3, r2, r3
 804369a:	60bb      	str	r3, [r7, #8]
      break;
 804369c:	e002      	b.n	80436a4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 804369e:	4b05      	ldr	r3, [pc, #20]	; (80436b4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80436a0:	60bb      	str	r3, [r7, #8]
      break;
 80436a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80436a4:	68bb      	ldr	r3, [r7, #8]
}
 80436a6:	4618      	mov	r0, r3
 80436a8:	3714      	adds	r7, #20
 80436aa:	46bd      	mov	sp, r7
 80436ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80436ae:	bf00      	nop
 80436b0:	40023800 	.word	0x40023800
 80436b4:	00f42400 	.word	0x00f42400
 80436b8:	017d7840 	.word	0x017d7840

080436bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80436bc:	b580      	push	{r7, lr}
 80436be:	b088      	sub	sp, #32
 80436c0:	af00      	add	r7, sp, #0
 80436c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80436c4:	2300      	movs	r3, #0
 80436c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80436c8:	2300      	movs	r3, #0
 80436ca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80436cc:	2300      	movs	r3, #0
 80436ce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80436d0:	2300      	movs	r3, #0
 80436d2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80436d4:	2300      	movs	r3, #0
 80436d6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80436d8:	687b      	ldr	r3, [r7, #4]
 80436da:	681b      	ldr	r3, [r3, #0]
 80436dc:	f003 0301 	and.w	r3, r3, #1
 80436e0:	2b00      	cmp	r3, #0
 80436e2:	d012      	beq.n	804370a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80436e4:	4b69      	ldr	r3, [pc, #420]	; (804388c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80436e6:	689b      	ldr	r3, [r3, #8]
 80436e8:	4a68      	ldr	r2, [pc, #416]	; (804388c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80436ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80436ee:	6093      	str	r3, [r2, #8]
 80436f0:	4b66      	ldr	r3, [pc, #408]	; (804388c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80436f2:	689a      	ldr	r2, [r3, #8]
 80436f4:	687b      	ldr	r3, [r7, #4]
 80436f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80436f8:	4964      	ldr	r1, [pc, #400]	; (804388c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80436fa:	4313      	orrs	r3, r2
 80436fc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80436fe:	687b      	ldr	r3, [r7, #4]
 8043700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8043702:	2b00      	cmp	r3, #0
 8043704:	d101      	bne.n	804370a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8043706:	2301      	movs	r3, #1
 8043708:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 804370a:	687b      	ldr	r3, [r7, #4]
 804370c:	681b      	ldr	r3, [r3, #0]
 804370e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8043712:	2b00      	cmp	r3, #0
 8043714:	d017      	beq.n	8043746 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8043716:	4b5d      	ldr	r3, [pc, #372]	; (804388c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8043718:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804371c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8043720:	687b      	ldr	r3, [r7, #4]
 8043722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043724:	4959      	ldr	r1, [pc, #356]	; (804388c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8043726:	4313      	orrs	r3, r2
 8043728:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 804372c:	687b      	ldr	r3, [r7, #4]
 804372e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043730:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8043734:	d101      	bne.n	804373a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8043736:	2301      	movs	r3, #1
 8043738:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 804373a:	687b      	ldr	r3, [r7, #4]
 804373c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804373e:	2b00      	cmp	r3, #0
 8043740:	d101      	bne.n	8043746 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8043742:	2301      	movs	r3, #1
 8043744:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8043746:	687b      	ldr	r3, [r7, #4]
 8043748:	681b      	ldr	r3, [r3, #0]
 804374a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 804374e:	2b00      	cmp	r3, #0
 8043750:	d017      	beq.n	8043782 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8043752:	4b4e      	ldr	r3, [pc, #312]	; (804388c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8043754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8043758:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 804375c:	687b      	ldr	r3, [r7, #4]
 804375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043760:	494a      	ldr	r1, [pc, #296]	; (804388c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8043762:	4313      	orrs	r3, r2
 8043764:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8043768:	687b      	ldr	r3, [r7, #4]
 804376a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804376c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8043770:	d101      	bne.n	8043776 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8043772:	2301      	movs	r3, #1
 8043774:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8043776:	687b      	ldr	r3, [r7, #4]
 8043778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804377a:	2b00      	cmp	r3, #0
 804377c:	d101      	bne.n	8043782 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 804377e:	2301      	movs	r3, #1
 8043780:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8043782:	687b      	ldr	r3, [r7, #4]
 8043784:	681b      	ldr	r3, [r3, #0]
 8043786:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 804378a:	2b00      	cmp	r3, #0
 804378c:	d001      	beq.n	8043792 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 804378e:	2301      	movs	r3, #1
 8043790:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8043792:	687b      	ldr	r3, [r7, #4]
 8043794:	681b      	ldr	r3, [r3, #0]
 8043796:	f003 0320 	and.w	r3, r3, #32
 804379a:	2b00      	cmp	r3, #0
 804379c:	f000 808b 	beq.w	80438b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80437a0:	4b3a      	ldr	r3, [pc, #232]	; (804388c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80437a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80437a4:	4a39      	ldr	r2, [pc, #228]	; (804388c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80437a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80437aa:	6413      	str	r3, [r2, #64]	; 0x40
 80437ac:	4b37      	ldr	r3, [pc, #220]	; (804388c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80437ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80437b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80437b4:	60bb      	str	r3, [r7, #8]
 80437b6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80437b8:	4b35      	ldr	r3, [pc, #212]	; (8043890 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80437ba:	681b      	ldr	r3, [r3, #0]
 80437bc:	4a34      	ldr	r2, [pc, #208]	; (8043890 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80437be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80437c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80437c4:	f7fd f9ea 	bl	8040b9c <HAL_GetTick>
 80437c8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80437ca:	e008      	b.n	80437de <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80437cc:	f7fd f9e6 	bl	8040b9c <HAL_GetTick>
 80437d0:	4602      	mov	r2, r0
 80437d2:	697b      	ldr	r3, [r7, #20]
 80437d4:	1ad3      	subs	r3, r2, r3
 80437d6:	2b64      	cmp	r3, #100	; 0x64
 80437d8:	d901      	bls.n	80437de <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80437da:	2303      	movs	r3, #3
 80437dc:	e355      	b.n	8043e8a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80437de:	4b2c      	ldr	r3, [pc, #176]	; (8043890 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80437e0:	681b      	ldr	r3, [r3, #0]
 80437e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80437e6:	2b00      	cmp	r3, #0
 80437e8:	d0f0      	beq.n	80437cc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80437ea:	4b28      	ldr	r3, [pc, #160]	; (804388c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80437ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80437ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80437f2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80437f4:	693b      	ldr	r3, [r7, #16]
 80437f6:	2b00      	cmp	r3, #0
 80437f8:	d035      	beq.n	8043866 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80437fa:	687b      	ldr	r3, [r7, #4]
 80437fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80437fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8043802:	693a      	ldr	r2, [r7, #16]
 8043804:	429a      	cmp	r2, r3
 8043806:	d02e      	beq.n	8043866 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8043808:	4b20      	ldr	r3, [pc, #128]	; (804388c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 804380a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804380c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8043810:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8043812:	4b1e      	ldr	r3, [pc, #120]	; (804388c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8043814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8043816:	4a1d      	ldr	r2, [pc, #116]	; (804388c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8043818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 804381c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 804381e:	4b1b      	ldr	r3, [pc, #108]	; (804388c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8043820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8043822:	4a1a      	ldr	r2, [pc, #104]	; (804388c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8043824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8043828:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 804382a:	4a18      	ldr	r2, [pc, #96]	; (804388c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 804382c:	693b      	ldr	r3, [r7, #16]
 804382e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8043830:	4b16      	ldr	r3, [pc, #88]	; (804388c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8043832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8043834:	f003 0301 	and.w	r3, r3, #1
 8043838:	2b01      	cmp	r3, #1
 804383a:	d114      	bne.n	8043866 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804383c:	f7fd f9ae 	bl	8040b9c <HAL_GetTick>
 8043840:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8043842:	e00a      	b.n	804385a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8043844:	f7fd f9aa 	bl	8040b9c <HAL_GetTick>
 8043848:	4602      	mov	r2, r0
 804384a:	697b      	ldr	r3, [r7, #20]
 804384c:	1ad3      	subs	r3, r2, r3
 804384e:	f241 3288 	movw	r2, #5000	; 0x1388
 8043852:	4293      	cmp	r3, r2
 8043854:	d901      	bls.n	804385a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8043856:	2303      	movs	r3, #3
 8043858:	e317      	b.n	8043e8a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 804385a:	4b0c      	ldr	r3, [pc, #48]	; (804388c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 804385c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804385e:	f003 0302 	and.w	r3, r3, #2
 8043862:	2b00      	cmp	r3, #0
 8043864:	d0ee      	beq.n	8043844 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8043866:	687b      	ldr	r3, [r7, #4]
 8043868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804386a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 804386e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8043872:	d111      	bne.n	8043898 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8043874:	4b05      	ldr	r3, [pc, #20]	; (804388c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8043876:	689b      	ldr	r3, [r3, #8]
 8043878:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 804387c:	687b      	ldr	r3, [r7, #4]
 804387e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8043880:	4b04      	ldr	r3, [pc, #16]	; (8043894 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8043882:	400b      	ands	r3, r1
 8043884:	4901      	ldr	r1, [pc, #4]	; (804388c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8043886:	4313      	orrs	r3, r2
 8043888:	608b      	str	r3, [r1, #8]
 804388a:	e00b      	b.n	80438a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 804388c:	40023800 	.word	0x40023800
 8043890:	40007000 	.word	0x40007000
 8043894:	0ffffcff 	.word	0x0ffffcff
 8043898:	4bb0      	ldr	r3, [pc, #704]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 804389a:	689b      	ldr	r3, [r3, #8]
 804389c:	4aaf      	ldr	r2, [pc, #700]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 804389e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80438a2:	6093      	str	r3, [r2, #8]
 80438a4:	4bad      	ldr	r3, [pc, #692]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80438a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80438a8:	687b      	ldr	r3, [r7, #4]
 80438aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80438ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80438b0:	49aa      	ldr	r1, [pc, #680]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80438b2:	4313      	orrs	r3, r2
 80438b4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80438b6:	687b      	ldr	r3, [r7, #4]
 80438b8:	681b      	ldr	r3, [r3, #0]
 80438ba:	f003 0310 	and.w	r3, r3, #16
 80438be:	2b00      	cmp	r3, #0
 80438c0:	d010      	beq.n	80438e4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80438c2:	4ba6      	ldr	r3, [pc, #664]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80438c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80438c8:	4aa4      	ldr	r2, [pc, #656]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80438ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80438ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80438d2:	4ba2      	ldr	r3, [pc, #648]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80438d4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80438d8:	687b      	ldr	r3, [r7, #4]
 80438da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80438dc:	499f      	ldr	r1, [pc, #636]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80438de:	4313      	orrs	r3, r2
 80438e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80438e4:	687b      	ldr	r3, [r7, #4]
 80438e6:	681b      	ldr	r3, [r3, #0]
 80438e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80438ec:	2b00      	cmp	r3, #0
 80438ee:	d00a      	beq.n	8043906 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80438f0:	4b9a      	ldr	r3, [pc, #616]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80438f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80438f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80438fa:	687b      	ldr	r3, [r7, #4]
 80438fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80438fe:	4997      	ldr	r1, [pc, #604]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8043900:	4313      	orrs	r3, r2
 8043902:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8043906:	687b      	ldr	r3, [r7, #4]
 8043908:	681b      	ldr	r3, [r3, #0]
 804390a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 804390e:	2b00      	cmp	r3, #0
 8043910:	d00a      	beq.n	8043928 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8043912:	4b92      	ldr	r3, [pc, #584]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8043914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043918:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 804391c:	687b      	ldr	r3, [r7, #4]
 804391e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8043920:	498e      	ldr	r1, [pc, #568]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8043922:	4313      	orrs	r3, r2
 8043924:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8043928:	687b      	ldr	r3, [r7, #4]
 804392a:	681b      	ldr	r3, [r3, #0]
 804392c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8043930:	2b00      	cmp	r3, #0
 8043932:	d00a      	beq.n	804394a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8043934:	4b89      	ldr	r3, [pc, #548]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8043936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804393a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 804393e:	687b      	ldr	r3, [r7, #4]
 8043940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8043942:	4986      	ldr	r1, [pc, #536]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8043944:	4313      	orrs	r3, r2
 8043946:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 804394a:	687b      	ldr	r3, [r7, #4]
 804394c:	681b      	ldr	r3, [r3, #0]
 804394e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8043952:	2b00      	cmp	r3, #0
 8043954:	d00a      	beq.n	804396c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8043956:	4b81      	ldr	r3, [pc, #516]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8043958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804395c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8043960:	687b      	ldr	r3, [r7, #4]
 8043962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8043964:	497d      	ldr	r1, [pc, #500]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8043966:	4313      	orrs	r3, r2
 8043968:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 804396c:	687b      	ldr	r3, [r7, #4]
 804396e:	681b      	ldr	r3, [r3, #0]
 8043970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8043974:	2b00      	cmp	r3, #0
 8043976:	d00a      	beq.n	804398e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8043978:	4b78      	ldr	r3, [pc, #480]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 804397a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804397e:	f023 0203 	bic.w	r2, r3, #3
 8043982:	687b      	ldr	r3, [r7, #4]
 8043984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8043986:	4975      	ldr	r1, [pc, #468]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8043988:	4313      	orrs	r3, r2
 804398a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 804398e:	687b      	ldr	r3, [r7, #4]
 8043990:	681b      	ldr	r3, [r3, #0]
 8043992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8043996:	2b00      	cmp	r3, #0
 8043998:	d00a      	beq.n	80439b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 804399a:	4b70      	ldr	r3, [pc, #448]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 804399c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80439a0:	f023 020c 	bic.w	r2, r3, #12
 80439a4:	687b      	ldr	r3, [r7, #4]
 80439a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80439a8:	496c      	ldr	r1, [pc, #432]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80439aa:	4313      	orrs	r3, r2
 80439ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80439b0:	687b      	ldr	r3, [r7, #4]
 80439b2:	681b      	ldr	r3, [r3, #0]
 80439b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80439b8:	2b00      	cmp	r3, #0
 80439ba:	d00a      	beq.n	80439d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80439bc:	4b67      	ldr	r3, [pc, #412]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80439be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80439c2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80439c6:	687b      	ldr	r3, [r7, #4]
 80439c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80439ca:	4964      	ldr	r1, [pc, #400]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80439cc:	4313      	orrs	r3, r2
 80439ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80439d2:	687b      	ldr	r3, [r7, #4]
 80439d4:	681b      	ldr	r3, [r3, #0]
 80439d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80439da:	2b00      	cmp	r3, #0
 80439dc:	d00a      	beq.n	80439f4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80439de:	4b5f      	ldr	r3, [pc, #380]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80439e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80439e4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80439e8:	687b      	ldr	r3, [r7, #4]
 80439ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80439ec:	495b      	ldr	r1, [pc, #364]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80439ee:	4313      	orrs	r3, r2
 80439f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80439f4:	687b      	ldr	r3, [r7, #4]
 80439f6:	681b      	ldr	r3, [r3, #0]
 80439f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80439fc:	2b00      	cmp	r3, #0
 80439fe:	d00a      	beq.n	8043a16 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8043a00:	4b56      	ldr	r3, [pc, #344]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8043a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043a06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8043a0a:	687b      	ldr	r3, [r7, #4]
 8043a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8043a0e:	4953      	ldr	r1, [pc, #332]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8043a10:	4313      	orrs	r3, r2
 8043a12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8043a16:	687b      	ldr	r3, [r7, #4]
 8043a18:	681b      	ldr	r3, [r3, #0]
 8043a1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8043a1e:	2b00      	cmp	r3, #0
 8043a20:	d00a      	beq.n	8043a38 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8043a22:	4b4e      	ldr	r3, [pc, #312]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8043a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043a28:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8043a2c:	687b      	ldr	r3, [r7, #4]
 8043a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8043a30:	494a      	ldr	r1, [pc, #296]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8043a32:	4313      	orrs	r3, r2
 8043a34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8043a38:	687b      	ldr	r3, [r7, #4]
 8043a3a:	681b      	ldr	r3, [r3, #0]
 8043a3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8043a40:	2b00      	cmp	r3, #0
 8043a42:	d00a      	beq.n	8043a5a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8043a44:	4b45      	ldr	r3, [pc, #276]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8043a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043a4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8043a4e:	687b      	ldr	r3, [r7, #4]
 8043a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8043a52:	4942      	ldr	r1, [pc, #264]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8043a54:	4313      	orrs	r3, r2
 8043a56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8043a5a:	687b      	ldr	r3, [r7, #4]
 8043a5c:	681b      	ldr	r3, [r3, #0]
 8043a5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8043a62:	2b00      	cmp	r3, #0
 8043a64:	d00a      	beq.n	8043a7c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8043a66:	4b3d      	ldr	r3, [pc, #244]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8043a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043a6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8043a70:	687b      	ldr	r3, [r7, #4]
 8043a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8043a74:	4939      	ldr	r1, [pc, #228]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8043a76:	4313      	orrs	r3, r2
 8043a78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8043a7c:	687b      	ldr	r3, [r7, #4]
 8043a7e:	681b      	ldr	r3, [r3, #0]
 8043a80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8043a84:	2b00      	cmp	r3, #0
 8043a86:	d00a      	beq.n	8043a9e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8043a88:	4b34      	ldr	r3, [pc, #208]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8043a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043a8e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8043a92:	687b      	ldr	r3, [r7, #4]
 8043a94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8043a96:	4931      	ldr	r1, [pc, #196]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8043a98:	4313      	orrs	r3, r2
 8043a9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8043a9e:	687b      	ldr	r3, [r7, #4]
 8043aa0:	681b      	ldr	r3, [r3, #0]
 8043aa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8043aa6:	2b00      	cmp	r3, #0
 8043aa8:	d011      	beq.n	8043ace <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8043aaa:	4b2c      	ldr	r3, [pc, #176]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8043aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043ab0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8043ab4:	687b      	ldr	r3, [r7, #4]
 8043ab6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8043ab8:	4928      	ldr	r1, [pc, #160]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8043aba:	4313      	orrs	r3, r2
 8043abc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8043ac0:	687b      	ldr	r3, [r7, #4]
 8043ac2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8043ac4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8043ac8:	d101      	bne.n	8043ace <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8043aca:	2301      	movs	r3, #1
 8043acc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8043ace:	687b      	ldr	r3, [r7, #4]
 8043ad0:	681b      	ldr	r3, [r3, #0]
 8043ad2:	f003 0308 	and.w	r3, r3, #8
 8043ad6:	2b00      	cmp	r3, #0
 8043ad8:	d001      	beq.n	8043ade <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8043ada:	2301      	movs	r3, #1
 8043adc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8043ade:	687b      	ldr	r3, [r7, #4]
 8043ae0:	681b      	ldr	r3, [r3, #0]
 8043ae2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8043ae6:	2b00      	cmp	r3, #0
 8043ae8:	d00a      	beq.n	8043b00 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8043aea:	4b1c      	ldr	r3, [pc, #112]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8043aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043af0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8043af4:	687b      	ldr	r3, [r7, #4]
 8043af6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8043af8:	4918      	ldr	r1, [pc, #96]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8043afa:	4313      	orrs	r3, r2
 8043afc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8043b00:	687b      	ldr	r3, [r7, #4]
 8043b02:	681b      	ldr	r3, [r3, #0]
 8043b04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8043b08:	2b00      	cmp	r3, #0
 8043b0a:	d00b      	beq.n	8043b24 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8043b0c:	4b13      	ldr	r3, [pc, #76]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8043b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043b12:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8043b16:	687b      	ldr	r3, [r7, #4]
 8043b18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8043b1c:	490f      	ldr	r1, [pc, #60]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8043b1e:	4313      	orrs	r3, r2
 8043b20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8043b24:	69fb      	ldr	r3, [r7, #28]
 8043b26:	2b01      	cmp	r3, #1
 8043b28:	d005      	beq.n	8043b36 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8043b2a:	687b      	ldr	r3, [r7, #4]
 8043b2c:	681b      	ldr	r3, [r3, #0]
 8043b2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8043b32:	f040 80d8 	bne.w	8043ce6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8043b36:	4b09      	ldr	r3, [pc, #36]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8043b38:	681b      	ldr	r3, [r3, #0]
 8043b3a:	4a08      	ldr	r2, [pc, #32]	; (8043b5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8043b3c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8043b40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8043b42:	f7fd f82b 	bl	8040b9c <HAL_GetTick>
 8043b46:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8043b48:	e00a      	b.n	8043b60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8043b4a:	f7fd f827 	bl	8040b9c <HAL_GetTick>
 8043b4e:	4602      	mov	r2, r0
 8043b50:	697b      	ldr	r3, [r7, #20]
 8043b52:	1ad3      	subs	r3, r2, r3
 8043b54:	2b64      	cmp	r3, #100	; 0x64
 8043b56:	d903      	bls.n	8043b60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8043b58:	2303      	movs	r3, #3
 8043b5a:	e196      	b.n	8043e8a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8043b5c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8043b60:	4b6c      	ldr	r3, [pc, #432]	; (8043d14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8043b62:	681b      	ldr	r3, [r3, #0]
 8043b64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8043b68:	2b00      	cmp	r3, #0
 8043b6a:	d1ee      	bne.n	8043b4a <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8043b6c:	687b      	ldr	r3, [r7, #4]
 8043b6e:	681b      	ldr	r3, [r3, #0]
 8043b70:	f003 0301 	and.w	r3, r3, #1
 8043b74:	2b00      	cmp	r3, #0
 8043b76:	d021      	beq.n	8043bbc <HAL_RCCEx_PeriphCLKConfig+0x500>
 8043b78:	687b      	ldr	r3, [r7, #4]
 8043b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8043b7c:	2b00      	cmp	r3, #0
 8043b7e:	d11d      	bne.n	8043bbc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8043b80:	4b64      	ldr	r3, [pc, #400]	; (8043d14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8043b82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8043b86:	0c1b      	lsrs	r3, r3, #16
 8043b88:	f003 0303 	and.w	r3, r3, #3
 8043b8c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8043b8e:	4b61      	ldr	r3, [pc, #388]	; (8043d14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8043b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8043b94:	0e1b      	lsrs	r3, r3, #24
 8043b96:	f003 030f 	and.w	r3, r3, #15
 8043b9a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8043b9c:	687b      	ldr	r3, [r7, #4]
 8043b9e:	685b      	ldr	r3, [r3, #4]
 8043ba0:	019a      	lsls	r2, r3, #6
 8043ba2:	693b      	ldr	r3, [r7, #16]
 8043ba4:	041b      	lsls	r3, r3, #16
 8043ba6:	431a      	orrs	r2, r3
 8043ba8:	68fb      	ldr	r3, [r7, #12]
 8043baa:	061b      	lsls	r3, r3, #24
 8043bac:	431a      	orrs	r2, r3
 8043bae:	687b      	ldr	r3, [r7, #4]
 8043bb0:	689b      	ldr	r3, [r3, #8]
 8043bb2:	071b      	lsls	r3, r3, #28
 8043bb4:	4957      	ldr	r1, [pc, #348]	; (8043d14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8043bb6:	4313      	orrs	r3, r2
 8043bb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8043bbc:	687b      	ldr	r3, [r7, #4]
 8043bbe:	681b      	ldr	r3, [r3, #0]
 8043bc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8043bc4:	2b00      	cmp	r3, #0
 8043bc6:	d004      	beq.n	8043bd2 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8043bc8:	687b      	ldr	r3, [r7, #4]
 8043bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043bcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8043bd0:	d00a      	beq.n	8043be8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8043bd2:	687b      	ldr	r3, [r7, #4]
 8043bd4:	681b      	ldr	r3, [r3, #0]
 8043bd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8043bda:	2b00      	cmp	r3, #0
 8043bdc:	d02e      	beq.n	8043c3c <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8043bde:	687b      	ldr	r3, [r7, #4]
 8043be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043be2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8043be6:	d129      	bne.n	8043c3c <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8043be8:	4b4a      	ldr	r3, [pc, #296]	; (8043d14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8043bea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8043bee:	0c1b      	lsrs	r3, r3, #16
 8043bf0:	f003 0303 	and.w	r3, r3, #3
 8043bf4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8043bf6:	4b47      	ldr	r3, [pc, #284]	; (8043d14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8043bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8043bfc:	0f1b      	lsrs	r3, r3, #28
 8043bfe:	f003 0307 	and.w	r3, r3, #7
 8043c02:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8043c04:	687b      	ldr	r3, [r7, #4]
 8043c06:	685b      	ldr	r3, [r3, #4]
 8043c08:	019a      	lsls	r2, r3, #6
 8043c0a:	693b      	ldr	r3, [r7, #16]
 8043c0c:	041b      	lsls	r3, r3, #16
 8043c0e:	431a      	orrs	r2, r3
 8043c10:	687b      	ldr	r3, [r7, #4]
 8043c12:	68db      	ldr	r3, [r3, #12]
 8043c14:	061b      	lsls	r3, r3, #24
 8043c16:	431a      	orrs	r2, r3
 8043c18:	68fb      	ldr	r3, [r7, #12]
 8043c1a:	071b      	lsls	r3, r3, #28
 8043c1c:	493d      	ldr	r1, [pc, #244]	; (8043d14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8043c1e:	4313      	orrs	r3, r2
 8043c20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8043c24:	4b3b      	ldr	r3, [pc, #236]	; (8043d14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8043c26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8043c2a:	f023 021f 	bic.w	r2, r3, #31
 8043c2e:	687b      	ldr	r3, [r7, #4]
 8043c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043c32:	3b01      	subs	r3, #1
 8043c34:	4937      	ldr	r1, [pc, #220]	; (8043d14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8043c36:	4313      	orrs	r3, r2
 8043c38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8043c3c:	687b      	ldr	r3, [r7, #4]
 8043c3e:	681b      	ldr	r3, [r3, #0]
 8043c40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8043c44:	2b00      	cmp	r3, #0
 8043c46:	d01d      	beq.n	8043c84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8043c48:	4b32      	ldr	r3, [pc, #200]	; (8043d14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8043c4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8043c4e:	0e1b      	lsrs	r3, r3, #24
 8043c50:	f003 030f 	and.w	r3, r3, #15
 8043c54:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8043c56:	4b2f      	ldr	r3, [pc, #188]	; (8043d14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8043c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8043c5c:	0f1b      	lsrs	r3, r3, #28
 8043c5e:	f003 0307 	and.w	r3, r3, #7
 8043c62:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8043c64:	687b      	ldr	r3, [r7, #4]
 8043c66:	685b      	ldr	r3, [r3, #4]
 8043c68:	019a      	lsls	r2, r3, #6
 8043c6a:	687b      	ldr	r3, [r7, #4]
 8043c6c:	691b      	ldr	r3, [r3, #16]
 8043c6e:	041b      	lsls	r3, r3, #16
 8043c70:	431a      	orrs	r2, r3
 8043c72:	693b      	ldr	r3, [r7, #16]
 8043c74:	061b      	lsls	r3, r3, #24
 8043c76:	431a      	orrs	r2, r3
 8043c78:	68fb      	ldr	r3, [r7, #12]
 8043c7a:	071b      	lsls	r3, r3, #28
 8043c7c:	4925      	ldr	r1, [pc, #148]	; (8043d14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8043c7e:	4313      	orrs	r3, r2
 8043c80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8043c84:	687b      	ldr	r3, [r7, #4]
 8043c86:	681b      	ldr	r3, [r3, #0]
 8043c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8043c8c:	2b00      	cmp	r3, #0
 8043c8e:	d011      	beq.n	8043cb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8043c90:	687b      	ldr	r3, [r7, #4]
 8043c92:	685b      	ldr	r3, [r3, #4]
 8043c94:	019a      	lsls	r2, r3, #6
 8043c96:	687b      	ldr	r3, [r7, #4]
 8043c98:	691b      	ldr	r3, [r3, #16]
 8043c9a:	041b      	lsls	r3, r3, #16
 8043c9c:	431a      	orrs	r2, r3
 8043c9e:	687b      	ldr	r3, [r7, #4]
 8043ca0:	68db      	ldr	r3, [r3, #12]
 8043ca2:	061b      	lsls	r3, r3, #24
 8043ca4:	431a      	orrs	r2, r3
 8043ca6:	687b      	ldr	r3, [r7, #4]
 8043ca8:	689b      	ldr	r3, [r3, #8]
 8043caa:	071b      	lsls	r3, r3, #28
 8043cac:	4919      	ldr	r1, [pc, #100]	; (8043d14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8043cae:	4313      	orrs	r3, r2
 8043cb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8043cb4:	4b17      	ldr	r3, [pc, #92]	; (8043d14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8043cb6:	681b      	ldr	r3, [r3, #0]
 8043cb8:	4a16      	ldr	r2, [pc, #88]	; (8043d14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8043cba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8043cbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8043cc0:	f7fc ff6c 	bl	8040b9c <HAL_GetTick>
 8043cc4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8043cc6:	e008      	b.n	8043cda <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8043cc8:	f7fc ff68 	bl	8040b9c <HAL_GetTick>
 8043ccc:	4602      	mov	r2, r0
 8043cce:	697b      	ldr	r3, [r7, #20]
 8043cd0:	1ad3      	subs	r3, r2, r3
 8043cd2:	2b64      	cmp	r3, #100	; 0x64
 8043cd4:	d901      	bls.n	8043cda <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8043cd6:	2303      	movs	r3, #3
 8043cd8:	e0d7      	b.n	8043e8a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8043cda:	4b0e      	ldr	r3, [pc, #56]	; (8043d14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8043cdc:	681b      	ldr	r3, [r3, #0]
 8043cde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8043ce2:	2b00      	cmp	r3, #0
 8043ce4:	d0f0      	beq.n	8043cc8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8043ce6:	69bb      	ldr	r3, [r7, #24]
 8043ce8:	2b01      	cmp	r3, #1
 8043cea:	f040 80cd 	bne.w	8043e88 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8043cee:	4b09      	ldr	r3, [pc, #36]	; (8043d14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8043cf0:	681b      	ldr	r3, [r3, #0]
 8043cf2:	4a08      	ldr	r2, [pc, #32]	; (8043d14 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8043cf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8043cf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8043cfa:	f7fc ff4f 	bl	8040b9c <HAL_GetTick>
 8043cfe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8043d00:	e00a      	b.n	8043d18 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8043d02:	f7fc ff4b 	bl	8040b9c <HAL_GetTick>
 8043d06:	4602      	mov	r2, r0
 8043d08:	697b      	ldr	r3, [r7, #20]
 8043d0a:	1ad3      	subs	r3, r2, r3
 8043d0c:	2b64      	cmp	r3, #100	; 0x64
 8043d0e:	d903      	bls.n	8043d18 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8043d10:	2303      	movs	r3, #3
 8043d12:	e0ba      	b.n	8043e8a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8043d14:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8043d18:	4b5e      	ldr	r3, [pc, #376]	; (8043e94 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8043d1a:	681b      	ldr	r3, [r3, #0]
 8043d1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8043d20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8043d24:	d0ed      	beq.n	8043d02 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8043d26:	687b      	ldr	r3, [r7, #4]
 8043d28:	681b      	ldr	r3, [r3, #0]
 8043d2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8043d2e:	2b00      	cmp	r3, #0
 8043d30:	d003      	beq.n	8043d3a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8043d32:	687b      	ldr	r3, [r7, #4]
 8043d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043d36:	2b00      	cmp	r3, #0
 8043d38:	d009      	beq.n	8043d4e <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8043d3a:	687b      	ldr	r3, [r7, #4]
 8043d3c:	681b      	ldr	r3, [r3, #0]
 8043d3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8043d42:	2b00      	cmp	r3, #0
 8043d44:	d02e      	beq.n	8043da4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8043d46:	687b      	ldr	r3, [r7, #4]
 8043d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043d4a:	2b00      	cmp	r3, #0
 8043d4c:	d12a      	bne.n	8043da4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8043d4e:	4b51      	ldr	r3, [pc, #324]	; (8043e94 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8043d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8043d54:	0c1b      	lsrs	r3, r3, #16
 8043d56:	f003 0303 	and.w	r3, r3, #3
 8043d5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8043d5c:	4b4d      	ldr	r3, [pc, #308]	; (8043e94 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8043d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8043d62:	0f1b      	lsrs	r3, r3, #28
 8043d64:	f003 0307 	and.w	r3, r3, #7
 8043d68:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8043d6a:	687b      	ldr	r3, [r7, #4]
 8043d6c:	695b      	ldr	r3, [r3, #20]
 8043d6e:	019a      	lsls	r2, r3, #6
 8043d70:	693b      	ldr	r3, [r7, #16]
 8043d72:	041b      	lsls	r3, r3, #16
 8043d74:	431a      	orrs	r2, r3
 8043d76:	687b      	ldr	r3, [r7, #4]
 8043d78:	699b      	ldr	r3, [r3, #24]
 8043d7a:	061b      	lsls	r3, r3, #24
 8043d7c:	431a      	orrs	r2, r3
 8043d7e:	68fb      	ldr	r3, [r7, #12]
 8043d80:	071b      	lsls	r3, r3, #28
 8043d82:	4944      	ldr	r1, [pc, #272]	; (8043e94 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8043d84:	4313      	orrs	r3, r2
 8043d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8043d8a:	4b42      	ldr	r3, [pc, #264]	; (8043e94 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8043d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8043d90:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8043d94:	687b      	ldr	r3, [r7, #4]
 8043d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043d98:	3b01      	subs	r3, #1
 8043d9a:	021b      	lsls	r3, r3, #8
 8043d9c:	493d      	ldr	r1, [pc, #244]	; (8043e94 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8043d9e:	4313      	orrs	r3, r2
 8043da0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8043da4:	687b      	ldr	r3, [r7, #4]
 8043da6:	681b      	ldr	r3, [r3, #0]
 8043da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8043dac:	2b00      	cmp	r3, #0
 8043dae:	d022      	beq.n	8043df6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8043db0:	687b      	ldr	r3, [r7, #4]
 8043db2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8043db4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8043db8:	d11d      	bne.n	8043df6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8043dba:	4b36      	ldr	r3, [pc, #216]	; (8043e94 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8043dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8043dc0:	0e1b      	lsrs	r3, r3, #24
 8043dc2:	f003 030f 	and.w	r3, r3, #15
 8043dc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8043dc8:	4b32      	ldr	r3, [pc, #200]	; (8043e94 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8043dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8043dce:	0f1b      	lsrs	r3, r3, #28
 8043dd0:	f003 0307 	and.w	r3, r3, #7
 8043dd4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8043dd6:	687b      	ldr	r3, [r7, #4]
 8043dd8:	695b      	ldr	r3, [r3, #20]
 8043dda:	019a      	lsls	r2, r3, #6
 8043ddc:	687b      	ldr	r3, [r7, #4]
 8043dde:	6a1b      	ldr	r3, [r3, #32]
 8043de0:	041b      	lsls	r3, r3, #16
 8043de2:	431a      	orrs	r2, r3
 8043de4:	693b      	ldr	r3, [r7, #16]
 8043de6:	061b      	lsls	r3, r3, #24
 8043de8:	431a      	orrs	r2, r3
 8043dea:	68fb      	ldr	r3, [r7, #12]
 8043dec:	071b      	lsls	r3, r3, #28
 8043dee:	4929      	ldr	r1, [pc, #164]	; (8043e94 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8043df0:	4313      	orrs	r3, r2
 8043df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8043df6:	687b      	ldr	r3, [r7, #4]
 8043df8:	681b      	ldr	r3, [r3, #0]
 8043dfa:	f003 0308 	and.w	r3, r3, #8
 8043dfe:	2b00      	cmp	r3, #0
 8043e00:	d028      	beq.n	8043e54 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8043e02:	4b24      	ldr	r3, [pc, #144]	; (8043e94 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8043e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8043e08:	0e1b      	lsrs	r3, r3, #24
 8043e0a:	f003 030f 	and.w	r3, r3, #15
 8043e0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8043e10:	4b20      	ldr	r3, [pc, #128]	; (8043e94 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8043e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8043e16:	0c1b      	lsrs	r3, r3, #16
 8043e18:	f003 0303 	and.w	r3, r3, #3
 8043e1c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8043e1e:	687b      	ldr	r3, [r7, #4]
 8043e20:	695b      	ldr	r3, [r3, #20]
 8043e22:	019a      	lsls	r2, r3, #6
 8043e24:	68fb      	ldr	r3, [r7, #12]
 8043e26:	041b      	lsls	r3, r3, #16
 8043e28:	431a      	orrs	r2, r3
 8043e2a:	693b      	ldr	r3, [r7, #16]
 8043e2c:	061b      	lsls	r3, r3, #24
 8043e2e:	431a      	orrs	r2, r3
 8043e30:	687b      	ldr	r3, [r7, #4]
 8043e32:	69db      	ldr	r3, [r3, #28]
 8043e34:	071b      	lsls	r3, r3, #28
 8043e36:	4917      	ldr	r1, [pc, #92]	; (8043e94 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8043e38:	4313      	orrs	r3, r2
 8043e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8043e3e:	4b15      	ldr	r3, [pc, #84]	; (8043e94 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8043e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8043e44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8043e48:	687b      	ldr	r3, [r7, #4]
 8043e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043e4c:	4911      	ldr	r1, [pc, #68]	; (8043e94 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8043e4e:	4313      	orrs	r3, r2
 8043e50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8043e54:	4b0f      	ldr	r3, [pc, #60]	; (8043e94 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8043e56:	681b      	ldr	r3, [r3, #0]
 8043e58:	4a0e      	ldr	r2, [pc, #56]	; (8043e94 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8043e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8043e5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8043e60:	f7fc fe9c 	bl	8040b9c <HAL_GetTick>
 8043e64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8043e66:	e008      	b.n	8043e7a <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8043e68:	f7fc fe98 	bl	8040b9c <HAL_GetTick>
 8043e6c:	4602      	mov	r2, r0
 8043e6e:	697b      	ldr	r3, [r7, #20]
 8043e70:	1ad3      	subs	r3, r2, r3
 8043e72:	2b64      	cmp	r3, #100	; 0x64
 8043e74:	d901      	bls.n	8043e7a <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8043e76:	2303      	movs	r3, #3
 8043e78:	e007      	b.n	8043e8a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8043e7a:	4b06      	ldr	r3, [pc, #24]	; (8043e94 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8043e7c:	681b      	ldr	r3, [r3, #0]
 8043e7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8043e82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8043e86:	d1ef      	bne.n	8043e68 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8043e88:	2300      	movs	r3, #0
}
 8043e8a:	4618      	mov	r0, r3
 8043e8c:	3720      	adds	r7, #32
 8043e8e:	46bd      	mov	sp, r7
 8043e90:	bd80      	pop	{r7, pc}
 8043e92:	bf00      	nop
 8043e94:	40023800 	.word	0x40023800

08043e98 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8043e98:	b580      	push	{r7, lr}
 8043e9a:	b082      	sub	sp, #8
 8043e9c:	af00      	add	r7, sp, #0
 8043e9e:	6078      	str	r0, [r7, #4]
 8043ea0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8043ea2:	687b      	ldr	r3, [r7, #4]
 8043ea4:	2b00      	cmp	r3, #0
 8043ea6:	d101      	bne.n	8043eac <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8043ea8:	2301      	movs	r3, #1
 8043eaa:	e025      	b.n	8043ef8 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8043eac:	687b      	ldr	r3, [r7, #4]
 8043eae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8043eb2:	b2db      	uxtb	r3, r3
 8043eb4:	2b00      	cmp	r3, #0
 8043eb6:	d106      	bne.n	8043ec6 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8043eb8:	687b      	ldr	r3, [r7, #4]
 8043eba:	2200      	movs	r2, #0
 8043ebc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8043ec0:	6878      	ldr	r0, [r7, #4]
 8043ec2:	f000 f81d 	bl	8043f00 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8043ec6:	687b      	ldr	r3, [r7, #4]
 8043ec8:	2202      	movs	r2, #2
 8043eca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8043ece:	687b      	ldr	r3, [r7, #4]
 8043ed0:	681a      	ldr	r2, [r3, #0]
 8043ed2:	687b      	ldr	r3, [r7, #4]
 8043ed4:	3304      	adds	r3, #4
 8043ed6:	4619      	mov	r1, r3
 8043ed8:	4610      	mov	r0, r2
 8043eda:	f000 f867 	bl	8043fac <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8043ede:	687b      	ldr	r3, [r7, #4]
 8043ee0:	6818      	ldr	r0, [r3, #0]
 8043ee2:	687b      	ldr	r3, [r7, #4]
 8043ee4:	685b      	ldr	r3, [r3, #4]
 8043ee6:	461a      	mov	r2, r3
 8043ee8:	6839      	ldr	r1, [r7, #0]
 8043eea:	f000 f8d1 	bl	8044090 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8043eee:	687b      	ldr	r3, [r7, #4]
 8043ef0:	2201      	movs	r2, #1
 8043ef2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8043ef6:	2300      	movs	r3, #0
}
 8043ef8:	4618      	mov	r0, r3
 8043efa:	3708      	adds	r7, #8
 8043efc:	46bd      	mov	sp, r7
 8043efe:	bd80      	pop	{r7, pc}

08043f00 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8043f00:	b480      	push	{r7}
 8043f02:	b083      	sub	sp, #12
 8043f04:	af00      	add	r7, sp, #0
 8043f06:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8043f08:	bf00      	nop
 8043f0a:	370c      	adds	r7, #12
 8043f0c:	46bd      	mov	sp, r7
 8043f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043f12:	4770      	bx	lr

08043f14 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8043f14:	b580      	push	{r7, lr}
 8043f16:	b084      	sub	sp, #16
 8043f18:	af00      	add	r7, sp, #0
 8043f1a:	60f8      	str	r0, [r7, #12]
 8043f1c:	60b9      	str	r1, [r7, #8]
 8043f1e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8043f20:	68fb      	ldr	r3, [r7, #12]
 8043f22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8043f26:	b2db      	uxtb	r3, r3
 8043f28:	2b02      	cmp	r3, #2
 8043f2a:	d101      	bne.n	8043f30 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8043f2c:	2302      	movs	r3, #2
 8043f2e:	e018      	b.n	8043f62 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8043f30:	68fb      	ldr	r3, [r7, #12]
 8043f32:	2202      	movs	r2, #2
 8043f34:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8043f38:	68fb      	ldr	r3, [r7, #12]
 8043f3a:	681b      	ldr	r3, [r3, #0]
 8043f3c:	687a      	ldr	r2, [r7, #4]
 8043f3e:	68b9      	ldr	r1, [r7, #8]
 8043f40:	4618      	mov	r0, r3
 8043f42:	f000 f925 	bl	8044190 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8043f46:	68bb      	ldr	r3, [r7, #8]
 8043f48:	681b      	ldr	r3, [r3, #0]
 8043f4a:	2b02      	cmp	r3, #2
 8043f4c:	d104      	bne.n	8043f58 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8043f4e:	68fb      	ldr	r3, [r7, #12]
 8043f50:	2205      	movs	r2, #5
 8043f52:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8043f56:	e003      	b.n	8043f60 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8043f58:	68fb      	ldr	r3, [r7, #12]
 8043f5a:	2201      	movs	r2, #1
 8043f5c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8043f60:	2300      	movs	r3, #0
}
 8043f62:	4618      	mov	r0, r3
 8043f64:	3710      	adds	r7, #16
 8043f66:	46bd      	mov	sp, r7
 8043f68:	bd80      	pop	{r7, pc}

08043f6a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8043f6a:	b580      	push	{r7, lr}
 8043f6c:	b082      	sub	sp, #8
 8043f6e:	af00      	add	r7, sp, #0
 8043f70:	6078      	str	r0, [r7, #4]
 8043f72:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8043f74:	687b      	ldr	r3, [r7, #4]
 8043f76:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8043f7a:	b2db      	uxtb	r3, r3
 8043f7c:	2b02      	cmp	r3, #2
 8043f7e:	d101      	bne.n	8043f84 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8043f80:	2302      	movs	r3, #2
 8043f82:	e00e      	b.n	8043fa2 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8043f84:	687b      	ldr	r3, [r7, #4]
 8043f86:	2202      	movs	r2, #2
 8043f88:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8043f8c:	687b      	ldr	r3, [r7, #4]
 8043f8e:	681b      	ldr	r3, [r3, #0]
 8043f90:	6839      	ldr	r1, [r7, #0]
 8043f92:	4618      	mov	r0, r3
 8043f94:	f000 f91d 	bl	80441d2 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8043f98:	687b      	ldr	r3, [r7, #4]
 8043f9a:	2201      	movs	r2, #1
 8043f9c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8043fa0:	2300      	movs	r3, #0
}
 8043fa2:	4618      	mov	r0, r3
 8043fa4:	3708      	adds	r7, #8
 8043fa6:	46bd      	mov	sp, r7
 8043fa8:	bd80      	pop	{r7, pc}
	...

08043fac <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8043fac:	b480      	push	{r7}
 8043fae:	b085      	sub	sp, #20
 8043fb0:	af00      	add	r7, sp, #0
 8043fb2:	6078      	str	r0, [r7, #4]
 8043fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8043fb6:	2300      	movs	r3, #0
 8043fb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8043fba:	2300      	movs	r3, #0
 8043fbc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8043fbe:	683b      	ldr	r3, [r7, #0]
 8043fc0:	681b      	ldr	r3, [r3, #0]
 8043fc2:	2b01      	cmp	r3, #1
 8043fc4:	d027      	beq.n	8044016 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8043fc6:	687b      	ldr	r3, [r7, #4]
 8043fc8:	681b      	ldr	r3, [r3, #0]
 8043fca:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8043fcc:	68fa      	ldr	r2, [r7, #12]
 8043fce:	4b2f      	ldr	r3, [pc, #188]	; (804408c <FMC_SDRAM_Init+0xe0>)
 8043fd0:	4013      	ands	r3, r2
 8043fd2:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8043fd4:	683b      	ldr	r3, [r7, #0]
 8043fd6:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8043fd8:	683b      	ldr	r3, [r7, #0]
 8043fda:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8043fdc:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8043fde:	683b      	ldr	r3, [r7, #0]
 8043fe0:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8043fe2:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8043fe4:	683b      	ldr	r3, [r7, #0]
 8043fe6:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8043fe8:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8043fea:	683b      	ldr	r3, [r7, #0]
 8043fec:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8043fee:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8043ff0:	683b      	ldr	r3, [r7, #0]
 8043ff2:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8043ff4:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8043ff6:	683b      	ldr	r3, [r7, #0]
 8043ff8:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8043ffa:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8043ffc:	683b      	ldr	r3, [r7, #0]
 8043ffe:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8044000:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8044002:	683b      	ldr	r3, [r7, #0]
 8044004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8044006:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8044008:	68fa      	ldr	r2, [r7, #12]
 804400a:	4313      	orrs	r3, r2
 804400c:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 804400e:	687b      	ldr	r3, [r7, #4]
 8044010:	68fa      	ldr	r2, [r7, #12]
 8044012:	601a      	str	r2, [r3, #0]
 8044014:	e032      	b.n	804407c <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8044016:	687b      	ldr	r3, [r7, #4]
 8044018:	681b      	ldr	r3, [r3, #0]
 804401a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 804401c:	68fb      	ldr	r3, [r7, #12]
 804401e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8044022:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8044024:	683b      	ldr	r3, [r7, #0]
 8044026:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8044028:	683b      	ldr	r3, [r7, #0]
 804402a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 804402c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 804402e:	683b      	ldr	r3, [r7, #0]
 8044030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8044032:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8044034:	68fa      	ldr	r2, [r7, #12]
 8044036:	4313      	orrs	r3, r2
 8044038:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 804403a:	687b      	ldr	r3, [r7, #4]
 804403c:	685b      	ldr	r3, [r3, #4]
 804403e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8044040:	68ba      	ldr	r2, [r7, #8]
 8044042:	4b12      	ldr	r3, [pc, #72]	; (804408c <FMC_SDRAM_Init+0xe0>)
 8044044:	4013      	ands	r3, r2
 8044046:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8044048:	683b      	ldr	r3, [r7, #0]
 804404a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 804404c:	683b      	ldr	r3, [r7, #0]
 804404e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8044050:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8044052:	683b      	ldr	r3, [r7, #0]
 8044054:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8044056:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8044058:	683b      	ldr	r3, [r7, #0]
 804405a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 804405c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 804405e:	683b      	ldr	r3, [r7, #0]
 8044060:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8044062:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8044064:	683b      	ldr	r3, [r7, #0]
 8044066:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8044068:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 804406a:	68ba      	ldr	r2, [r7, #8]
 804406c:	4313      	orrs	r3, r2
 804406e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8044070:	687b      	ldr	r3, [r7, #4]
 8044072:	68fa      	ldr	r2, [r7, #12]
 8044074:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8044076:	687b      	ldr	r3, [r7, #4]
 8044078:	68ba      	ldr	r2, [r7, #8]
 804407a:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 804407c:	2300      	movs	r3, #0
}
 804407e:	4618      	mov	r0, r3
 8044080:	3714      	adds	r7, #20
 8044082:	46bd      	mov	sp, r7
 8044084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044088:	4770      	bx	lr
 804408a:	bf00      	nop
 804408c:	ffff8000 	.word	0xffff8000

08044090 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8044090:	b480      	push	{r7}
 8044092:	b087      	sub	sp, #28
 8044094:	af00      	add	r7, sp, #0
 8044096:	60f8      	str	r0, [r7, #12]
 8044098:	60b9      	str	r1, [r7, #8]
 804409a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 804409c:	2300      	movs	r3, #0
 804409e:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 80440a0:	2300      	movs	r3, #0
 80440a2:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80440a4:	687b      	ldr	r3, [r7, #4]
 80440a6:	2b01      	cmp	r3, #1
 80440a8:	d02e      	beq.n	8044108 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80440aa:	68fb      	ldr	r3, [r7, #12]
 80440ac:	689b      	ldr	r3, [r3, #8]
 80440ae:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80440b0:	697b      	ldr	r3, [r7, #20]
 80440b2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80440b6:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80440b8:	68bb      	ldr	r3, [r7, #8]
 80440ba:	681b      	ldr	r3, [r3, #0]
 80440bc:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80440be:	68bb      	ldr	r3, [r7, #8]
 80440c0:	685b      	ldr	r3, [r3, #4]
 80440c2:	3b01      	subs	r3, #1
 80440c4:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80440c6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80440c8:	68bb      	ldr	r3, [r7, #8]
 80440ca:	689b      	ldr	r3, [r3, #8]
 80440cc:	3b01      	subs	r3, #1
 80440ce:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80440d0:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80440d2:	68bb      	ldr	r3, [r7, #8]
 80440d4:	68db      	ldr	r3, [r3, #12]
 80440d6:	3b01      	subs	r3, #1
 80440d8:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80440da:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80440dc:	68bb      	ldr	r3, [r7, #8]
 80440de:	691b      	ldr	r3, [r3, #16]
 80440e0:	3b01      	subs	r3, #1
 80440e2:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80440e4:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 80440e6:	68bb      	ldr	r3, [r7, #8]
 80440e8:	695b      	ldr	r3, [r3, #20]
 80440ea:	3b01      	subs	r3, #1
 80440ec:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80440ee:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 80440f0:	68bb      	ldr	r3, [r7, #8]
 80440f2:	699b      	ldr	r3, [r3, #24]
 80440f4:	3b01      	subs	r3, #1
 80440f6:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80440f8:	4313      	orrs	r3, r2
 80440fa:	697a      	ldr	r2, [r7, #20]
 80440fc:	4313      	orrs	r3, r2
 80440fe:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8044100:	68fb      	ldr	r3, [r7, #12]
 8044102:	697a      	ldr	r2, [r7, #20]
 8044104:	609a      	str	r2, [r3, #8]
 8044106:	e039      	b.n	804417c <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8044108:	68fb      	ldr	r3, [r7, #12]
 804410a:	689b      	ldr	r3, [r3, #8]
 804410c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 804410e:	697a      	ldr	r2, [r7, #20]
 8044110:	4b1e      	ldr	r3, [pc, #120]	; (804418c <FMC_SDRAM_Timing_Init+0xfc>)
 8044112:	4013      	ands	r3, r2
 8044114:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8044116:	68bb      	ldr	r3, [r7, #8]
 8044118:	68db      	ldr	r3, [r3, #12]
 804411a:	3b01      	subs	r3, #1
 804411c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 804411e:	68bb      	ldr	r3, [r7, #8]
 8044120:	695b      	ldr	r3, [r3, #20]
 8044122:	3b01      	subs	r3, #1
 8044124:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8044126:	4313      	orrs	r3, r2
 8044128:	697a      	ldr	r2, [r7, #20]
 804412a:	4313      	orrs	r3, r2
 804412c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 804412e:	68fb      	ldr	r3, [r7, #12]
 8044130:	68db      	ldr	r3, [r3, #12]
 8044132:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8044134:	693b      	ldr	r3, [r7, #16]
 8044136:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 804413a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 804413c:	68bb      	ldr	r3, [r7, #8]
 804413e:	681b      	ldr	r3, [r3, #0]
 8044140:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8044142:	68bb      	ldr	r3, [r7, #8]
 8044144:	685b      	ldr	r3, [r3, #4]
 8044146:	3b01      	subs	r3, #1
 8044148:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 804414a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 804414c:	68bb      	ldr	r3, [r7, #8]
 804414e:	689b      	ldr	r3, [r3, #8]
 8044150:	3b01      	subs	r3, #1
 8044152:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8044154:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8044156:	68bb      	ldr	r3, [r7, #8]
 8044158:	691b      	ldr	r3, [r3, #16]
 804415a:	3b01      	subs	r3, #1
 804415c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 804415e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8044160:	68bb      	ldr	r3, [r7, #8]
 8044162:	699b      	ldr	r3, [r3, #24]
 8044164:	3b01      	subs	r3, #1
 8044166:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8044168:	4313      	orrs	r3, r2
 804416a:	693a      	ldr	r2, [r7, #16]
 804416c:	4313      	orrs	r3, r2
 804416e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8044170:	68fb      	ldr	r3, [r7, #12]
 8044172:	697a      	ldr	r2, [r7, #20]
 8044174:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8044176:	68fb      	ldr	r3, [r7, #12]
 8044178:	693a      	ldr	r2, [r7, #16]
 804417a:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 804417c:	2300      	movs	r3, #0
}
 804417e:	4618      	mov	r0, r3
 8044180:	371c      	adds	r7, #28
 8044182:	46bd      	mov	sp, r7
 8044184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044188:	4770      	bx	lr
 804418a:	bf00      	nop
 804418c:	ff0f0fff 	.word	0xff0f0fff

08044190 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8044190:	b480      	push	{r7}
 8044192:	b087      	sub	sp, #28
 8044194:	af00      	add	r7, sp, #0
 8044196:	60f8      	str	r0, [r7, #12]
 8044198:	60b9      	str	r1, [r7, #8]
 804419a:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 804419c:	2300      	movs	r3, #0
 804419e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80441a0:	68bb      	ldr	r3, [r7, #8]
 80441a2:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80441a4:	68bb      	ldr	r3, [r7, #8]
 80441a6:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80441a8:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 80441aa:	68bb      	ldr	r3, [r7, #8]
 80441ac:	689b      	ldr	r3, [r3, #8]
 80441ae:	3b01      	subs	r3, #1
 80441b0:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80441b2:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 80441b4:	68bb      	ldr	r3, [r7, #8]
 80441b6:	68db      	ldr	r3, [r3, #12]
 80441b8:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80441ba:	4313      	orrs	r3, r2
 80441bc:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 80441be:	697a      	ldr	r2, [r7, #20]
 80441c0:	68fb      	ldr	r3, [r7, #12]
 80441c2:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 80441c4:	2300      	movs	r3, #0
}
 80441c6:	4618      	mov	r0, r3
 80441c8:	371c      	adds	r7, #28
 80441ca:	46bd      	mov	sp, r7
 80441cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80441d0:	4770      	bx	lr

080441d2 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80441d2:	b480      	push	{r7}
 80441d4:	b083      	sub	sp, #12
 80441d6:	af00      	add	r7, sp, #0
 80441d8:	6078      	str	r0, [r7, #4]
 80441da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 80441dc:	687b      	ldr	r3, [r7, #4]
 80441de:	695a      	ldr	r2, [r3, #20]
 80441e0:	683b      	ldr	r3, [r7, #0]
 80441e2:	005b      	lsls	r3, r3, #1
 80441e4:	431a      	orrs	r2, r3
 80441e6:	687b      	ldr	r3, [r7, #4]
 80441e8:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80441ea:	2300      	movs	r3, #0
}
 80441ec:	4618      	mov	r0, r3
 80441ee:	370c      	adds	r7, #12
 80441f0:	46bd      	mov	sp, r7
 80441f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80441f6:	4770      	bx	lr

080441f8 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80441f8:	b580      	push	{r7, lr}
 80441fa:	b082      	sub	sp, #8
 80441fc:	af00      	add	r7, sp, #0
 80441fe:	4603      	mov	r3, r0
 8044200:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8044202:	20c8      	movs	r0, #200	; 0xc8
 8044204:	f000 fb6c 	bl	80448e0 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8044208:	f000 f9b4 	bl	8044574 <ft5336_I2C_InitializeIfRequired>
}
 804420c:	bf00      	nop
 804420e:	3708      	adds	r7, #8
 8044210:	46bd      	mov	sp, r7
 8044212:	bd80      	pop	{r7, pc}

08044214 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8044214:	b480      	push	{r7}
 8044216:	b083      	sub	sp, #12
 8044218:	af00      	add	r7, sp, #0
 804421a:	4603      	mov	r3, r0
 804421c:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 804421e:	bf00      	nop
 8044220:	370c      	adds	r7, #12
 8044222:	46bd      	mov	sp, r7
 8044224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044228:	4770      	bx	lr

0804422a <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 804422a:	b580      	push	{r7, lr}
 804422c:	b084      	sub	sp, #16
 804422e:	af00      	add	r7, sp, #0
 8044230:	4603      	mov	r3, r0
 8044232:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8044234:	2300      	movs	r3, #0
 8044236:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8044238:	2300      	movs	r3, #0
 804423a:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 804423c:	2300      	movs	r3, #0
 804423e:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8044240:	f000 f998 	bl	8044574 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8044244:	2300      	movs	r3, #0
 8044246:	73fb      	strb	r3, [r7, #15]
 8044248:	e010      	b.n	804426c <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 804424a:	88fb      	ldrh	r3, [r7, #6]
 804424c:	b2db      	uxtb	r3, r3
 804424e:	21a8      	movs	r1, #168	; 0xa8
 8044250:	4618      	mov	r0, r3
 8044252:	f000 fb27 	bl	80448a4 <TS_IO_Read>
 8044256:	4603      	mov	r3, r0
 8044258:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 804425a:	7b7b      	ldrb	r3, [r7, #13]
 804425c:	b2db      	uxtb	r3, r3
 804425e:	2b51      	cmp	r3, #81	; 0x51
 8044260:	d101      	bne.n	8044266 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8044262:	2301      	movs	r3, #1
 8044264:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8044266:	7bfb      	ldrb	r3, [r7, #15]
 8044268:	3301      	adds	r3, #1
 804426a:	73fb      	strb	r3, [r7, #15]
 804426c:	7bfb      	ldrb	r3, [r7, #15]
 804426e:	2b02      	cmp	r3, #2
 8044270:	d802      	bhi.n	8044278 <ft5336_ReadID+0x4e>
 8044272:	7bbb      	ldrb	r3, [r7, #14]
 8044274:	2b00      	cmp	r3, #0
 8044276:	d0e8      	beq.n	804424a <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8044278:	7b7b      	ldrb	r3, [r7, #13]
 804427a:	b2db      	uxtb	r3, r3
 804427c:	b29b      	uxth	r3, r3
}
 804427e:	4618      	mov	r0, r3
 8044280:	3710      	adds	r7, #16
 8044282:	46bd      	mov	sp, r7
 8044284:	bd80      	pop	{r7, pc}

08044286 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8044286:	b580      	push	{r7, lr}
 8044288:	b082      	sub	sp, #8
 804428a:	af00      	add	r7, sp, #0
 804428c:	4603      	mov	r3, r0
 804428e:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8044290:	88fb      	ldrh	r3, [r7, #6]
 8044292:	4618      	mov	r0, r3
 8044294:	f000 f97e 	bl	8044594 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8044298:	88fb      	ldrh	r3, [r7, #6]
 804429a:	4618      	mov	r0, r3
 804429c:	f000 f932 	bl	8044504 <ft5336_TS_DisableIT>
}
 80442a0:	bf00      	nop
 80442a2:	3708      	adds	r7, #8
 80442a4:	46bd      	mov	sp, r7
 80442a6:	bd80      	pop	{r7, pc}

080442a8 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80442a8:	b580      	push	{r7, lr}
 80442aa:	b084      	sub	sp, #16
 80442ac:	af00      	add	r7, sp, #0
 80442ae:	4603      	mov	r3, r0
 80442b0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80442b2:	2300      	movs	r3, #0
 80442b4:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80442b6:	88fb      	ldrh	r3, [r7, #6]
 80442b8:	b2db      	uxtb	r3, r3
 80442ba:	2102      	movs	r1, #2
 80442bc:	4618      	mov	r0, r3
 80442be:	f000 faf1 	bl	80448a4 <TS_IO_Read>
 80442c2:	4603      	mov	r3, r0
 80442c4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80442c6:	7bfb      	ldrb	r3, [r7, #15]
 80442c8:	b2db      	uxtb	r3, r3
 80442ca:	f003 030f 	and.w	r3, r3, #15
 80442ce:	b2db      	uxtb	r3, r3
 80442d0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80442d2:	7bfb      	ldrb	r3, [r7, #15]
 80442d4:	b2db      	uxtb	r3, r3
 80442d6:	2b05      	cmp	r3, #5
 80442d8:	d901      	bls.n	80442de <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80442da:	2300      	movs	r3, #0
 80442dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80442de:	7bfb      	ldrb	r3, [r7, #15]
 80442e0:	b2da      	uxtb	r2, r3
 80442e2:	4b05      	ldr	r3, [pc, #20]	; (80442f8 <ft5336_TS_DetectTouch+0x50>)
 80442e4:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 80442e6:	4b04      	ldr	r3, [pc, #16]	; (80442f8 <ft5336_TS_DetectTouch+0x50>)
 80442e8:	2200      	movs	r2, #0
 80442ea:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80442ec:	7bfb      	ldrb	r3, [r7, #15]
 80442ee:	b2db      	uxtb	r3, r3
}
 80442f0:	4618      	mov	r0, r3
 80442f2:	3710      	adds	r7, #16
 80442f4:	46bd      	mov	sp, r7
 80442f6:	bd80      	pop	{r7, pc}
 80442f8:	2000005c 	.word	0x2000005c

080442fc <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80442fc:	b580      	push	{r7, lr}
 80442fe:	b086      	sub	sp, #24
 8044300:	af00      	add	r7, sp, #0
 8044302:	4603      	mov	r3, r0
 8044304:	60b9      	str	r1, [r7, #8]
 8044306:	607a      	str	r2, [r7, #4]
 8044308:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 804430a:	2300      	movs	r3, #0
 804430c:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 804430e:	2300      	movs	r3, #0
 8044310:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8044312:	2300      	movs	r3, #0
 8044314:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8044316:	2300      	movs	r3, #0
 8044318:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 804431a:	2300      	movs	r3, #0
 804431c:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 804431e:	4b6d      	ldr	r3, [pc, #436]	; (80444d4 <ft5336_TS_GetXY+0x1d8>)
 8044320:	789a      	ldrb	r2, [r3, #2]
 8044322:	4b6c      	ldr	r3, [pc, #432]	; (80444d4 <ft5336_TS_GetXY+0x1d8>)
 8044324:	785b      	ldrb	r3, [r3, #1]
 8044326:	429a      	cmp	r2, r3
 8044328:	f080 80cf 	bcs.w	80444ca <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 804432c:	4b69      	ldr	r3, [pc, #420]	; (80444d4 <ft5336_TS_GetXY+0x1d8>)
 804432e:	789b      	ldrb	r3, [r3, #2]
 8044330:	2b09      	cmp	r3, #9
 8044332:	d871      	bhi.n	8044418 <ft5336_TS_GetXY+0x11c>
 8044334:	a201      	add	r2, pc, #4	; (adr r2, 804433c <ft5336_TS_GetXY+0x40>)
 8044336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804433a:	bf00      	nop
 804433c:	08044365 	.word	0x08044365
 8044340:	08044377 	.word	0x08044377
 8044344:	08044389 	.word	0x08044389
 8044348:	0804439b 	.word	0x0804439b
 804434c:	080443ad 	.word	0x080443ad
 8044350:	080443bf 	.word	0x080443bf
 8044354:	080443d1 	.word	0x080443d1
 8044358:	080443e3 	.word	0x080443e3
 804435c:	080443f5 	.word	0x080443f5
 8044360:	08044407 	.word	0x08044407
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8044364:	2304      	movs	r3, #4
 8044366:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8044368:	2303      	movs	r3, #3
 804436a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 804436c:	2306      	movs	r3, #6
 804436e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8044370:	2305      	movs	r3, #5
 8044372:	753b      	strb	r3, [r7, #20]
      break;
 8044374:	e051      	b.n	804441a <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8044376:	230a      	movs	r3, #10
 8044378:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 804437a:	2309      	movs	r3, #9
 804437c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 804437e:	230c      	movs	r3, #12
 8044380:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8044382:	230b      	movs	r3, #11
 8044384:	753b      	strb	r3, [r7, #20]
      break;
 8044386:	e048      	b.n	804441a <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8044388:	2310      	movs	r3, #16
 804438a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 804438c:	230f      	movs	r3, #15
 804438e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8044390:	2312      	movs	r3, #18
 8044392:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8044394:	2311      	movs	r3, #17
 8044396:	753b      	strb	r3, [r7, #20]
      break;
 8044398:	e03f      	b.n	804441a <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 804439a:	2316      	movs	r3, #22
 804439c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 804439e:	2315      	movs	r3, #21
 80443a0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80443a2:	2318      	movs	r3, #24
 80443a4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80443a6:	2317      	movs	r3, #23
 80443a8:	753b      	strb	r3, [r7, #20]
      break;
 80443aa:	e036      	b.n	804441a <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80443ac:	231c      	movs	r3, #28
 80443ae:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80443b0:	231b      	movs	r3, #27
 80443b2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80443b4:	231e      	movs	r3, #30
 80443b6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80443b8:	231d      	movs	r3, #29
 80443ba:	753b      	strb	r3, [r7, #20]
      break;
 80443bc:	e02d      	b.n	804441a <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80443be:	2322      	movs	r3, #34	; 0x22
 80443c0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80443c2:	2321      	movs	r3, #33	; 0x21
 80443c4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80443c6:	2324      	movs	r3, #36	; 0x24
 80443c8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80443ca:	2323      	movs	r3, #35	; 0x23
 80443cc:	753b      	strb	r3, [r7, #20]
      break;
 80443ce:	e024      	b.n	804441a <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80443d0:	2328      	movs	r3, #40	; 0x28
 80443d2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80443d4:	2327      	movs	r3, #39	; 0x27
 80443d6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80443d8:	232a      	movs	r3, #42	; 0x2a
 80443da:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80443dc:	2329      	movs	r3, #41	; 0x29
 80443de:	753b      	strb	r3, [r7, #20]
      break;
 80443e0:	e01b      	b.n	804441a <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 80443e2:	232e      	movs	r3, #46	; 0x2e
 80443e4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 80443e6:	232d      	movs	r3, #45	; 0x2d
 80443e8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80443ea:	2330      	movs	r3, #48	; 0x30
 80443ec:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80443ee:	232f      	movs	r3, #47	; 0x2f
 80443f0:	753b      	strb	r3, [r7, #20]
      break;
 80443f2:	e012      	b.n	804441a <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80443f4:	2334      	movs	r3, #52	; 0x34
 80443f6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80443f8:	2333      	movs	r3, #51	; 0x33
 80443fa:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80443fc:	2336      	movs	r3, #54	; 0x36
 80443fe:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8044400:	2335      	movs	r3, #53	; 0x35
 8044402:	753b      	strb	r3, [r7, #20]
      break;
 8044404:	e009      	b.n	804441a <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8044406:	233a      	movs	r3, #58	; 0x3a
 8044408:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 804440a:	2339      	movs	r3, #57	; 0x39
 804440c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 804440e:	233c      	movs	r3, #60	; 0x3c
 8044410:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8044412:	233b      	movs	r3, #59	; 0x3b
 8044414:	753b      	strb	r3, [r7, #20]
      break;
 8044416:	e000      	b.n	804441a <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8044418:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 804441a:	89fb      	ldrh	r3, [r7, #14]
 804441c:	b2db      	uxtb	r3, r3
 804441e:	7dfa      	ldrb	r2, [r7, #23]
 8044420:	4611      	mov	r1, r2
 8044422:	4618      	mov	r0, r3
 8044424:	f000 fa3e 	bl	80448a4 <TS_IO_Read>
 8044428:	4603      	mov	r3, r0
 804442a:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 804442c:	7cfb      	ldrb	r3, [r7, #19]
 804442e:	b2db      	uxtb	r3, r3
 8044430:	b29a      	uxth	r2, r3
 8044432:	4b29      	ldr	r3, [pc, #164]	; (80444d8 <ft5336_TS_GetXY+0x1dc>)
 8044434:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8044436:	89fb      	ldrh	r3, [r7, #14]
 8044438:	b2db      	uxtb	r3, r3
 804443a:	7dba      	ldrb	r2, [r7, #22]
 804443c:	4611      	mov	r1, r2
 804443e:	4618      	mov	r0, r3
 8044440:	f000 fa30 	bl	80448a4 <TS_IO_Read>
 8044444:	4603      	mov	r3, r0
 8044446:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8044448:	7cfb      	ldrb	r3, [r7, #19]
 804444a:	b2db      	uxtb	r3, r3
 804444c:	021b      	lsls	r3, r3, #8
 804444e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8044452:	b21a      	sxth	r2, r3
 8044454:	4b20      	ldr	r3, [pc, #128]	; (80444d8 <ft5336_TS_GetXY+0x1dc>)
 8044456:	881b      	ldrh	r3, [r3, #0]
 8044458:	b21b      	sxth	r3, r3
 804445a:	4313      	orrs	r3, r2
 804445c:	b21b      	sxth	r3, r3
 804445e:	b29a      	uxth	r2, r3
 8044460:	4b1d      	ldr	r3, [pc, #116]	; (80444d8 <ft5336_TS_GetXY+0x1dc>)
 8044462:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8044464:	4b1c      	ldr	r3, [pc, #112]	; (80444d8 <ft5336_TS_GetXY+0x1dc>)
 8044466:	881a      	ldrh	r2, [r3, #0]
 8044468:	68bb      	ldr	r3, [r7, #8]
 804446a:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 804446c:	89fb      	ldrh	r3, [r7, #14]
 804446e:	b2db      	uxtb	r3, r3
 8044470:	7d7a      	ldrb	r2, [r7, #21]
 8044472:	4611      	mov	r1, r2
 8044474:	4618      	mov	r0, r3
 8044476:	f000 fa15 	bl	80448a4 <TS_IO_Read>
 804447a:	4603      	mov	r3, r0
 804447c:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 804447e:	7cfb      	ldrb	r3, [r7, #19]
 8044480:	b2db      	uxtb	r3, r3
 8044482:	b29a      	uxth	r2, r3
 8044484:	4b14      	ldr	r3, [pc, #80]	; (80444d8 <ft5336_TS_GetXY+0x1dc>)
 8044486:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8044488:	89fb      	ldrh	r3, [r7, #14]
 804448a:	b2db      	uxtb	r3, r3
 804448c:	7d3a      	ldrb	r2, [r7, #20]
 804448e:	4611      	mov	r1, r2
 8044490:	4618      	mov	r0, r3
 8044492:	f000 fa07 	bl	80448a4 <TS_IO_Read>
 8044496:	4603      	mov	r3, r0
 8044498:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 804449a:	7cfb      	ldrb	r3, [r7, #19]
 804449c:	b2db      	uxtb	r3, r3
 804449e:	021b      	lsls	r3, r3, #8
 80444a0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80444a4:	b21a      	sxth	r2, r3
 80444a6:	4b0c      	ldr	r3, [pc, #48]	; (80444d8 <ft5336_TS_GetXY+0x1dc>)
 80444a8:	881b      	ldrh	r3, [r3, #0]
 80444aa:	b21b      	sxth	r3, r3
 80444ac:	4313      	orrs	r3, r2
 80444ae:	b21b      	sxth	r3, r3
 80444b0:	b29a      	uxth	r2, r3
 80444b2:	4b09      	ldr	r3, [pc, #36]	; (80444d8 <ft5336_TS_GetXY+0x1dc>)
 80444b4:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80444b6:	4b08      	ldr	r3, [pc, #32]	; (80444d8 <ft5336_TS_GetXY+0x1dc>)
 80444b8:	881a      	ldrh	r2, [r3, #0]
 80444ba:	687b      	ldr	r3, [r7, #4]
 80444bc:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80444be:	4b05      	ldr	r3, [pc, #20]	; (80444d4 <ft5336_TS_GetXY+0x1d8>)
 80444c0:	789b      	ldrb	r3, [r3, #2]
 80444c2:	3301      	adds	r3, #1
 80444c4:	b2da      	uxtb	r2, r3
 80444c6:	4b03      	ldr	r3, [pc, #12]	; (80444d4 <ft5336_TS_GetXY+0x1d8>)
 80444c8:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80444ca:	bf00      	nop
 80444cc:	3718      	adds	r7, #24
 80444ce:	46bd      	mov	sp, r7
 80444d0:	bd80      	pop	{r7, pc}
 80444d2:	bf00      	nop
 80444d4:	2000005c 	.word	0x2000005c
 80444d8:	20000060 	.word	0x20000060

080444dc <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80444dc:	b580      	push	{r7, lr}
 80444de:	b084      	sub	sp, #16
 80444e0:	af00      	add	r7, sp, #0
 80444e2:	4603      	mov	r3, r0
 80444e4:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 80444e6:	2300      	movs	r3, #0
 80444e8:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80444ea:	2301      	movs	r3, #1
 80444ec:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80444ee:	88fb      	ldrh	r3, [r7, #6]
 80444f0:	b2db      	uxtb	r3, r3
 80444f2:	7bfa      	ldrb	r2, [r7, #15]
 80444f4:	21a4      	movs	r1, #164	; 0xa4
 80444f6:	4618      	mov	r0, r3
 80444f8:	f000 f9ba 	bl	8044870 <TS_IO_Write>
}
 80444fc:	bf00      	nop
 80444fe:	3710      	adds	r7, #16
 8044500:	46bd      	mov	sp, r7
 8044502:	bd80      	pop	{r7, pc}

08044504 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8044504:	b580      	push	{r7, lr}
 8044506:	b084      	sub	sp, #16
 8044508:	af00      	add	r7, sp, #0
 804450a:	4603      	mov	r3, r0
 804450c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 804450e:	2300      	movs	r3, #0
 8044510:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8044512:	2300      	movs	r3, #0
 8044514:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8044516:	88fb      	ldrh	r3, [r7, #6]
 8044518:	b2db      	uxtb	r3, r3
 804451a:	7bfa      	ldrb	r2, [r7, #15]
 804451c:	21a4      	movs	r1, #164	; 0xa4
 804451e:	4618      	mov	r0, r3
 8044520:	f000 f9a6 	bl	8044870 <TS_IO_Write>
}
 8044524:	bf00      	nop
 8044526:	3710      	adds	r7, #16
 8044528:	46bd      	mov	sp, r7
 804452a:	bd80      	pop	{r7, pc}

0804452c <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 804452c:	b480      	push	{r7}
 804452e:	b083      	sub	sp, #12
 8044530:	af00      	add	r7, sp, #0
 8044532:	4603      	mov	r3, r0
 8044534:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8044536:	2300      	movs	r3, #0
}
 8044538:	4618      	mov	r0, r3
 804453a:	370c      	adds	r7, #12
 804453c:	46bd      	mov	sp, r7
 804453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044542:	4770      	bx	lr

08044544 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8044544:	b480      	push	{r7}
 8044546:	b083      	sub	sp, #12
 8044548:	af00      	add	r7, sp, #0
 804454a:	4603      	mov	r3, r0
 804454c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 804454e:	bf00      	nop
 8044550:	370c      	adds	r7, #12
 8044552:	46bd      	mov	sp, r7
 8044554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044558:	4770      	bx	lr
	...

0804455c <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 804455c:	b480      	push	{r7}
 804455e:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8044560:	4b03      	ldr	r3, [pc, #12]	; (8044570 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8044562:	781b      	ldrb	r3, [r3, #0]
}
 8044564:	4618      	mov	r0, r3
 8044566:	46bd      	mov	sp, r7
 8044568:	f85d 7b04 	ldr.w	r7, [sp], #4
 804456c:	4770      	bx	lr
 804456e:	bf00      	nop
 8044570:	2000005c 	.word	0x2000005c

08044574 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8044574:	b580      	push	{r7, lr}
 8044576:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8044578:	f7ff fff0 	bl	804455c <ft5336_Get_I2C_InitializedStatus>
 804457c:	4603      	mov	r3, r0
 804457e:	2b00      	cmp	r3, #0
 8044580:	d104      	bne.n	804458c <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8044582:	f000 f96b 	bl	804485c <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8044586:	4b02      	ldr	r3, [pc, #8]	; (8044590 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8044588:	2201      	movs	r2, #1
 804458a:	701a      	strb	r2, [r3, #0]
  }
}
 804458c:	bf00      	nop
 804458e:	bd80      	pop	{r7, pc}
 8044590:	2000005c 	.word	0x2000005c

08044594 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8044594:	b480      	push	{r7}
 8044596:	b085      	sub	sp, #20
 8044598:	af00      	add	r7, sp, #0
 804459a:	4603      	mov	r3, r0
 804459c:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 804459e:	2300      	movs	r3, #0
 80445a0:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 80445a2:	68fb      	ldr	r3, [r7, #12]
}
 80445a4:	4618      	mov	r0, r3
 80445a6:	3714      	adds	r7, #20
 80445a8:	46bd      	mov	sp, r7
 80445aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80445ae:	4770      	bx	lr

080445b0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80445b0:	b580      	push	{r7, lr}
 80445b2:	b08c      	sub	sp, #48	; 0x30
 80445b4:	af00      	add	r7, sp, #0
 80445b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80445b8:	687b      	ldr	r3, [r7, #4]
 80445ba:	4a51      	ldr	r2, [pc, #324]	; (8044700 <I2Cx_MspInit+0x150>)
 80445bc:	4293      	cmp	r3, r2
 80445be:	d14d      	bne.n	804465c <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80445c0:	4b50      	ldr	r3, [pc, #320]	; (8044704 <I2Cx_MspInit+0x154>)
 80445c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80445c4:	4a4f      	ldr	r2, [pc, #316]	; (8044704 <I2Cx_MspInit+0x154>)
 80445c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80445ca:	6313      	str	r3, [r2, #48]	; 0x30
 80445cc:	4b4d      	ldr	r3, [pc, #308]	; (8044704 <I2Cx_MspInit+0x154>)
 80445ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80445d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80445d4:	61bb      	str	r3, [r7, #24]
 80445d6:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80445d8:	2380      	movs	r3, #128	; 0x80
 80445da:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80445dc:	2312      	movs	r3, #18
 80445de:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80445e0:	2300      	movs	r3, #0
 80445e2:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80445e4:	2302      	movs	r3, #2
 80445e6:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80445e8:	2304      	movs	r3, #4
 80445ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80445ec:	f107 031c 	add.w	r3, r7, #28
 80445f0:	4619      	mov	r1, r3
 80445f2:	4845      	ldr	r0, [pc, #276]	; (8044708 <I2Cx_MspInit+0x158>)
 80445f4:	f7fd f944 	bl	8041880 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80445f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80445fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80445fe:	f107 031c 	add.w	r3, r7, #28
 8044602:	4619      	mov	r1, r3
 8044604:	4840      	ldr	r0, [pc, #256]	; (8044708 <I2Cx_MspInit+0x158>)
 8044606:	f7fd f93b 	bl	8041880 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 804460a:	4b3e      	ldr	r3, [pc, #248]	; (8044704 <I2Cx_MspInit+0x154>)
 804460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804460e:	4a3d      	ldr	r2, [pc, #244]	; (8044704 <I2Cx_MspInit+0x154>)
 8044610:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8044614:	6413      	str	r3, [r2, #64]	; 0x40
 8044616:	4b3b      	ldr	r3, [pc, #236]	; (8044704 <I2Cx_MspInit+0x154>)
 8044618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804461a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 804461e:	617b      	str	r3, [r7, #20]
 8044620:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8044622:	4b38      	ldr	r3, [pc, #224]	; (8044704 <I2Cx_MspInit+0x154>)
 8044624:	6a1b      	ldr	r3, [r3, #32]
 8044626:	4a37      	ldr	r2, [pc, #220]	; (8044704 <I2Cx_MspInit+0x154>)
 8044628:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 804462c:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 804462e:	4b35      	ldr	r3, [pc, #212]	; (8044704 <I2Cx_MspInit+0x154>)
 8044630:	6a1b      	ldr	r3, [r3, #32]
 8044632:	4a34      	ldr	r2, [pc, #208]	; (8044704 <I2Cx_MspInit+0x154>)
 8044634:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8044638:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 804463a:	2200      	movs	r2, #0
 804463c:	210f      	movs	r1, #15
 804463e:	2048      	movs	r0, #72	; 0x48
 8044640:	f7fc fbb5 	bl	8040dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8044644:	2048      	movs	r0, #72	; 0x48
 8044646:	f7fc fbce 	bl	8040de6 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 804464a:	2200      	movs	r2, #0
 804464c:	210f      	movs	r1, #15
 804464e:	2049      	movs	r0, #73	; 0x49
 8044650:	f7fc fbad 	bl	8040dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8044654:	2049      	movs	r0, #73	; 0x49
 8044656:	f7fc fbc6 	bl	8040de6 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 804465a:	e04d      	b.n	80446f8 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 804465c:	4b29      	ldr	r3, [pc, #164]	; (8044704 <I2Cx_MspInit+0x154>)
 804465e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8044660:	4a28      	ldr	r2, [pc, #160]	; (8044704 <I2Cx_MspInit+0x154>)
 8044662:	f043 0302 	orr.w	r3, r3, #2
 8044666:	6313      	str	r3, [r2, #48]	; 0x30
 8044668:	4b26      	ldr	r3, [pc, #152]	; (8044704 <I2Cx_MspInit+0x154>)
 804466a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804466c:	f003 0302 	and.w	r3, r3, #2
 8044670:	613b      	str	r3, [r7, #16]
 8044672:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8044674:	f44f 7380 	mov.w	r3, #256	; 0x100
 8044678:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 804467a:	2312      	movs	r3, #18
 804467c:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 804467e:	2300      	movs	r3, #0
 8044680:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8044682:	2302      	movs	r3, #2
 8044684:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8044686:	2304      	movs	r3, #4
 8044688:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 804468a:	f107 031c 	add.w	r3, r7, #28
 804468e:	4619      	mov	r1, r3
 8044690:	481e      	ldr	r0, [pc, #120]	; (804470c <I2Cx_MspInit+0x15c>)
 8044692:	f7fd f8f5 	bl	8041880 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8044696:	f44f 7300 	mov.w	r3, #512	; 0x200
 804469a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 804469c:	f107 031c 	add.w	r3, r7, #28
 80446a0:	4619      	mov	r1, r3
 80446a2:	481a      	ldr	r0, [pc, #104]	; (804470c <I2Cx_MspInit+0x15c>)
 80446a4:	f7fd f8ec 	bl	8041880 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80446a8:	4b16      	ldr	r3, [pc, #88]	; (8044704 <I2Cx_MspInit+0x154>)
 80446aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80446ac:	4a15      	ldr	r2, [pc, #84]	; (8044704 <I2Cx_MspInit+0x154>)
 80446ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80446b2:	6413      	str	r3, [r2, #64]	; 0x40
 80446b4:	4b13      	ldr	r3, [pc, #76]	; (8044704 <I2Cx_MspInit+0x154>)
 80446b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80446b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80446bc:	60fb      	str	r3, [r7, #12]
 80446be:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80446c0:	4b10      	ldr	r3, [pc, #64]	; (8044704 <I2Cx_MspInit+0x154>)
 80446c2:	6a1b      	ldr	r3, [r3, #32]
 80446c4:	4a0f      	ldr	r2, [pc, #60]	; (8044704 <I2Cx_MspInit+0x154>)
 80446c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80446ca:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80446cc:	4b0d      	ldr	r3, [pc, #52]	; (8044704 <I2Cx_MspInit+0x154>)
 80446ce:	6a1b      	ldr	r3, [r3, #32]
 80446d0:	4a0c      	ldr	r2, [pc, #48]	; (8044704 <I2Cx_MspInit+0x154>)
 80446d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80446d6:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80446d8:	2200      	movs	r2, #0
 80446da:	210f      	movs	r1, #15
 80446dc:	201f      	movs	r0, #31
 80446de:	f7fc fb66 	bl	8040dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80446e2:	201f      	movs	r0, #31
 80446e4:	f7fc fb7f 	bl	8040de6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80446e8:	2200      	movs	r2, #0
 80446ea:	210f      	movs	r1, #15
 80446ec:	2020      	movs	r0, #32
 80446ee:	f7fc fb5e 	bl	8040dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80446f2:	2020      	movs	r0, #32
 80446f4:	f7fc fb77 	bl	8040de6 <HAL_NVIC_EnableIRQ>
}
 80446f8:	bf00      	nop
 80446fa:	3730      	adds	r7, #48	; 0x30
 80446fc:	46bd      	mov	sp, r7
 80446fe:	bd80      	pop	{r7, pc}
 8044700:	20000064 	.word	0x20000064
 8044704:	40023800 	.word	0x40023800
 8044708:	40021c00 	.word	0x40021c00
 804470c:	40020400 	.word	0x40020400

08044710 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8044710:	b580      	push	{r7, lr}
 8044712:	b082      	sub	sp, #8
 8044714:	af00      	add	r7, sp, #0
 8044716:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8044718:	6878      	ldr	r0, [r7, #4]
 804471a:	f7fd fd77 	bl	804220c <HAL_I2C_GetState>
 804471e:	4603      	mov	r3, r0
 8044720:	2b00      	cmp	r3, #0
 8044722:	d125      	bne.n	8044770 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8044724:	687b      	ldr	r3, [r7, #4]
 8044726:	4a14      	ldr	r2, [pc, #80]	; (8044778 <I2Cx_Init+0x68>)
 8044728:	4293      	cmp	r3, r2
 804472a:	d103      	bne.n	8044734 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 804472c:	687b      	ldr	r3, [r7, #4]
 804472e:	4a13      	ldr	r2, [pc, #76]	; (804477c <I2Cx_Init+0x6c>)
 8044730:	601a      	str	r2, [r3, #0]
 8044732:	e002      	b.n	804473a <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8044734:	687b      	ldr	r3, [r7, #4]
 8044736:	4a12      	ldr	r2, [pc, #72]	; (8044780 <I2Cx_Init+0x70>)
 8044738:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 804473a:	687b      	ldr	r3, [r7, #4]
 804473c:	4a11      	ldr	r2, [pc, #68]	; (8044784 <I2Cx_Init+0x74>)
 804473e:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8044740:	687b      	ldr	r3, [r7, #4]
 8044742:	2200      	movs	r2, #0
 8044744:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8044746:	687b      	ldr	r3, [r7, #4]
 8044748:	2201      	movs	r2, #1
 804474a:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 804474c:	687b      	ldr	r3, [r7, #4]
 804474e:	2200      	movs	r2, #0
 8044750:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8044752:	687b      	ldr	r3, [r7, #4]
 8044754:	2200      	movs	r2, #0
 8044756:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8044758:	687b      	ldr	r3, [r7, #4]
 804475a:	2200      	movs	r2, #0
 804475c:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 804475e:	687b      	ldr	r3, [r7, #4]
 8044760:	2200      	movs	r2, #0
 8044762:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8044764:	6878      	ldr	r0, [r7, #4]
 8044766:	f7ff ff23 	bl	80445b0 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 804476a:	6878      	ldr	r0, [r7, #4]
 804476c:	f7fd fa4c 	bl	8041c08 <HAL_I2C_Init>
  }
}
 8044770:	bf00      	nop
 8044772:	3708      	adds	r7, #8
 8044774:	46bd      	mov	sp, r7
 8044776:	bd80      	pop	{r7, pc}
 8044778:	20000064 	.word	0x20000064
 804477c:	40005c00 	.word	0x40005c00
 8044780:	40005400 	.word	0x40005400
 8044784:	40912732 	.word	0x40912732

08044788 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8044788:	b580      	push	{r7, lr}
 804478a:	b08a      	sub	sp, #40	; 0x28
 804478c:	af04      	add	r7, sp, #16
 804478e:	60f8      	str	r0, [r7, #12]
 8044790:	4608      	mov	r0, r1
 8044792:	4611      	mov	r1, r2
 8044794:	461a      	mov	r2, r3
 8044796:	4603      	mov	r3, r0
 8044798:	72fb      	strb	r3, [r7, #11]
 804479a:	460b      	mov	r3, r1
 804479c:	813b      	strh	r3, [r7, #8]
 804479e:	4613      	mov	r3, r2
 80447a0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80447a2:	2300      	movs	r3, #0
 80447a4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80447a6:	7afb      	ldrb	r3, [r7, #11]
 80447a8:	b299      	uxth	r1, r3
 80447aa:	88f8      	ldrh	r0, [r7, #6]
 80447ac:	893a      	ldrh	r2, [r7, #8]
 80447ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80447b2:	9302      	str	r3, [sp, #8]
 80447b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80447b6:	9301      	str	r3, [sp, #4]
 80447b8:	6a3b      	ldr	r3, [r7, #32]
 80447ba:	9300      	str	r3, [sp, #0]
 80447bc:	4603      	mov	r3, r0
 80447be:	68f8      	ldr	r0, [r7, #12]
 80447c0:	f7fd fc0a 	bl	8041fd8 <HAL_I2C_Mem_Read>
 80447c4:	4603      	mov	r3, r0
 80447c6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80447c8:	7dfb      	ldrb	r3, [r7, #23]
 80447ca:	2b00      	cmp	r3, #0
 80447cc:	d004      	beq.n	80447d8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80447ce:	7afb      	ldrb	r3, [r7, #11]
 80447d0:	4619      	mov	r1, r3
 80447d2:	68f8      	ldr	r0, [r7, #12]
 80447d4:	f000 f832 	bl	804483c <I2Cx_Error>
  }
  return status;    
 80447d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80447da:	4618      	mov	r0, r3
 80447dc:	3718      	adds	r7, #24
 80447de:	46bd      	mov	sp, r7
 80447e0:	bd80      	pop	{r7, pc}

080447e2 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80447e2:	b580      	push	{r7, lr}
 80447e4:	b08a      	sub	sp, #40	; 0x28
 80447e6:	af04      	add	r7, sp, #16
 80447e8:	60f8      	str	r0, [r7, #12]
 80447ea:	4608      	mov	r0, r1
 80447ec:	4611      	mov	r1, r2
 80447ee:	461a      	mov	r2, r3
 80447f0:	4603      	mov	r3, r0
 80447f2:	72fb      	strb	r3, [r7, #11]
 80447f4:	460b      	mov	r3, r1
 80447f6:	813b      	strh	r3, [r7, #8]
 80447f8:	4613      	mov	r3, r2
 80447fa:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80447fc:	2300      	movs	r3, #0
 80447fe:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8044800:	7afb      	ldrb	r3, [r7, #11]
 8044802:	b299      	uxth	r1, r3
 8044804:	88f8      	ldrh	r0, [r7, #6]
 8044806:	893a      	ldrh	r2, [r7, #8]
 8044808:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 804480c:	9302      	str	r3, [sp, #8]
 804480e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8044810:	9301      	str	r3, [sp, #4]
 8044812:	6a3b      	ldr	r3, [r7, #32]
 8044814:	9300      	str	r3, [sp, #0]
 8044816:	4603      	mov	r3, r0
 8044818:	68f8      	ldr	r0, [r7, #12]
 804481a:	f7fd fac9 	bl	8041db0 <HAL_I2C_Mem_Write>
 804481e:	4603      	mov	r3, r0
 8044820:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8044822:	7dfb      	ldrb	r3, [r7, #23]
 8044824:	2b00      	cmp	r3, #0
 8044826:	d004      	beq.n	8044832 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8044828:	7afb      	ldrb	r3, [r7, #11]
 804482a:	4619      	mov	r1, r3
 804482c:	68f8      	ldr	r0, [r7, #12]
 804482e:	f000 f805 	bl	804483c <I2Cx_Error>
  }
  return status;
 8044832:	7dfb      	ldrb	r3, [r7, #23]
}
 8044834:	4618      	mov	r0, r3
 8044836:	3718      	adds	r7, #24
 8044838:	46bd      	mov	sp, r7
 804483a:	bd80      	pop	{r7, pc}

0804483c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 804483c:	b580      	push	{r7, lr}
 804483e:	b082      	sub	sp, #8
 8044840:	af00      	add	r7, sp, #0
 8044842:	6078      	str	r0, [r7, #4]
 8044844:	460b      	mov	r3, r1
 8044846:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8044848:	6878      	ldr	r0, [r7, #4]
 804484a:	f7fd fa6d 	bl	8041d28 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 804484e:	6878      	ldr	r0, [r7, #4]
 8044850:	f7ff ff5e 	bl	8044710 <I2Cx_Init>
}
 8044854:	bf00      	nop
 8044856:	3708      	adds	r7, #8
 8044858:	46bd      	mov	sp, r7
 804485a:	bd80      	pop	{r7, pc}

0804485c <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 804485c:	b580      	push	{r7, lr}
 804485e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8044860:	4802      	ldr	r0, [pc, #8]	; (804486c <TS_IO_Init+0x10>)
 8044862:	f7ff ff55 	bl	8044710 <I2Cx_Init>
}
 8044866:	bf00      	nop
 8044868:	bd80      	pop	{r7, pc}
 804486a:	bf00      	nop
 804486c:	20000064 	.word	0x20000064

08044870 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8044870:	b580      	push	{r7, lr}
 8044872:	b084      	sub	sp, #16
 8044874:	af02      	add	r7, sp, #8
 8044876:	4603      	mov	r3, r0
 8044878:	71fb      	strb	r3, [r7, #7]
 804487a:	460b      	mov	r3, r1
 804487c:	71bb      	strb	r3, [r7, #6]
 804487e:	4613      	mov	r3, r2
 8044880:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8044882:	79bb      	ldrb	r3, [r7, #6]
 8044884:	b29a      	uxth	r2, r3
 8044886:	79f9      	ldrb	r1, [r7, #7]
 8044888:	2301      	movs	r3, #1
 804488a:	9301      	str	r3, [sp, #4]
 804488c:	1d7b      	adds	r3, r7, #5
 804488e:	9300      	str	r3, [sp, #0]
 8044890:	2301      	movs	r3, #1
 8044892:	4803      	ldr	r0, [pc, #12]	; (80448a0 <TS_IO_Write+0x30>)
 8044894:	f7ff ffa5 	bl	80447e2 <I2Cx_WriteMultiple>
}
 8044898:	bf00      	nop
 804489a:	3708      	adds	r7, #8
 804489c:	46bd      	mov	sp, r7
 804489e:	bd80      	pop	{r7, pc}
 80448a0:	20000064 	.word	0x20000064

080448a4 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80448a4:	b580      	push	{r7, lr}
 80448a6:	b086      	sub	sp, #24
 80448a8:	af02      	add	r7, sp, #8
 80448aa:	4603      	mov	r3, r0
 80448ac:	460a      	mov	r2, r1
 80448ae:	71fb      	strb	r3, [r7, #7]
 80448b0:	4613      	mov	r3, r2
 80448b2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80448b4:	2300      	movs	r3, #0
 80448b6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80448b8:	79bb      	ldrb	r3, [r7, #6]
 80448ba:	b29a      	uxth	r2, r3
 80448bc:	79f9      	ldrb	r1, [r7, #7]
 80448be:	2301      	movs	r3, #1
 80448c0:	9301      	str	r3, [sp, #4]
 80448c2:	f107 030f 	add.w	r3, r7, #15
 80448c6:	9300      	str	r3, [sp, #0]
 80448c8:	2301      	movs	r3, #1
 80448ca:	4804      	ldr	r0, [pc, #16]	; (80448dc <TS_IO_Read+0x38>)
 80448cc:	f7ff ff5c 	bl	8044788 <I2Cx_ReadMultiple>

  return read_value;
 80448d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80448d2:	4618      	mov	r0, r3
 80448d4:	3710      	adds	r7, #16
 80448d6:	46bd      	mov	sp, r7
 80448d8:	bd80      	pop	{r7, pc}
 80448da:	bf00      	nop
 80448dc:	20000064 	.word	0x20000064

080448e0 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 80448e0:	b580      	push	{r7, lr}
 80448e2:	b082      	sub	sp, #8
 80448e4:	af00      	add	r7, sp, #0
 80448e6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80448e8:	6878      	ldr	r0, [r7, #4]
 80448ea:	f7fc f963 	bl	8040bb4 <HAL_Delay>
}
 80448ee:	bf00      	nop
 80448f0:	3708      	adds	r7, #8
 80448f2:	46bd      	mov	sp, r7
 80448f4:	bd80      	pop	{r7, pc}
	...

080448f8 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80448f8:	b580      	push	{r7, lr}
 80448fa:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80448fc:	4b31      	ldr	r3, [pc, #196]	; (80449c4 <BSP_LCD_Init+0xcc>)
 80448fe:	2228      	movs	r2, #40	; 0x28
 8044900:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8044902:	4b30      	ldr	r3, [pc, #192]	; (80449c4 <BSP_LCD_Init+0xcc>)
 8044904:	2209      	movs	r2, #9
 8044906:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8044908:	4b2e      	ldr	r3, [pc, #184]	; (80449c4 <BSP_LCD_Init+0xcc>)
 804490a:	2235      	movs	r2, #53	; 0x35
 804490c:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 804490e:	4b2d      	ldr	r3, [pc, #180]	; (80449c4 <BSP_LCD_Init+0xcc>)
 8044910:	220b      	movs	r2, #11
 8044912:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8044914:	4b2b      	ldr	r3, [pc, #172]	; (80449c4 <BSP_LCD_Init+0xcc>)
 8044916:	f240 121b 	movw	r2, #283	; 0x11b
 804491a:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 804491c:	4b29      	ldr	r3, [pc, #164]	; (80449c4 <BSP_LCD_Init+0xcc>)
 804491e:	f240 2215 	movw	r2, #533	; 0x215
 8044922:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8044924:	4b27      	ldr	r3, [pc, #156]	; (80449c4 <BSP_LCD_Init+0xcc>)
 8044926:	f240 121d 	movw	r2, #285	; 0x11d
 804492a:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 804492c:	4b25      	ldr	r3, [pc, #148]	; (80449c4 <BSP_LCD_Init+0xcc>)
 804492e:	f240 2235 	movw	r2, #565	; 0x235
 8044932:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8044934:	2100      	movs	r1, #0
 8044936:	4823      	ldr	r0, [pc, #140]	; (80449c4 <BSP_LCD_Init+0xcc>)
 8044938:	f000 fc94 	bl	8045264 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 804493c:	4b21      	ldr	r3, [pc, #132]	; (80449c4 <BSP_LCD_Init+0xcc>)
 804493e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8044942:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8044944:	4b1f      	ldr	r3, [pc, #124]	; (80449c4 <BSP_LCD_Init+0xcc>)
 8044946:	f44f 7288 	mov.w	r2, #272	; 0x110
 804494a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 804494c:	4b1d      	ldr	r3, [pc, #116]	; (80449c4 <BSP_LCD_Init+0xcc>)
 804494e:	2200      	movs	r2, #0
 8044950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8044954:	4b1b      	ldr	r3, [pc, #108]	; (80449c4 <BSP_LCD_Init+0xcc>)
 8044956:	2200      	movs	r2, #0
 8044958:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 804495c:	4b19      	ldr	r3, [pc, #100]	; (80449c4 <BSP_LCD_Init+0xcc>)
 804495e:	2200      	movs	r2, #0
 8044960:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8044964:	4b17      	ldr	r3, [pc, #92]	; (80449c4 <BSP_LCD_Init+0xcc>)
 8044966:	2200      	movs	r2, #0
 8044968:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 804496a:	4b16      	ldr	r3, [pc, #88]	; (80449c4 <BSP_LCD_Init+0xcc>)
 804496c:	2200      	movs	r2, #0
 804496e:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8044970:	4b14      	ldr	r3, [pc, #80]	; (80449c4 <BSP_LCD_Init+0xcc>)
 8044972:	2200      	movs	r2, #0
 8044974:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8044976:	4b13      	ldr	r3, [pc, #76]	; (80449c4 <BSP_LCD_Init+0xcc>)
 8044978:	2200      	movs	r2, #0
 804497a:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 804497c:	4b11      	ldr	r3, [pc, #68]	; (80449c4 <BSP_LCD_Init+0xcc>)
 804497e:	4a12      	ldr	r2, [pc, #72]	; (80449c8 <BSP_LCD_Init+0xd0>)
 8044980:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8044982:	4810      	ldr	r0, [pc, #64]	; (80449c4 <BSP_LCD_Init+0xcc>)
 8044984:	f7fe f85a 	bl	8042a3c <HAL_LTDC_GetState>
 8044988:	4603      	mov	r3, r0
 804498a:	2b00      	cmp	r3, #0
 804498c:	d103      	bne.n	8044996 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 804498e:	2100      	movs	r1, #0
 8044990:	480c      	ldr	r0, [pc, #48]	; (80449c4 <BSP_LCD_Init+0xcc>)
 8044992:	f000 fb8d 	bl	80450b0 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8044996:	480b      	ldr	r0, [pc, #44]	; (80449c4 <BSP_LCD_Init+0xcc>)
 8044998:	f7fd fe62 	bl	8042660 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 804499c:	2201      	movs	r2, #1
 804499e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80449a2:	480a      	ldr	r0, [pc, #40]	; (80449cc <BSP_LCD_Init+0xd4>)
 80449a4:	f7fd f916 	bl	8041bd4 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80449a8:	2201      	movs	r2, #1
 80449aa:	2108      	movs	r1, #8
 80449ac:	4808      	ldr	r0, [pc, #32]	; (80449d0 <BSP_LCD_Init+0xd8>)
 80449ae:	f7fd f911 	bl	8041bd4 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80449b2:	f000 fd77 	bl	80454a4 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80449b6:	4807      	ldr	r0, [pc, #28]	; (80449d4 <BSP_LCD_Init+0xdc>)
 80449b8:	f000 f8d8 	bl	8044b6c <BSP_LCD_SetFont>
  
  return LCD_OK;
 80449bc:	2300      	movs	r3, #0
}
 80449be:	4618      	mov	r0, r3
 80449c0:	bd80      	pop	{r7, pc}
 80449c2:	bf00      	nop
 80449c4:	20000290 	.word	0x20000290
 80449c8:	40016800 	.word	0x40016800
 80449cc:	40022000 	.word	0x40022000
 80449d0:	40022800 	.word	0x40022800
 80449d4:	2000000c 	.word	0x2000000c

080449d8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80449d8:	b480      	push	{r7}
 80449da:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80449dc:	4b06      	ldr	r3, [pc, #24]	; (80449f8 <BSP_LCD_GetXSize+0x20>)
 80449de:	681b      	ldr	r3, [r3, #0]
 80449e0:	4a06      	ldr	r2, [pc, #24]	; (80449fc <BSP_LCD_GetXSize+0x24>)
 80449e2:	2134      	movs	r1, #52	; 0x34
 80449e4:	fb01 f303 	mul.w	r3, r1, r3
 80449e8:	4413      	add	r3, r2
 80449ea:	3360      	adds	r3, #96	; 0x60
 80449ec:	681b      	ldr	r3, [r3, #0]
}
 80449ee:	4618      	mov	r0, r3
 80449f0:	46bd      	mov	sp, r7
 80449f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80449f6:	4770      	bx	lr
 80449f8:	200000f0 	.word	0x200000f0
 80449fc:	20000290 	.word	0x20000290

08044a00 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8044a00:	b480      	push	{r7}
 8044a02:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8044a04:	4b06      	ldr	r3, [pc, #24]	; (8044a20 <BSP_LCD_GetYSize+0x20>)
 8044a06:	681b      	ldr	r3, [r3, #0]
 8044a08:	4a06      	ldr	r2, [pc, #24]	; (8044a24 <BSP_LCD_GetYSize+0x24>)
 8044a0a:	2134      	movs	r1, #52	; 0x34
 8044a0c:	fb01 f303 	mul.w	r3, r1, r3
 8044a10:	4413      	add	r3, r2
 8044a12:	3364      	adds	r3, #100	; 0x64
 8044a14:	681b      	ldr	r3, [r3, #0]
}
 8044a16:	4618      	mov	r0, r3
 8044a18:	46bd      	mov	sp, r7
 8044a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044a1e:	4770      	bx	lr
 8044a20:	200000f0 	.word	0x200000f0
 8044a24:	20000290 	.word	0x20000290

08044a28 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8044a28:	b580      	push	{r7, lr}
 8044a2a:	b090      	sub	sp, #64	; 0x40
 8044a2c:	af00      	add	r7, sp, #0
 8044a2e:	4603      	mov	r3, r0
 8044a30:	6039      	str	r1, [r7, #0]
 8044a32:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8044a34:	2300      	movs	r3, #0
 8044a36:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8044a38:	f7ff ffce 	bl	80449d8 <BSP_LCD_GetXSize>
 8044a3c:	4603      	mov	r3, r0
 8044a3e:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8044a40:	2300      	movs	r3, #0
 8044a42:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8044a44:	f7ff ffdc 	bl	8044a00 <BSP_LCD_GetYSize>
 8044a48:	4603      	mov	r3, r0
 8044a4a:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8044a4c:	2300      	movs	r3, #0
 8044a4e:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8044a50:	683b      	ldr	r3, [r7, #0]
 8044a52:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8044a54:	23ff      	movs	r3, #255	; 0xff
 8044a56:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8044a58:	2300      	movs	r3, #0
 8044a5a:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8044a5c:	2300      	movs	r3, #0
 8044a5e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8044a62:	2300      	movs	r3, #0
 8044a64:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8044a68:	2300      	movs	r3, #0
 8044a6a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8044a6e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8044a72:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8044a74:	2307      	movs	r3, #7
 8044a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8044a78:	f7ff ffae 	bl	80449d8 <BSP_LCD_GetXSize>
 8044a7c:	4603      	mov	r3, r0
 8044a7e:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8044a80:	f7ff ffbe 	bl	8044a00 <BSP_LCD_GetYSize>
 8044a84:	4603      	mov	r3, r0
 8044a86:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8044a88:	88fa      	ldrh	r2, [r7, #6]
 8044a8a:	f107 030c 	add.w	r3, r7, #12
 8044a8e:	4619      	mov	r1, r3
 8044a90:	4812      	ldr	r0, [pc, #72]	; (8044adc <BSP_LCD_LayerDefaultInit+0xb4>)
 8044a92:	f7fd ff95 	bl	80429c0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8044a96:	88fa      	ldrh	r2, [r7, #6]
 8044a98:	4911      	ldr	r1, [pc, #68]	; (8044ae0 <BSP_LCD_LayerDefaultInit+0xb8>)
 8044a9a:	4613      	mov	r3, r2
 8044a9c:	005b      	lsls	r3, r3, #1
 8044a9e:	4413      	add	r3, r2
 8044aa0:	009b      	lsls	r3, r3, #2
 8044aa2:	440b      	add	r3, r1
 8044aa4:	3304      	adds	r3, #4
 8044aa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8044aaa:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8044aac:	88fa      	ldrh	r2, [r7, #6]
 8044aae:	490c      	ldr	r1, [pc, #48]	; (8044ae0 <BSP_LCD_LayerDefaultInit+0xb8>)
 8044ab0:	4613      	mov	r3, r2
 8044ab2:	005b      	lsls	r3, r3, #1
 8044ab4:	4413      	add	r3, r2
 8044ab6:	009b      	lsls	r3, r3, #2
 8044ab8:	440b      	add	r3, r1
 8044aba:	3308      	adds	r3, #8
 8044abc:	4a09      	ldr	r2, [pc, #36]	; (8044ae4 <BSP_LCD_LayerDefaultInit+0xbc>)
 8044abe:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8044ac0:	88fa      	ldrh	r2, [r7, #6]
 8044ac2:	4907      	ldr	r1, [pc, #28]	; (8044ae0 <BSP_LCD_LayerDefaultInit+0xb8>)
 8044ac4:	4613      	mov	r3, r2
 8044ac6:	005b      	lsls	r3, r3, #1
 8044ac8:	4413      	add	r3, r2
 8044aca:	009b      	lsls	r3, r3, #2
 8044acc:	440b      	add	r3, r1
 8044ace:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8044ad2:	601a      	str	r2, [r3, #0]
}
 8044ad4:	bf00      	nop
 8044ad6:	3740      	adds	r7, #64	; 0x40
 8044ad8:	46bd      	mov	sp, r7
 8044ada:	bd80      	pop	{r7, pc}
 8044adc:	20000290 	.word	0x20000290
 8044ae0:	200000f4 	.word	0x200000f4
 8044ae4:	2000000c 	.word	0x2000000c

08044ae8 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8044ae8:	b480      	push	{r7}
 8044aea:	b083      	sub	sp, #12
 8044aec:	af00      	add	r7, sp, #0
 8044aee:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8044af0:	4a04      	ldr	r2, [pc, #16]	; (8044b04 <BSP_LCD_SelectLayer+0x1c>)
 8044af2:	687b      	ldr	r3, [r7, #4]
 8044af4:	6013      	str	r3, [r2, #0]
} 
 8044af6:	bf00      	nop
 8044af8:	370c      	adds	r7, #12
 8044afa:	46bd      	mov	sp, r7
 8044afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044b00:	4770      	bx	lr
 8044b02:	bf00      	nop
 8044b04:	200000f0 	.word	0x200000f0

08044b08 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8044b08:	b480      	push	{r7}
 8044b0a:	b083      	sub	sp, #12
 8044b0c:	af00      	add	r7, sp, #0
 8044b0e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8044b10:	4b07      	ldr	r3, [pc, #28]	; (8044b30 <BSP_LCD_SetTextColor+0x28>)
 8044b12:	681a      	ldr	r2, [r3, #0]
 8044b14:	4907      	ldr	r1, [pc, #28]	; (8044b34 <BSP_LCD_SetTextColor+0x2c>)
 8044b16:	4613      	mov	r3, r2
 8044b18:	005b      	lsls	r3, r3, #1
 8044b1a:	4413      	add	r3, r2
 8044b1c:	009b      	lsls	r3, r3, #2
 8044b1e:	440b      	add	r3, r1
 8044b20:	687a      	ldr	r2, [r7, #4]
 8044b22:	601a      	str	r2, [r3, #0]
}
 8044b24:	bf00      	nop
 8044b26:	370c      	adds	r7, #12
 8044b28:	46bd      	mov	sp, r7
 8044b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044b2e:	4770      	bx	lr
 8044b30:	200000f0 	.word	0x200000f0
 8044b34:	200000f4 	.word	0x200000f4

08044b38 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8044b38:	b480      	push	{r7}
 8044b3a:	b083      	sub	sp, #12
 8044b3c:	af00      	add	r7, sp, #0
 8044b3e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8044b40:	4b08      	ldr	r3, [pc, #32]	; (8044b64 <BSP_LCD_SetBackColor+0x2c>)
 8044b42:	681a      	ldr	r2, [r3, #0]
 8044b44:	4908      	ldr	r1, [pc, #32]	; (8044b68 <BSP_LCD_SetBackColor+0x30>)
 8044b46:	4613      	mov	r3, r2
 8044b48:	005b      	lsls	r3, r3, #1
 8044b4a:	4413      	add	r3, r2
 8044b4c:	009b      	lsls	r3, r3, #2
 8044b4e:	440b      	add	r3, r1
 8044b50:	3304      	adds	r3, #4
 8044b52:	687a      	ldr	r2, [r7, #4]
 8044b54:	601a      	str	r2, [r3, #0]
}
 8044b56:	bf00      	nop
 8044b58:	370c      	adds	r7, #12
 8044b5a:	46bd      	mov	sp, r7
 8044b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044b60:	4770      	bx	lr
 8044b62:	bf00      	nop
 8044b64:	200000f0 	.word	0x200000f0
 8044b68:	200000f4 	.word	0x200000f4

08044b6c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8044b6c:	b480      	push	{r7}
 8044b6e:	b083      	sub	sp, #12
 8044b70:	af00      	add	r7, sp, #0
 8044b72:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8044b74:	4b08      	ldr	r3, [pc, #32]	; (8044b98 <BSP_LCD_SetFont+0x2c>)
 8044b76:	681a      	ldr	r2, [r3, #0]
 8044b78:	4908      	ldr	r1, [pc, #32]	; (8044b9c <BSP_LCD_SetFont+0x30>)
 8044b7a:	4613      	mov	r3, r2
 8044b7c:	005b      	lsls	r3, r3, #1
 8044b7e:	4413      	add	r3, r2
 8044b80:	009b      	lsls	r3, r3, #2
 8044b82:	440b      	add	r3, r1
 8044b84:	3308      	adds	r3, #8
 8044b86:	687a      	ldr	r2, [r7, #4]
 8044b88:	601a      	str	r2, [r3, #0]
}
 8044b8a:	bf00      	nop
 8044b8c:	370c      	adds	r7, #12
 8044b8e:	46bd      	mov	sp, r7
 8044b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044b94:	4770      	bx	lr
 8044b96:	bf00      	nop
 8044b98:	200000f0 	.word	0x200000f0
 8044b9c:	200000f4 	.word	0x200000f4

08044ba0 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8044ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8044ba2:	b085      	sub	sp, #20
 8044ba4:	af02      	add	r7, sp, #8
 8044ba6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8044ba8:	4b0f      	ldr	r3, [pc, #60]	; (8044be8 <BSP_LCD_Clear+0x48>)
 8044baa:	681c      	ldr	r4, [r3, #0]
 8044bac:	4b0e      	ldr	r3, [pc, #56]	; (8044be8 <BSP_LCD_Clear+0x48>)
 8044bae:	681b      	ldr	r3, [r3, #0]
 8044bb0:	4a0e      	ldr	r2, [pc, #56]	; (8044bec <BSP_LCD_Clear+0x4c>)
 8044bb2:	2134      	movs	r1, #52	; 0x34
 8044bb4:	fb01 f303 	mul.w	r3, r1, r3
 8044bb8:	4413      	add	r3, r2
 8044bba:	335c      	adds	r3, #92	; 0x5c
 8044bbc:	681b      	ldr	r3, [r3, #0]
 8044bbe:	461d      	mov	r5, r3
 8044bc0:	f7ff ff0a 	bl	80449d8 <BSP_LCD_GetXSize>
 8044bc4:	4606      	mov	r6, r0
 8044bc6:	f7ff ff1b 	bl	8044a00 <BSP_LCD_GetYSize>
 8044bca:	4602      	mov	r2, r0
 8044bcc:	687b      	ldr	r3, [r7, #4]
 8044bce:	9301      	str	r3, [sp, #4]
 8044bd0:	2300      	movs	r3, #0
 8044bd2:	9300      	str	r3, [sp, #0]
 8044bd4:	4613      	mov	r3, r2
 8044bd6:	4632      	mov	r2, r6
 8044bd8:	4629      	mov	r1, r5
 8044bda:	4620      	mov	r0, r4
 8044bdc:	f000 fc16 	bl	804540c <LL_FillBuffer>
}
 8044be0:	bf00      	nop
 8044be2:	370c      	adds	r7, #12
 8044be4:	46bd      	mov	sp, r7
 8044be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8044be8:	200000f0 	.word	0x200000f0
 8044bec:	20000290 	.word	0x20000290

08044bf0 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8044bf0:	b590      	push	{r4, r7, lr}
 8044bf2:	b083      	sub	sp, #12
 8044bf4:	af00      	add	r7, sp, #0
 8044bf6:	4603      	mov	r3, r0
 8044bf8:	80fb      	strh	r3, [r7, #6]
 8044bfa:	460b      	mov	r3, r1
 8044bfc:	80bb      	strh	r3, [r7, #4]
 8044bfe:	4613      	mov	r3, r2
 8044c00:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8044c02:	4b1b      	ldr	r3, [pc, #108]	; (8044c70 <BSP_LCD_DisplayChar+0x80>)
 8044c04:	681a      	ldr	r2, [r3, #0]
 8044c06:	491b      	ldr	r1, [pc, #108]	; (8044c74 <BSP_LCD_DisplayChar+0x84>)
 8044c08:	4613      	mov	r3, r2
 8044c0a:	005b      	lsls	r3, r3, #1
 8044c0c:	4413      	add	r3, r2
 8044c0e:	009b      	lsls	r3, r3, #2
 8044c10:	440b      	add	r3, r1
 8044c12:	3308      	adds	r3, #8
 8044c14:	681b      	ldr	r3, [r3, #0]
 8044c16:	6819      	ldr	r1, [r3, #0]
 8044c18:	78fb      	ldrb	r3, [r7, #3]
 8044c1a:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8044c1e:	4b14      	ldr	r3, [pc, #80]	; (8044c70 <BSP_LCD_DisplayChar+0x80>)
 8044c20:	681a      	ldr	r2, [r3, #0]
 8044c22:	4c14      	ldr	r4, [pc, #80]	; (8044c74 <BSP_LCD_DisplayChar+0x84>)
 8044c24:	4613      	mov	r3, r2
 8044c26:	005b      	lsls	r3, r3, #1
 8044c28:	4413      	add	r3, r2
 8044c2a:	009b      	lsls	r3, r3, #2
 8044c2c:	4423      	add	r3, r4
 8044c2e:	3308      	adds	r3, #8
 8044c30:	681b      	ldr	r3, [r3, #0]
 8044c32:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8044c34:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8044c38:	4b0d      	ldr	r3, [pc, #52]	; (8044c70 <BSP_LCD_DisplayChar+0x80>)
 8044c3a:	681a      	ldr	r2, [r3, #0]
 8044c3c:	4c0d      	ldr	r4, [pc, #52]	; (8044c74 <BSP_LCD_DisplayChar+0x84>)
 8044c3e:	4613      	mov	r3, r2
 8044c40:	005b      	lsls	r3, r3, #1
 8044c42:	4413      	add	r3, r2
 8044c44:	009b      	lsls	r3, r3, #2
 8044c46:	4423      	add	r3, r4
 8044c48:	3308      	adds	r3, #8
 8044c4a:	681b      	ldr	r3, [r3, #0]
 8044c4c:	889b      	ldrh	r3, [r3, #4]
 8044c4e:	3307      	adds	r3, #7
 8044c50:	2b00      	cmp	r3, #0
 8044c52:	da00      	bge.n	8044c56 <BSP_LCD_DisplayChar+0x66>
 8044c54:	3307      	adds	r3, #7
 8044c56:	10db      	asrs	r3, r3, #3
 8044c58:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8044c5c:	18ca      	adds	r2, r1, r3
 8044c5e:	88b9      	ldrh	r1, [r7, #4]
 8044c60:	88fb      	ldrh	r3, [r7, #6]
 8044c62:	4618      	mov	r0, r3
 8044c64:	f000 fb1a 	bl	804529c <DrawChar>
}
 8044c68:	bf00      	nop
 8044c6a:	370c      	adds	r7, #12
 8044c6c:	46bd      	mov	sp, r7
 8044c6e:	bd90      	pop	{r4, r7, pc}
 8044c70:	200000f0 	.word	0x200000f0
 8044c74:	200000f4 	.word	0x200000f4

08044c78 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8044c78:	b5b0      	push	{r4, r5, r7, lr}
 8044c7a:	b088      	sub	sp, #32
 8044c7c:	af00      	add	r7, sp, #0
 8044c7e:	60ba      	str	r2, [r7, #8]
 8044c80:	461a      	mov	r2, r3
 8044c82:	4603      	mov	r3, r0
 8044c84:	81fb      	strh	r3, [r7, #14]
 8044c86:	460b      	mov	r3, r1
 8044c88:	81bb      	strh	r3, [r7, #12]
 8044c8a:	4613      	mov	r3, r2
 8044c8c:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8044c8e:	2301      	movs	r3, #1
 8044c90:	83fb      	strh	r3, [r7, #30]
 8044c92:	2300      	movs	r3, #0
 8044c94:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8044c96:	2300      	movs	r3, #0
 8044c98:	61bb      	str	r3, [r7, #24]
 8044c9a:	2300      	movs	r3, #0
 8044c9c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8044c9e:	68bb      	ldr	r3, [r7, #8]
 8044ca0:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8044ca2:	e002      	b.n	8044caa <BSP_LCD_DisplayStringAt+0x32>
 8044ca4:	69bb      	ldr	r3, [r7, #24]
 8044ca6:	3301      	adds	r3, #1
 8044ca8:	61bb      	str	r3, [r7, #24]
 8044caa:	697b      	ldr	r3, [r7, #20]
 8044cac:	1c5a      	adds	r2, r3, #1
 8044cae:	617a      	str	r2, [r7, #20]
 8044cb0:	781b      	ldrb	r3, [r3, #0]
 8044cb2:	2b00      	cmp	r3, #0
 8044cb4:	d1f6      	bne.n	8044ca4 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8044cb6:	f7ff fe8f 	bl	80449d8 <BSP_LCD_GetXSize>
 8044cba:	4b4f      	ldr	r3, [pc, #316]	; (8044df8 <BSP_LCD_DisplayStringAt+0x180>)
 8044cbc:	681a      	ldr	r2, [r3, #0]
 8044cbe:	494f      	ldr	r1, [pc, #316]	; (8044dfc <BSP_LCD_DisplayStringAt+0x184>)
 8044cc0:	4613      	mov	r3, r2
 8044cc2:	005b      	lsls	r3, r3, #1
 8044cc4:	4413      	add	r3, r2
 8044cc6:	009b      	lsls	r3, r3, #2
 8044cc8:	440b      	add	r3, r1
 8044cca:	3308      	adds	r3, #8
 8044ccc:	681b      	ldr	r3, [r3, #0]
 8044cce:	889b      	ldrh	r3, [r3, #4]
 8044cd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8044cd4:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8044cd6:	79fb      	ldrb	r3, [r7, #7]
 8044cd8:	2b02      	cmp	r3, #2
 8044cda:	d01c      	beq.n	8044d16 <BSP_LCD_DisplayStringAt+0x9e>
 8044cdc:	2b03      	cmp	r3, #3
 8044cde:	d017      	beq.n	8044d10 <BSP_LCD_DisplayStringAt+0x98>
 8044ce0:	2b01      	cmp	r3, #1
 8044ce2:	d12e      	bne.n	8044d42 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8044ce4:	693a      	ldr	r2, [r7, #16]
 8044ce6:	69bb      	ldr	r3, [r7, #24]
 8044ce8:	1ad1      	subs	r1, r2, r3
 8044cea:	4b43      	ldr	r3, [pc, #268]	; (8044df8 <BSP_LCD_DisplayStringAt+0x180>)
 8044cec:	681a      	ldr	r2, [r3, #0]
 8044cee:	4843      	ldr	r0, [pc, #268]	; (8044dfc <BSP_LCD_DisplayStringAt+0x184>)
 8044cf0:	4613      	mov	r3, r2
 8044cf2:	005b      	lsls	r3, r3, #1
 8044cf4:	4413      	add	r3, r2
 8044cf6:	009b      	lsls	r3, r3, #2
 8044cf8:	4403      	add	r3, r0
 8044cfa:	3308      	adds	r3, #8
 8044cfc:	681b      	ldr	r3, [r3, #0]
 8044cfe:	889b      	ldrh	r3, [r3, #4]
 8044d00:	fb03 f301 	mul.w	r3, r3, r1
 8044d04:	085b      	lsrs	r3, r3, #1
 8044d06:	b29a      	uxth	r2, r3
 8044d08:	89fb      	ldrh	r3, [r7, #14]
 8044d0a:	4413      	add	r3, r2
 8044d0c:	83fb      	strh	r3, [r7, #30]
      break;
 8044d0e:	e01b      	b.n	8044d48 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8044d10:	89fb      	ldrh	r3, [r7, #14]
 8044d12:	83fb      	strh	r3, [r7, #30]
      break;
 8044d14:	e018      	b.n	8044d48 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8044d16:	693a      	ldr	r2, [r7, #16]
 8044d18:	69bb      	ldr	r3, [r7, #24]
 8044d1a:	1ad3      	subs	r3, r2, r3
 8044d1c:	b299      	uxth	r1, r3
 8044d1e:	4b36      	ldr	r3, [pc, #216]	; (8044df8 <BSP_LCD_DisplayStringAt+0x180>)
 8044d20:	681a      	ldr	r2, [r3, #0]
 8044d22:	4836      	ldr	r0, [pc, #216]	; (8044dfc <BSP_LCD_DisplayStringAt+0x184>)
 8044d24:	4613      	mov	r3, r2
 8044d26:	005b      	lsls	r3, r3, #1
 8044d28:	4413      	add	r3, r2
 8044d2a:	009b      	lsls	r3, r3, #2
 8044d2c:	4403      	add	r3, r0
 8044d2e:	3308      	adds	r3, #8
 8044d30:	681b      	ldr	r3, [r3, #0]
 8044d32:	889b      	ldrh	r3, [r3, #4]
 8044d34:	fb11 f303 	smulbb	r3, r1, r3
 8044d38:	b29a      	uxth	r2, r3
 8044d3a:	89fb      	ldrh	r3, [r7, #14]
 8044d3c:	1ad3      	subs	r3, r2, r3
 8044d3e:	83fb      	strh	r3, [r7, #30]
      break;
 8044d40:	e002      	b.n	8044d48 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 8044d42:	89fb      	ldrh	r3, [r7, #14]
 8044d44:	83fb      	strh	r3, [r7, #30]
      break;
 8044d46:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8044d48:	8bfb      	ldrh	r3, [r7, #30]
 8044d4a:	2b00      	cmp	r3, #0
 8044d4c:	d003      	beq.n	8044d56 <BSP_LCD_DisplayStringAt+0xde>
 8044d4e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8044d52:	2b00      	cmp	r3, #0
 8044d54:	da1d      	bge.n	8044d92 <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8044d56:	2301      	movs	r3, #1
 8044d58:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8044d5a:	e01a      	b.n	8044d92 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8044d5c:	68bb      	ldr	r3, [r7, #8]
 8044d5e:	781a      	ldrb	r2, [r3, #0]
 8044d60:	89b9      	ldrh	r1, [r7, #12]
 8044d62:	8bfb      	ldrh	r3, [r7, #30]
 8044d64:	4618      	mov	r0, r3
 8044d66:	f7ff ff43 	bl	8044bf0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8044d6a:	4b23      	ldr	r3, [pc, #140]	; (8044df8 <BSP_LCD_DisplayStringAt+0x180>)
 8044d6c:	681a      	ldr	r2, [r3, #0]
 8044d6e:	4923      	ldr	r1, [pc, #140]	; (8044dfc <BSP_LCD_DisplayStringAt+0x184>)
 8044d70:	4613      	mov	r3, r2
 8044d72:	005b      	lsls	r3, r3, #1
 8044d74:	4413      	add	r3, r2
 8044d76:	009b      	lsls	r3, r3, #2
 8044d78:	440b      	add	r3, r1
 8044d7a:	3308      	adds	r3, #8
 8044d7c:	681b      	ldr	r3, [r3, #0]
 8044d7e:	889a      	ldrh	r2, [r3, #4]
 8044d80:	8bfb      	ldrh	r3, [r7, #30]
 8044d82:	4413      	add	r3, r2
 8044d84:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8044d86:	68bb      	ldr	r3, [r7, #8]
 8044d88:	3301      	adds	r3, #1
 8044d8a:	60bb      	str	r3, [r7, #8]
    i++;
 8044d8c:	8bbb      	ldrh	r3, [r7, #28]
 8044d8e:	3301      	adds	r3, #1
 8044d90:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8044d92:	68bb      	ldr	r3, [r7, #8]
 8044d94:	781b      	ldrb	r3, [r3, #0]
 8044d96:	2b00      	cmp	r3, #0
 8044d98:	bf14      	ite	ne
 8044d9a:	2301      	movne	r3, #1
 8044d9c:	2300      	moveq	r3, #0
 8044d9e:	b2dc      	uxtb	r4, r3
 8044da0:	f7ff fe1a 	bl	80449d8 <BSP_LCD_GetXSize>
 8044da4:	4605      	mov	r5, r0
 8044da6:	8bb9      	ldrh	r1, [r7, #28]
 8044da8:	4b13      	ldr	r3, [pc, #76]	; (8044df8 <BSP_LCD_DisplayStringAt+0x180>)
 8044daa:	681a      	ldr	r2, [r3, #0]
 8044dac:	4813      	ldr	r0, [pc, #76]	; (8044dfc <BSP_LCD_DisplayStringAt+0x184>)
 8044dae:	4613      	mov	r3, r2
 8044db0:	005b      	lsls	r3, r3, #1
 8044db2:	4413      	add	r3, r2
 8044db4:	009b      	lsls	r3, r3, #2
 8044db6:	4403      	add	r3, r0
 8044db8:	3308      	adds	r3, #8
 8044dba:	681b      	ldr	r3, [r3, #0]
 8044dbc:	889b      	ldrh	r3, [r3, #4]
 8044dbe:	fb03 f301 	mul.w	r3, r3, r1
 8044dc2:	1aeb      	subs	r3, r5, r3
 8044dc4:	b299      	uxth	r1, r3
 8044dc6:	4b0c      	ldr	r3, [pc, #48]	; (8044df8 <BSP_LCD_DisplayStringAt+0x180>)
 8044dc8:	681a      	ldr	r2, [r3, #0]
 8044dca:	480c      	ldr	r0, [pc, #48]	; (8044dfc <BSP_LCD_DisplayStringAt+0x184>)
 8044dcc:	4613      	mov	r3, r2
 8044dce:	005b      	lsls	r3, r3, #1
 8044dd0:	4413      	add	r3, r2
 8044dd2:	009b      	lsls	r3, r3, #2
 8044dd4:	4403      	add	r3, r0
 8044dd6:	3308      	adds	r3, #8
 8044dd8:	681b      	ldr	r3, [r3, #0]
 8044dda:	889b      	ldrh	r3, [r3, #4]
 8044ddc:	4299      	cmp	r1, r3
 8044dde:	bf2c      	ite	cs
 8044de0:	2301      	movcs	r3, #1
 8044de2:	2300      	movcc	r3, #0
 8044de4:	b2db      	uxtb	r3, r3
 8044de6:	4023      	ands	r3, r4
 8044de8:	b2db      	uxtb	r3, r3
 8044dea:	2b00      	cmp	r3, #0
 8044dec:	d1b6      	bne.n	8044d5c <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 8044dee:	bf00      	nop
 8044df0:	3720      	adds	r7, #32
 8044df2:	46bd      	mov	sp, r7
 8044df4:	bdb0      	pop	{r4, r5, r7, pc}
 8044df6:	bf00      	nop
 8044df8:	200000f0 	.word	0x200000f0
 8044dfc:	200000f4 	.word	0x200000f4

08044e00 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8044e00:	b5b0      	push	{r4, r5, r7, lr}
 8044e02:	b086      	sub	sp, #24
 8044e04:	af02      	add	r7, sp, #8
 8044e06:	4603      	mov	r3, r0
 8044e08:	80fb      	strh	r3, [r7, #6]
 8044e0a:	460b      	mov	r3, r1
 8044e0c:	80bb      	strh	r3, [r7, #4]
 8044e0e:	4613      	mov	r3, r2
 8044e10:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8044e12:	2300      	movs	r3, #0
 8044e14:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8044e16:	4b26      	ldr	r3, [pc, #152]	; (8044eb0 <BSP_LCD_DrawHLine+0xb0>)
 8044e18:	681b      	ldr	r3, [r3, #0]
 8044e1a:	4a26      	ldr	r2, [pc, #152]	; (8044eb4 <BSP_LCD_DrawHLine+0xb4>)
 8044e1c:	2134      	movs	r1, #52	; 0x34
 8044e1e:	fb01 f303 	mul.w	r3, r1, r3
 8044e22:	4413      	add	r3, r2
 8044e24:	3348      	adds	r3, #72	; 0x48
 8044e26:	681b      	ldr	r3, [r3, #0]
 8044e28:	2b02      	cmp	r3, #2
 8044e2a:	d114      	bne.n	8044e56 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8044e2c:	4b20      	ldr	r3, [pc, #128]	; (8044eb0 <BSP_LCD_DrawHLine+0xb0>)
 8044e2e:	681b      	ldr	r3, [r3, #0]
 8044e30:	4a20      	ldr	r2, [pc, #128]	; (8044eb4 <BSP_LCD_DrawHLine+0xb4>)
 8044e32:	2134      	movs	r1, #52	; 0x34
 8044e34:	fb01 f303 	mul.w	r3, r1, r3
 8044e38:	4413      	add	r3, r2
 8044e3a:	335c      	adds	r3, #92	; 0x5c
 8044e3c:	681c      	ldr	r4, [r3, #0]
 8044e3e:	f7ff fdcb 	bl	80449d8 <BSP_LCD_GetXSize>
 8044e42:	4602      	mov	r2, r0
 8044e44:	88bb      	ldrh	r3, [r7, #4]
 8044e46:	fb03 f202 	mul.w	r2, r3, r2
 8044e4a:	88fb      	ldrh	r3, [r7, #6]
 8044e4c:	4413      	add	r3, r2
 8044e4e:	005b      	lsls	r3, r3, #1
 8044e50:	4423      	add	r3, r4
 8044e52:	60fb      	str	r3, [r7, #12]
 8044e54:	e013      	b.n	8044e7e <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8044e56:	4b16      	ldr	r3, [pc, #88]	; (8044eb0 <BSP_LCD_DrawHLine+0xb0>)
 8044e58:	681b      	ldr	r3, [r3, #0]
 8044e5a:	4a16      	ldr	r2, [pc, #88]	; (8044eb4 <BSP_LCD_DrawHLine+0xb4>)
 8044e5c:	2134      	movs	r1, #52	; 0x34
 8044e5e:	fb01 f303 	mul.w	r3, r1, r3
 8044e62:	4413      	add	r3, r2
 8044e64:	335c      	adds	r3, #92	; 0x5c
 8044e66:	681c      	ldr	r4, [r3, #0]
 8044e68:	f7ff fdb6 	bl	80449d8 <BSP_LCD_GetXSize>
 8044e6c:	4602      	mov	r2, r0
 8044e6e:	88bb      	ldrh	r3, [r7, #4]
 8044e70:	fb03 f202 	mul.w	r2, r3, r2
 8044e74:	88fb      	ldrh	r3, [r7, #6]
 8044e76:	4413      	add	r3, r2
 8044e78:	009b      	lsls	r3, r3, #2
 8044e7a:	4423      	add	r3, r4
 8044e7c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8044e7e:	4b0c      	ldr	r3, [pc, #48]	; (8044eb0 <BSP_LCD_DrawHLine+0xb0>)
 8044e80:	6818      	ldr	r0, [r3, #0]
 8044e82:	68fc      	ldr	r4, [r7, #12]
 8044e84:	887d      	ldrh	r5, [r7, #2]
 8044e86:	4b0a      	ldr	r3, [pc, #40]	; (8044eb0 <BSP_LCD_DrawHLine+0xb0>)
 8044e88:	681a      	ldr	r2, [r3, #0]
 8044e8a:	490b      	ldr	r1, [pc, #44]	; (8044eb8 <BSP_LCD_DrawHLine+0xb8>)
 8044e8c:	4613      	mov	r3, r2
 8044e8e:	005b      	lsls	r3, r3, #1
 8044e90:	4413      	add	r3, r2
 8044e92:	009b      	lsls	r3, r3, #2
 8044e94:	440b      	add	r3, r1
 8044e96:	681b      	ldr	r3, [r3, #0]
 8044e98:	9301      	str	r3, [sp, #4]
 8044e9a:	2300      	movs	r3, #0
 8044e9c:	9300      	str	r3, [sp, #0]
 8044e9e:	2301      	movs	r3, #1
 8044ea0:	462a      	mov	r2, r5
 8044ea2:	4621      	mov	r1, r4
 8044ea4:	f000 fab2 	bl	804540c <LL_FillBuffer>
}
 8044ea8:	bf00      	nop
 8044eaa:	3710      	adds	r7, #16
 8044eac:	46bd      	mov	sp, r7
 8044eae:	bdb0      	pop	{r4, r5, r7, pc}
 8044eb0:	200000f0 	.word	0x200000f0
 8044eb4:	20000290 	.word	0x20000290
 8044eb8:	200000f4 	.word	0x200000f4

08044ebc <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8044ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8044ebe:	b087      	sub	sp, #28
 8044ec0:	af02      	add	r7, sp, #8
 8044ec2:	4603      	mov	r3, r0
 8044ec4:	80fb      	strh	r3, [r7, #6]
 8044ec6:	460b      	mov	r3, r1
 8044ec8:	80bb      	strh	r3, [r7, #4]
 8044eca:	4613      	mov	r3, r2
 8044ecc:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8044ece:	2300      	movs	r3, #0
 8044ed0:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8044ed2:	4b28      	ldr	r3, [pc, #160]	; (8044f74 <BSP_LCD_DrawVLine+0xb8>)
 8044ed4:	681b      	ldr	r3, [r3, #0]
 8044ed6:	4a28      	ldr	r2, [pc, #160]	; (8044f78 <BSP_LCD_DrawVLine+0xbc>)
 8044ed8:	2134      	movs	r1, #52	; 0x34
 8044eda:	fb01 f303 	mul.w	r3, r1, r3
 8044ede:	4413      	add	r3, r2
 8044ee0:	3348      	adds	r3, #72	; 0x48
 8044ee2:	681b      	ldr	r3, [r3, #0]
 8044ee4:	2b02      	cmp	r3, #2
 8044ee6:	d114      	bne.n	8044f12 <BSP_LCD_DrawVLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8044ee8:	4b22      	ldr	r3, [pc, #136]	; (8044f74 <BSP_LCD_DrawVLine+0xb8>)
 8044eea:	681b      	ldr	r3, [r3, #0]
 8044eec:	4a22      	ldr	r2, [pc, #136]	; (8044f78 <BSP_LCD_DrawVLine+0xbc>)
 8044eee:	2134      	movs	r1, #52	; 0x34
 8044ef0:	fb01 f303 	mul.w	r3, r1, r3
 8044ef4:	4413      	add	r3, r2
 8044ef6:	335c      	adds	r3, #92	; 0x5c
 8044ef8:	681c      	ldr	r4, [r3, #0]
 8044efa:	f7ff fd6d 	bl	80449d8 <BSP_LCD_GetXSize>
 8044efe:	4602      	mov	r2, r0
 8044f00:	88bb      	ldrh	r3, [r7, #4]
 8044f02:	fb03 f202 	mul.w	r2, r3, r2
 8044f06:	88fb      	ldrh	r3, [r7, #6]
 8044f08:	4413      	add	r3, r2
 8044f0a:	005b      	lsls	r3, r3, #1
 8044f0c:	4423      	add	r3, r4
 8044f0e:	60fb      	str	r3, [r7, #12]
 8044f10:	e013      	b.n	8044f3a <BSP_LCD_DrawVLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8044f12:	4b18      	ldr	r3, [pc, #96]	; (8044f74 <BSP_LCD_DrawVLine+0xb8>)
 8044f14:	681b      	ldr	r3, [r3, #0]
 8044f16:	4a18      	ldr	r2, [pc, #96]	; (8044f78 <BSP_LCD_DrawVLine+0xbc>)
 8044f18:	2134      	movs	r1, #52	; 0x34
 8044f1a:	fb01 f303 	mul.w	r3, r1, r3
 8044f1e:	4413      	add	r3, r2
 8044f20:	335c      	adds	r3, #92	; 0x5c
 8044f22:	681c      	ldr	r4, [r3, #0]
 8044f24:	f7ff fd58 	bl	80449d8 <BSP_LCD_GetXSize>
 8044f28:	4602      	mov	r2, r0
 8044f2a:	88bb      	ldrh	r3, [r7, #4]
 8044f2c:	fb03 f202 	mul.w	r2, r3, r2
 8044f30:	88fb      	ldrh	r3, [r7, #6]
 8044f32:	4413      	add	r3, r2
 8044f34:	009b      	lsls	r3, r3, #2
 8044f36:	4423      	add	r3, r4
 8044f38:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8044f3a:	4b0e      	ldr	r3, [pc, #56]	; (8044f74 <BSP_LCD_DrawVLine+0xb8>)
 8044f3c:	681c      	ldr	r4, [r3, #0]
 8044f3e:	68fd      	ldr	r5, [r7, #12]
 8044f40:	887e      	ldrh	r6, [r7, #2]
 8044f42:	f7ff fd49 	bl	80449d8 <BSP_LCD_GetXSize>
 8044f46:	4603      	mov	r3, r0
 8044f48:	1e59      	subs	r1, r3, #1
 8044f4a:	4b0a      	ldr	r3, [pc, #40]	; (8044f74 <BSP_LCD_DrawVLine+0xb8>)
 8044f4c:	681a      	ldr	r2, [r3, #0]
 8044f4e:	480b      	ldr	r0, [pc, #44]	; (8044f7c <BSP_LCD_DrawVLine+0xc0>)
 8044f50:	4613      	mov	r3, r2
 8044f52:	005b      	lsls	r3, r3, #1
 8044f54:	4413      	add	r3, r2
 8044f56:	009b      	lsls	r3, r3, #2
 8044f58:	4403      	add	r3, r0
 8044f5a:	681b      	ldr	r3, [r3, #0]
 8044f5c:	9301      	str	r3, [sp, #4]
 8044f5e:	9100      	str	r1, [sp, #0]
 8044f60:	4633      	mov	r3, r6
 8044f62:	2201      	movs	r2, #1
 8044f64:	4629      	mov	r1, r5
 8044f66:	4620      	mov	r0, r4
 8044f68:	f000 fa50 	bl	804540c <LL_FillBuffer>
}
 8044f6c:	bf00      	nop
 8044f6e:	3714      	adds	r7, #20
 8044f70:	46bd      	mov	sp, r7
 8044f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8044f74:	200000f0 	.word	0x200000f0
 8044f78:	20000290 	.word	0x20000290
 8044f7c:	200000f4 	.word	0x200000f4

08044f80 <BSP_LCD_DrawRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8044f80:	b590      	push	{r4, r7, lr}
 8044f82:	b083      	sub	sp, #12
 8044f84:	af00      	add	r7, sp, #0
 8044f86:	4604      	mov	r4, r0
 8044f88:	4608      	mov	r0, r1
 8044f8a:	4611      	mov	r1, r2
 8044f8c:	461a      	mov	r2, r3
 8044f8e:	4623      	mov	r3, r4
 8044f90:	80fb      	strh	r3, [r7, #6]
 8044f92:	4603      	mov	r3, r0
 8044f94:	80bb      	strh	r3, [r7, #4]
 8044f96:	460b      	mov	r3, r1
 8044f98:	807b      	strh	r3, [r7, #2]
 8044f9a:	4613      	mov	r3, r2
 8044f9c:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8044f9e:	887a      	ldrh	r2, [r7, #2]
 8044fa0:	88b9      	ldrh	r1, [r7, #4]
 8044fa2:	88fb      	ldrh	r3, [r7, #6]
 8044fa4:	4618      	mov	r0, r3
 8044fa6:	f7ff ff2b 	bl	8044e00 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8044faa:	88ba      	ldrh	r2, [r7, #4]
 8044fac:	883b      	ldrh	r3, [r7, #0]
 8044fae:	4413      	add	r3, r2
 8044fb0:	b299      	uxth	r1, r3
 8044fb2:	887a      	ldrh	r2, [r7, #2]
 8044fb4:	88fb      	ldrh	r3, [r7, #6]
 8044fb6:	4618      	mov	r0, r3
 8044fb8:	f7ff ff22 	bl	8044e00 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8044fbc:	883a      	ldrh	r2, [r7, #0]
 8044fbe:	88b9      	ldrh	r1, [r7, #4]
 8044fc0:	88fb      	ldrh	r3, [r7, #6]
 8044fc2:	4618      	mov	r0, r3
 8044fc4:	f7ff ff7a 	bl	8044ebc <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8044fc8:	88fa      	ldrh	r2, [r7, #6]
 8044fca:	887b      	ldrh	r3, [r7, #2]
 8044fcc:	4413      	add	r3, r2
 8044fce:	b29b      	uxth	r3, r3
 8044fd0:	883a      	ldrh	r2, [r7, #0]
 8044fd2:	88b9      	ldrh	r1, [r7, #4]
 8044fd4:	4618      	mov	r0, r3
 8044fd6:	f7ff ff71 	bl	8044ebc <BSP_LCD_DrawVLine>
}
 8044fda:	bf00      	nop
 8044fdc:	370c      	adds	r7, #12
 8044fde:	46bd      	mov	sp, r7
 8044fe0:	bd90      	pop	{r4, r7, pc}
	...

08044fe4 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8044fe4:	b5b0      	push	{r4, r5, r7, lr}
 8044fe6:	b082      	sub	sp, #8
 8044fe8:	af00      	add	r7, sp, #0
 8044fea:	4603      	mov	r3, r0
 8044fec:	603a      	str	r2, [r7, #0]
 8044fee:	80fb      	strh	r3, [r7, #6]
 8044ff0:	460b      	mov	r3, r1
 8044ff2:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8044ff4:	4b1d      	ldr	r3, [pc, #116]	; (804506c <BSP_LCD_DrawPixel+0x88>)
 8044ff6:	681b      	ldr	r3, [r3, #0]
 8044ff8:	4a1d      	ldr	r2, [pc, #116]	; (8045070 <BSP_LCD_DrawPixel+0x8c>)
 8044ffa:	2134      	movs	r1, #52	; 0x34
 8044ffc:	fb01 f303 	mul.w	r3, r1, r3
 8045000:	4413      	add	r3, r2
 8045002:	3348      	adds	r3, #72	; 0x48
 8045004:	681b      	ldr	r3, [r3, #0]
 8045006:	2b02      	cmp	r3, #2
 8045008:	d116      	bne.n	8045038 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 804500a:	4b18      	ldr	r3, [pc, #96]	; (804506c <BSP_LCD_DrawPixel+0x88>)
 804500c:	681b      	ldr	r3, [r3, #0]
 804500e:	4a18      	ldr	r2, [pc, #96]	; (8045070 <BSP_LCD_DrawPixel+0x8c>)
 8045010:	2134      	movs	r1, #52	; 0x34
 8045012:	fb01 f303 	mul.w	r3, r1, r3
 8045016:	4413      	add	r3, r2
 8045018:	335c      	adds	r3, #92	; 0x5c
 804501a:	681c      	ldr	r4, [r3, #0]
 804501c:	88bd      	ldrh	r5, [r7, #4]
 804501e:	f7ff fcdb 	bl	80449d8 <BSP_LCD_GetXSize>
 8045022:	4603      	mov	r3, r0
 8045024:	fb03 f205 	mul.w	r2, r3, r5
 8045028:	88fb      	ldrh	r3, [r7, #6]
 804502a:	4413      	add	r3, r2
 804502c:	005b      	lsls	r3, r3, #1
 804502e:	4423      	add	r3, r4
 8045030:	683a      	ldr	r2, [r7, #0]
 8045032:	b292      	uxth	r2, r2
 8045034:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8045036:	e015      	b.n	8045064 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8045038:	4b0c      	ldr	r3, [pc, #48]	; (804506c <BSP_LCD_DrawPixel+0x88>)
 804503a:	681b      	ldr	r3, [r3, #0]
 804503c:	4a0c      	ldr	r2, [pc, #48]	; (8045070 <BSP_LCD_DrawPixel+0x8c>)
 804503e:	2134      	movs	r1, #52	; 0x34
 8045040:	fb01 f303 	mul.w	r3, r1, r3
 8045044:	4413      	add	r3, r2
 8045046:	335c      	adds	r3, #92	; 0x5c
 8045048:	681c      	ldr	r4, [r3, #0]
 804504a:	88bd      	ldrh	r5, [r7, #4]
 804504c:	f7ff fcc4 	bl	80449d8 <BSP_LCD_GetXSize>
 8045050:	4603      	mov	r3, r0
 8045052:	fb03 f205 	mul.w	r2, r3, r5
 8045056:	88fb      	ldrh	r3, [r7, #6]
 8045058:	4413      	add	r3, r2
 804505a:	009b      	lsls	r3, r3, #2
 804505c:	4423      	add	r3, r4
 804505e:	461a      	mov	r2, r3
 8045060:	683b      	ldr	r3, [r7, #0]
 8045062:	6013      	str	r3, [r2, #0]
}
 8045064:	bf00      	nop
 8045066:	3708      	adds	r7, #8
 8045068:	46bd      	mov	sp, r7
 804506a:	bdb0      	pop	{r4, r5, r7, pc}
 804506c:	200000f0 	.word	0x200000f0
 8045070:	20000290 	.word	0x20000290

08045074 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8045074:	b580      	push	{r7, lr}
 8045076:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8045078:	4b0a      	ldr	r3, [pc, #40]	; (80450a4 <BSP_LCD_DisplayOn+0x30>)
 804507a:	681b      	ldr	r3, [r3, #0]
 804507c:	699a      	ldr	r2, [r3, #24]
 804507e:	4b09      	ldr	r3, [pc, #36]	; (80450a4 <BSP_LCD_DisplayOn+0x30>)
 8045080:	681b      	ldr	r3, [r3, #0]
 8045082:	f042 0201 	orr.w	r2, r2, #1
 8045086:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8045088:	2201      	movs	r2, #1
 804508a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 804508e:	4806      	ldr	r0, [pc, #24]	; (80450a8 <BSP_LCD_DisplayOn+0x34>)
 8045090:	f7fc fda0 	bl	8041bd4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8045094:	2201      	movs	r2, #1
 8045096:	2108      	movs	r1, #8
 8045098:	4804      	ldr	r0, [pc, #16]	; (80450ac <BSP_LCD_DisplayOn+0x38>)
 804509a:	f7fc fd9b 	bl	8041bd4 <HAL_GPIO_WritePin>
}
 804509e:	bf00      	nop
 80450a0:	bd80      	pop	{r7, pc}
 80450a2:	bf00      	nop
 80450a4:	20000290 	.word	0x20000290
 80450a8:	40022000 	.word	0x40022000
 80450ac:	40022800 	.word	0x40022800

080450b0 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80450b0:	b580      	push	{r7, lr}
 80450b2:	b090      	sub	sp, #64	; 0x40
 80450b4:	af00      	add	r7, sp, #0
 80450b6:	6078      	str	r0, [r7, #4]
 80450b8:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80450ba:	4b64      	ldr	r3, [pc, #400]	; (804524c <BSP_LCD_MspInit+0x19c>)
 80450bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80450be:	4a63      	ldr	r2, [pc, #396]	; (804524c <BSP_LCD_MspInit+0x19c>)
 80450c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80450c4:	6453      	str	r3, [r2, #68]	; 0x44
 80450c6:	4b61      	ldr	r3, [pc, #388]	; (804524c <BSP_LCD_MspInit+0x19c>)
 80450c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80450ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80450ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80450d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80450d2:	4b5e      	ldr	r3, [pc, #376]	; (804524c <BSP_LCD_MspInit+0x19c>)
 80450d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80450d6:	4a5d      	ldr	r2, [pc, #372]	; (804524c <BSP_LCD_MspInit+0x19c>)
 80450d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80450dc:	6313      	str	r3, [r2, #48]	; 0x30
 80450de:	4b5b      	ldr	r3, [pc, #364]	; (804524c <BSP_LCD_MspInit+0x19c>)
 80450e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80450e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80450e6:	627b      	str	r3, [r7, #36]	; 0x24
 80450e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80450ea:	4b58      	ldr	r3, [pc, #352]	; (804524c <BSP_LCD_MspInit+0x19c>)
 80450ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80450ee:	4a57      	ldr	r2, [pc, #348]	; (804524c <BSP_LCD_MspInit+0x19c>)
 80450f0:	f043 0310 	orr.w	r3, r3, #16
 80450f4:	6313      	str	r3, [r2, #48]	; 0x30
 80450f6:	4b55      	ldr	r3, [pc, #340]	; (804524c <BSP_LCD_MspInit+0x19c>)
 80450f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80450fa:	f003 0310 	and.w	r3, r3, #16
 80450fe:	623b      	str	r3, [r7, #32]
 8045100:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8045102:	4b52      	ldr	r3, [pc, #328]	; (804524c <BSP_LCD_MspInit+0x19c>)
 8045104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8045106:	4a51      	ldr	r2, [pc, #324]	; (804524c <BSP_LCD_MspInit+0x19c>)
 8045108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804510c:	6313      	str	r3, [r2, #48]	; 0x30
 804510e:	4b4f      	ldr	r3, [pc, #316]	; (804524c <BSP_LCD_MspInit+0x19c>)
 8045110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8045112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8045116:	61fb      	str	r3, [r7, #28]
 8045118:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 804511a:	4b4c      	ldr	r3, [pc, #304]	; (804524c <BSP_LCD_MspInit+0x19c>)
 804511c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804511e:	4a4b      	ldr	r2, [pc, #300]	; (804524c <BSP_LCD_MspInit+0x19c>)
 8045120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8045124:	6313      	str	r3, [r2, #48]	; 0x30
 8045126:	4b49      	ldr	r3, [pc, #292]	; (804524c <BSP_LCD_MspInit+0x19c>)
 8045128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804512a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804512e:	61bb      	str	r3, [r7, #24]
 8045130:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8045132:	4b46      	ldr	r3, [pc, #280]	; (804524c <BSP_LCD_MspInit+0x19c>)
 8045134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8045136:	4a45      	ldr	r2, [pc, #276]	; (804524c <BSP_LCD_MspInit+0x19c>)
 8045138:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 804513c:	6313      	str	r3, [r2, #48]	; 0x30
 804513e:	4b43      	ldr	r3, [pc, #268]	; (804524c <BSP_LCD_MspInit+0x19c>)
 8045140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8045142:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8045146:	617b      	str	r3, [r7, #20]
 8045148:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 804514a:	4b40      	ldr	r3, [pc, #256]	; (804524c <BSP_LCD_MspInit+0x19c>)
 804514c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804514e:	4a3f      	ldr	r2, [pc, #252]	; (804524c <BSP_LCD_MspInit+0x19c>)
 8045150:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8045154:	6313      	str	r3, [r2, #48]	; 0x30
 8045156:	4b3d      	ldr	r3, [pc, #244]	; (804524c <BSP_LCD_MspInit+0x19c>)
 8045158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804515a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 804515e:	613b      	str	r3, [r7, #16]
 8045160:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8045162:	4b3a      	ldr	r3, [pc, #232]	; (804524c <BSP_LCD_MspInit+0x19c>)
 8045164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8045166:	4a39      	ldr	r2, [pc, #228]	; (804524c <BSP_LCD_MspInit+0x19c>)
 8045168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 804516c:	6313      	str	r3, [r2, #48]	; 0x30
 804516e:	4b37      	ldr	r3, [pc, #220]	; (804524c <BSP_LCD_MspInit+0x19c>)
 8045170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8045172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8045176:	60fb      	str	r3, [r7, #12]
 8045178:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 804517a:	4b34      	ldr	r3, [pc, #208]	; (804524c <BSP_LCD_MspInit+0x19c>)
 804517c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804517e:	4a33      	ldr	r2, [pc, #204]	; (804524c <BSP_LCD_MspInit+0x19c>)
 8045180:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8045184:	6313      	str	r3, [r2, #48]	; 0x30
 8045186:	4b31      	ldr	r3, [pc, #196]	; (804524c <BSP_LCD_MspInit+0x19c>)
 8045188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804518a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 804518e:	60bb      	str	r3, [r7, #8]
 8045190:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8045192:	2310      	movs	r3, #16
 8045194:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8045196:	2302      	movs	r3, #2
 8045198:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 804519a:	2300      	movs	r3, #0
 804519c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 804519e:	2302      	movs	r3, #2
 80451a0:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80451a2:	230e      	movs	r3, #14
 80451a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80451a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80451aa:	4619      	mov	r1, r3
 80451ac:	4828      	ldr	r0, [pc, #160]	; (8045250 <BSP_LCD_MspInit+0x1a0>)
 80451ae:	f7fc fb67 	bl	8041880 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80451b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80451b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80451b8:	2302      	movs	r3, #2
 80451ba:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80451bc:	2309      	movs	r3, #9
 80451be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80451c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80451c4:	4619      	mov	r1, r3
 80451c6:	4823      	ldr	r0, [pc, #140]	; (8045254 <BSP_LCD_MspInit+0x1a4>)
 80451c8:	f7fc fb5a 	bl	8041880 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80451cc:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 80451d0:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80451d2:	2302      	movs	r3, #2
 80451d4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80451d6:	230e      	movs	r3, #14
 80451d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80451da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80451de:	4619      	mov	r1, r3
 80451e0:	481d      	ldr	r0, [pc, #116]	; (8045258 <BSP_LCD_MspInit+0x1a8>)
 80451e2:	f7fc fb4d 	bl	8041880 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80451e6:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80451ea:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80451ec:	2302      	movs	r3, #2
 80451ee:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80451f0:	230e      	movs	r3, #14
 80451f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80451f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80451f8:	4619      	mov	r1, r3
 80451fa:	4818      	ldr	r0, [pc, #96]	; (804525c <BSP_LCD_MspInit+0x1ac>)
 80451fc:	f7fc fb40 	bl	8041880 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8045200:	23f7      	movs	r3, #247	; 0xf7
 8045202:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8045204:	2302      	movs	r3, #2
 8045206:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8045208:	230e      	movs	r3, #14
 804520a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 804520c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8045210:	4619      	mov	r1, r3
 8045212:	4813      	ldr	r0, [pc, #76]	; (8045260 <BSP_LCD_MspInit+0x1b0>)
 8045214:	f7fc fb34 	bl	8041880 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8045218:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 804521c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 804521e:	2301      	movs	r3, #1
 8045220:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8045222:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8045226:	4619      	mov	r1, r3
 8045228:	480b      	ldr	r0, [pc, #44]	; (8045258 <BSP_LCD_MspInit+0x1a8>)
 804522a:	f7fc fb29 	bl	8041880 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 804522e:	2308      	movs	r3, #8
 8045230:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8045232:	2301      	movs	r3, #1
 8045234:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8045236:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 804523a:	4619      	mov	r1, r3
 804523c:	4808      	ldr	r0, [pc, #32]	; (8045260 <BSP_LCD_MspInit+0x1b0>)
 804523e:	f7fc fb1f 	bl	8041880 <HAL_GPIO_Init>
}
 8045242:	bf00      	nop
 8045244:	3740      	adds	r7, #64	; 0x40
 8045246:	46bd      	mov	sp, r7
 8045248:	bd80      	pop	{r7, pc}
 804524a:	bf00      	nop
 804524c:	40023800 	.word	0x40023800
 8045250:	40021000 	.word	0x40021000
 8045254:	40021800 	.word	0x40021800
 8045258:	40022000 	.word	0x40022000
 804525c:	40022400 	.word	0x40022400
 8045260:	40022800 	.word	0x40022800

08045264 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8045264:	b580      	push	{r7, lr}
 8045266:	b082      	sub	sp, #8
 8045268:	af00      	add	r7, sp, #0
 804526a:	6078      	str	r0, [r7, #4]
 804526c:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 804526e:	4b0a      	ldr	r3, [pc, #40]	; (8045298 <BSP_LCD_ClockConfig+0x34>)
 8045270:	2208      	movs	r2, #8
 8045272:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8045274:	4b08      	ldr	r3, [pc, #32]	; (8045298 <BSP_LCD_ClockConfig+0x34>)
 8045276:	22c0      	movs	r2, #192	; 0xc0
 8045278:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 804527a:	4b07      	ldr	r3, [pc, #28]	; (8045298 <BSP_LCD_ClockConfig+0x34>)
 804527c:	2205      	movs	r2, #5
 804527e:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8045280:	4b05      	ldr	r3, [pc, #20]	; (8045298 <BSP_LCD_ClockConfig+0x34>)
 8045282:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8045286:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8045288:	4803      	ldr	r0, [pc, #12]	; (8045298 <BSP_LCD_ClockConfig+0x34>)
 804528a:	f7fe fa17 	bl	80436bc <HAL_RCCEx_PeriphCLKConfig>
}
 804528e:	bf00      	nop
 8045290:	3708      	adds	r7, #8
 8045292:	46bd      	mov	sp, r7
 8045294:	bd80      	pop	{r7, pc}
 8045296:	bf00      	nop
 8045298:	2000010c 	.word	0x2000010c

0804529c <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 804529c:	b580      	push	{r7, lr}
 804529e:	b088      	sub	sp, #32
 80452a0:	af00      	add	r7, sp, #0
 80452a2:	4603      	mov	r3, r0
 80452a4:	603a      	str	r2, [r7, #0]
 80452a6:	80fb      	strh	r3, [r7, #6]
 80452a8:	460b      	mov	r3, r1
 80452aa:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80452ac:	2300      	movs	r3, #0
 80452ae:	61fb      	str	r3, [r7, #28]
 80452b0:	2300      	movs	r3, #0
 80452b2:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80452b4:	4b53      	ldr	r3, [pc, #332]	; (8045404 <DrawChar+0x168>)
 80452b6:	681a      	ldr	r2, [r3, #0]
 80452b8:	4953      	ldr	r1, [pc, #332]	; (8045408 <DrawChar+0x16c>)
 80452ba:	4613      	mov	r3, r2
 80452bc:	005b      	lsls	r3, r3, #1
 80452be:	4413      	add	r3, r2
 80452c0:	009b      	lsls	r3, r3, #2
 80452c2:	440b      	add	r3, r1
 80452c4:	3308      	adds	r3, #8
 80452c6:	681b      	ldr	r3, [r3, #0]
 80452c8:	88db      	ldrh	r3, [r3, #6]
 80452ca:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80452cc:	4b4d      	ldr	r3, [pc, #308]	; (8045404 <DrawChar+0x168>)
 80452ce:	681a      	ldr	r2, [r3, #0]
 80452d0:	494d      	ldr	r1, [pc, #308]	; (8045408 <DrawChar+0x16c>)
 80452d2:	4613      	mov	r3, r2
 80452d4:	005b      	lsls	r3, r3, #1
 80452d6:	4413      	add	r3, r2
 80452d8:	009b      	lsls	r3, r3, #2
 80452da:	440b      	add	r3, r1
 80452dc:	3308      	adds	r3, #8
 80452de:	681b      	ldr	r3, [r3, #0]
 80452e0:	889b      	ldrh	r3, [r3, #4]
 80452e2:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80452e4:	8a3b      	ldrh	r3, [r7, #16]
 80452e6:	3307      	adds	r3, #7
 80452e8:	2b00      	cmp	r3, #0
 80452ea:	da00      	bge.n	80452ee <DrawChar+0x52>
 80452ec:	3307      	adds	r3, #7
 80452ee:	10db      	asrs	r3, r3, #3
 80452f0:	b2db      	uxtb	r3, r3
 80452f2:	00db      	lsls	r3, r3, #3
 80452f4:	b2da      	uxtb	r2, r3
 80452f6:	8a3b      	ldrh	r3, [r7, #16]
 80452f8:	b2db      	uxtb	r3, r3
 80452fa:	1ad3      	subs	r3, r2, r3
 80452fc:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80452fe:	2300      	movs	r3, #0
 8045300:	61fb      	str	r3, [r7, #28]
 8045302:	e076      	b.n	80453f2 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8045304:	8a3b      	ldrh	r3, [r7, #16]
 8045306:	3307      	adds	r3, #7
 8045308:	2b00      	cmp	r3, #0
 804530a:	da00      	bge.n	804530e <DrawChar+0x72>
 804530c:	3307      	adds	r3, #7
 804530e:	10db      	asrs	r3, r3, #3
 8045310:	461a      	mov	r2, r3
 8045312:	69fb      	ldr	r3, [r7, #28]
 8045314:	fb03 f302 	mul.w	r3, r3, r2
 8045318:	683a      	ldr	r2, [r7, #0]
 804531a:	4413      	add	r3, r2
 804531c:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 804531e:	8a3b      	ldrh	r3, [r7, #16]
 8045320:	3307      	adds	r3, #7
 8045322:	2b00      	cmp	r3, #0
 8045324:	da00      	bge.n	8045328 <DrawChar+0x8c>
 8045326:	3307      	adds	r3, #7
 8045328:	10db      	asrs	r3, r3, #3
 804532a:	2b01      	cmp	r3, #1
 804532c:	d002      	beq.n	8045334 <DrawChar+0x98>
 804532e:	2b02      	cmp	r3, #2
 8045330:	d004      	beq.n	804533c <DrawChar+0xa0>
 8045332:	e00c      	b.n	804534e <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8045334:	68bb      	ldr	r3, [r7, #8]
 8045336:	781b      	ldrb	r3, [r3, #0]
 8045338:	617b      	str	r3, [r7, #20]
      break;
 804533a:	e016      	b.n	804536a <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 804533c:	68bb      	ldr	r3, [r7, #8]
 804533e:	781b      	ldrb	r3, [r3, #0]
 8045340:	021b      	lsls	r3, r3, #8
 8045342:	68ba      	ldr	r2, [r7, #8]
 8045344:	3201      	adds	r2, #1
 8045346:	7812      	ldrb	r2, [r2, #0]
 8045348:	4313      	orrs	r3, r2
 804534a:	617b      	str	r3, [r7, #20]
      break;
 804534c:	e00d      	b.n	804536a <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 804534e:	68bb      	ldr	r3, [r7, #8]
 8045350:	781b      	ldrb	r3, [r3, #0]
 8045352:	041a      	lsls	r2, r3, #16
 8045354:	68bb      	ldr	r3, [r7, #8]
 8045356:	3301      	adds	r3, #1
 8045358:	781b      	ldrb	r3, [r3, #0]
 804535a:	021b      	lsls	r3, r3, #8
 804535c:	4313      	orrs	r3, r2
 804535e:	68ba      	ldr	r2, [r7, #8]
 8045360:	3202      	adds	r2, #2
 8045362:	7812      	ldrb	r2, [r2, #0]
 8045364:	4313      	orrs	r3, r2
 8045366:	617b      	str	r3, [r7, #20]
      break;
 8045368:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 804536a:	2300      	movs	r3, #0
 804536c:	61bb      	str	r3, [r7, #24]
 804536e:	e036      	b.n	80453de <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8045370:	8a3a      	ldrh	r2, [r7, #16]
 8045372:	69bb      	ldr	r3, [r7, #24]
 8045374:	1ad2      	subs	r2, r2, r3
 8045376:	7bfb      	ldrb	r3, [r7, #15]
 8045378:	4413      	add	r3, r2
 804537a:	3b01      	subs	r3, #1
 804537c:	2201      	movs	r2, #1
 804537e:	fa02 f303 	lsl.w	r3, r2, r3
 8045382:	461a      	mov	r2, r3
 8045384:	697b      	ldr	r3, [r7, #20]
 8045386:	4013      	ands	r3, r2
 8045388:	2b00      	cmp	r3, #0
 804538a:	d012      	beq.n	80453b2 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 804538c:	69bb      	ldr	r3, [r7, #24]
 804538e:	b29a      	uxth	r2, r3
 8045390:	88fb      	ldrh	r3, [r7, #6]
 8045392:	4413      	add	r3, r2
 8045394:	b298      	uxth	r0, r3
 8045396:	4b1b      	ldr	r3, [pc, #108]	; (8045404 <DrawChar+0x168>)
 8045398:	681a      	ldr	r2, [r3, #0]
 804539a:	491b      	ldr	r1, [pc, #108]	; (8045408 <DrawChar+0x16c>)
 804539c:	4613      	mov	r3, r2
 804539e:	005b      	lsls	r3, r3, #1
 80453a0:	4413      	add	r3, r2
 80453a2:	009b      	lsls	r3, r3, #2
 80453a4:	440b      	add	r3, r1
 80453a6:	681a      	ldr	r2, [r3, #0]
 80453a8:	88bb      	ldrh	r3, [r7, #4]
 80453aa:	4619      	mov	r1, r3
 80453ac:	f7ff fe1a 	bl	8044fe4 <BSP_LCD_DrawPixel>
 80453b0:	e012      	b.n	80453d8 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80453b2:	69bb      	ldr	r3, [r7, #24]
 80453b4:	b29a      	uxth	r2, r3
 80453b6:	88fb      	ldrh	r3, [r7, #6]
 80453b8:	4413      	add	r3, r2
 80453ba:	b298      	uxth	r0, r3
 80453bc:	4b11      	ldr	r3, [pc, #68]	; (8045404 <DrawChar+0x168>)
 80453be:	681a      	ldr	r2, [r3, #0]
 80453c0:	4911      	ldr	r1, [pc, #68]	; (8045408 <DrawChar+0x16c>)
 80453c2:	4613      	mov	r3, r2
 80453c4:	005b      	lsls	r3, r3, #1
 80453c6:	4413      	add	r3, r2
 80453c8:	009b      	lsls	r3, r3, #2
 80453ca:	440b      	add	r3, r1
 80453cc:	3304      	adds	r3, #4
 80453ce:	681a      	ldr	r2, [r3, #0]
 80453d0:	88bb      	ldrh	r3, [r7, #4]
 80453d2:	4619      	mov	r1, r3
 80453d4:	f7ff fe06 	bl	8044fe4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80453d8:	69bb      	ldr	r3, [r7, #24]
 80453da:	3301      	adds	r3, #1
 80453dc:	61bb      	str	r3, [r7, #24]
 80453de:	8a3b      	ldrh	r3, [r7, #16]
 80453e0:	69ba      	ldr	r2, [r7, #24]
 80453e2:	429a      	cmp	r2, r3
 80453e4:	d3c4      	bcc.n	8045370 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80453e6:	88bb      	ldrh	r3, [r7, #4]
 80453e8:	3301      	adds	r3, #1
 80453ea:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80453ec:	69fb      	ldr	r3, [r7, #28]
 80453ee:	3301      	adds	r3, #1
 80453f0:	61fb      	str	r3, [r7, #28]
 80453f2:	8a7b      	ldrh	r3, [r7, #18]
 80453f4:	69fa      	ldr	r2, [r7, #28]
 80453f6:	429a      	cmp	r2, r3
 80453f8:	d384      	bcc.n	8045304 <DrawChar+0x68>
  }
}
 80453fa:	bf00      	nop
 80453fc:	3720      	adds	r7, #32
 80453fe:	46bd      	mov	sp, r7
 8045400:	bd80      	pop	{r7, pc}
 8045402:	bf00      	nop
 8045404:	200000f0 	.word	0x200000f0
 8045408:	200000f4 	.word	0x200000f4

0804540c <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 804540c:	b580      	push	{r7, lr}
 804540e:	b086      	sub	sp, #24
 8045410:	af02      	add	r7, sp, #8
 8045412:	60f8      	str	r0, [r7, #12]
 8045414:	60b9      	str	r1, [r7, #8]
 8045416:	607a      	str	r2, [r7, #4]
 8045418:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 804541a:	4b1e      	ldr	r3, [pc, #120]	; (8045494 <LL_FillBuffer+0x88>)
 804541c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8045420:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8045422:	4b1d      	ldr	r3, [pc, #116]	; (8045498 <LL_FillBuffer+0x8c>)
 8045424:	681b      	ldr	r3, [r3, #0]
 8045426:	4a1d      	ldr	r2, [pc, #116]	; (804549c <LL_FillBuffer+0x90>)
 8045428:	2134      	movs	r1, #52	; 0x34
 804542a:	fb01 f303 	mul.w	r3, r1, r3
 804542e:	4413      	add	r3, r2
 8045430:	3348      	adds	r3, #72	; 0x48
 8045432:	681b      	ldr	r3, [r3, #0]
 8045434:	2b02      	cmp	r3, #2
 8045436:	d103      	bne.n	8045440 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8045438:	4b16      	ldr	r3, [pc, #88]	; (8045494 <LL_FillBuffer+0x88>)
 804543a:	2202      	movs	r2, #2
 804543c:	609a      	str	r2, [r3, #8]
 804543e:	e002      	b.n	8045446 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8045440:	4b14      	ldr	r3, [pc, #80]	; (8045494 <LL_FillBuffer+0x88>)
 8045442:	2200      	movs	r2, #0
 8045444:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8045446:	4a13      	ldr	r2, [pc, #76]	; (8045494 <LL_FillBuffer+0x88>)
 8045448:	69bb      	ldr	r3, [r7, #24]
 804544a:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 804544c:	4b11      	ldr	r3, [pc, #68]	; (8045494 <LL_FillBuffer+0x88>)
 804544e:	4a14      	ldr	r2, [pc, #80]	; (80454a0 <LL_FillBuffer+0x94>)
 8045450:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8045452:	4810      	ldr	r0, [pc, #64]	; (8045494 <LL_FillBuffer+0x88>)
 8045454:	f7fb ff88 	bl	8041368 <HAL_DMA2D_Init>
 8045458:	4603      	mov	r3, r0
 804545a:	2b00      	cmp	r3, #0
 804545c:	d115      	bne.n	804548a <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 804545e:	68f9      	ldr	r1, [r7, #12]
 8045460:	480c      	ldr	r0, [pc, #48]	; (8045494 <LL_FillBuffer+0x88>)
 8045462:	f7fc f8df 	bl	8041624 <HAL_DMA2D_ConfigLayer>
 8045466:	4603      	mov	r3, r0
 8045468:	2b00      	cmp	r3, #0
 804546a:	d10e      	bne.n	804548a <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 804546c:	68ba      	ldr	r2, [r7, #8]
 804546e:	683b      	ldr	r3, [r7, #0]
 8045470:	9300      	str	r3, [sp, #0]
 8045472:	687b      	ldr	r3, [r7, #4]
 8045474:	69f9      	ldr	r1, [r7, #28]
 8045476:	4807      	ldr	r0, [pc, #28]	; (8045494 <LL_FillBuffer+0x88>)
 8045478:	f7fb ffc0 	bl	80413fc <HAL_DMA2D_Start>
 804547c:	4603      	mov	r3, r0
 804547e:	2b00      	cmp	r3, #0
 8045480:	d103      	bne.n	804548a <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8045482:	210a      	movs	r1, #10
 8045484:	4803      	ldr	r0, [pc, #12]	; (8045494 <LL_FillBuffer+0x88>)
 8045486:	f7fb ffe4 	bl	8041452 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 804548a:	bf00      	nop
 804548c:	3710      	adds	r7, #16
 804548e:	46bd      	mov	sp, r7
 8045490:	bd80      	pop	{r7, pc}
 8045492:	bf00      	nop
 8045494:	200000b0 	.word	0x200000b0
 8045498:	200000f0 	.word	0x200000f0
 804549c:	20000290 	.word	0x20000290
 80454a0:	4002b000 	.word	0x4002b000

080454a4 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80454a4:	b580      	push	{r7, lr}
 80454a6:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80454a8:	4b29      	ldr	r3, [pc, #164]	; (8045550 <BSP_SDRAM_Init+0xac>)
 80454aa:	4a2a      	ldr	r2, [pc, #168]	; (8045554 <BSP_SDRAM_Init+0xb0>)
 80454ac:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80454ae:	4b2a      	ldr	r3, [pc, #168]	; (8045558 <BSP_SDRAM_Init+0xb4>)
 80454b0:	2202      	movs	r2, #2
 80454b2:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80454b4:	4b28      	ldr	r3, [pc, #160]	; (8045558 <BSP_SDRAM_Init+0xb4>)
 80454b6:	2207      	movs	r2, #7
 80454b8:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80454ba:	4b27      	ldr	r3, [pc, #156]	; (8045558 <BSP_SDRAM_Init+0xb4>)
 80454bc:	2204      	movs	r2, #4
 80454be:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80454c0:	4b25      	ldr	r3, [pc, #148]	; (8045558 <BSP_SDRAM_Init+0xb4>)
 80454c2:	2207      	movs	r2, #7
 80454c4:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80454c6:	4b24      	ldr	r3, [pc, #144]	; (8045558 <BSP_SDRAM_Init+0xb4>)
 80454c8:	2202      	movs	r2, #2
 80454ca:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80454cc:	4b22      	ldr	r3, [pc, #136]	; (8045558 <BSP_SDRAM_Init+0xb4>)
 80454ce:	2202      	movs	r2, #2
 80454d0:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80454d2:	4b21      	ldr	r3, [pc, #132]	; (8045558 <BSP_SDRAM_Init+0xb4>)
 80454d4:	2202      	movs	r2, #2
 80454d6:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80454d8:	4b1d      	ldr	r3, [pc, #116]	; (8045550 <BSP_SDRAM_Init+0xac>)
 80454da:	2200      	movs	r2, #0
 80454dc:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80454de:	4b1c      	ldr	r3, [pc, #112]	; (8045550 <BSP_SDRAM_Init+0xac>)
 80454e0:	2200      	movs	r2, #0
 80454e2:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80454e4:	4b1a      	ldr	r3, [pc, #104]	; (8045550 <BSP_SDRAM_Init+0xac>)
 80454e6:	2204      	movs	r2, #4
 80454e8:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80454ea:	4b19      	ldr	r3, [pc, #100]	; (8045550 <BSP_SDRAM_Init+0xac>)
 80454ec:	2210      	movs	r2, #16
 80454ee:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80454f0:	4b17      	ldr	r3, [pc, #92]	; (8045550 <BSP_SDRAM_Init+0xac>)
 80454f2:	2240      	movs	r2, #64	; 0x40
 80454f4:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80454f6:	4b16      	ldr	r3, [pc, #88]	; (8045550 <BSP_SDRAM_Init+0xac>)
 80454f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80454fc:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80454fe:	4b14      	ldr	r3, [pc, #80]	; (8045550 <BSP_SDRAM_Init+0xac>)
 8045500:	2200      	movs	r2, #0
 8045502:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8045504:	4b12      	ldr	r3, [pc, #72]	; (8045550 <BSP_SDRAM_Init+0xac>)
 8045506:	f44f 6200 	mov.w	r2, #2048	; 0x800
 804550a:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 804550c:	4b10      	ldr	r3, [pc, #64]	; (8045550 <BSP_SDRAM_Init+0xac>)
 804550e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8045512:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8045514:	4b0e      	ldr	r3, [pc, #56]	; (8045550 <BSP_SDRAM_Init+0xac>)
 8045516:	2200      	movs	r2, #0
 8045518:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 804551a:	2100      	movs	r1, #0
 804551c:	480c      	ldr	r0, [pc, #48]	; (8045550 <BSP_SDRAM_Init+0xac>)
 804551e:	f000 f87f 	bl	8045620 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8045522:	490d      	ldr	r1, [pc, #52]	; (8045558 <BSP_SDRAM_Init+0xb4>)
 8045524:	480a      	ldr	r0, [pc, #40]	; (8045550 <BSP_SDRAM_Init+0xac>)
 8045526:	f7fe fcb7 	bl	8043e98 <HAL_SDRAM_Init>
 804552a:	4603      	mov	r3, r0
 804552c:	2b00      	cmp	r3, #0
 804552e:	d003      	beq.n	8045538 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8045530:	4b0a      	ldr	r3, [pc, #40]	; (804555c <BSP_SDRAM_Init+0xb8>)
 8045532:	2201      	movs	r2, #1
 8045534:	701a      	strb	r2, [r3, #0]
 8045536:	e002      	b.n	804553e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8045538:	4b08      	ldr	r3, [pc, #32]	; (804555c <BSP_SDRAM_Init+0xb8>)
 804553a:	2200      	movs	r2, #0
 804553c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 804553e:	f240 6003 	movw	r0, #1539	; 0x603
 8045542:	f000 f80d 	bl	8045560 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8045546:	4b05      	ldr	r3, [pc, #20]	; (804555c <BSP_SDRAM_Init+0xb8>)
 8045548:	781b      	ldrb	r3, [r3, #0]
}
 804554a:	4618      	mov	r0, r3
 804554c:	bd80      	pop	{r7, pc}
 804554e:	bf00      	nop
 8045550:	20000338 	.word	0x20000338
 8045554:	a0000140 	.word	0xa0000140
 8045558:	20000190 	.word	0x20000190
 804555c:	2000003c 	.word	0x2000003c

08045560 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8045560:	b580      	push	{r7, lr}
 8045562:	b084      	sub	sp, #16
 8045564:	af00      	add	r7, sp, #0
 8045566:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8045568:	2300      	movs	r3, #0
 804556a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 804556c:	4b2a      	ldr	r3, [pc, #168]	; (8045618 <BSP_SDRAM_Initialization_sequence+0xb8>)
 804556e:	2201      	movs	r2, #1
 8045570:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8045572:	4b29      	ldr	r3, [pc, #164]	; (8045618 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8045574:	2210      	movs	r2, #16
 8045576:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8045578:	4b27      	ldr	r3, [pc, #156]	; (8045618 <BSP_SDRAM_Initialization_sequence+0xb8>)
 804557a:	2201      	movs	r2, #1
 804557c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 804557e:	4b26      	ldr	r3, [pc, #152]	; (8045618 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8045580:	2200      	movs	r2, #0
 8045582:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8045584:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8045588:	4923      	ldr	r1, [pc, #140]	; (8045618 <BSP_SDRAM_Initialization_sequence+0xb8>)
 804558a:	4824      	ldr	r0, [pc, #144]	; (804561c <BSP_SDRAM_Initialization_sequence+0xbc>)
 804558c:	f7fe fcc2 	bl	8043f14 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8045590:	2001      	movs	r0, #1
 8045592:	f7fb fb0f 	bl	8040bb4 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8045596:	4b20      	ldr	r3, [pc, #128]	; (8045618 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8045598:	2202      	movs	r2, #2
 804559a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 804559c:	4b1e      	ldr	r3, [pc, #120]	; (8045618 <BSP_SDRAM_Initialization_sequence+0xb8>)
 804559e:	2210      	movs	r2, #16
 80455a0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80455a2:	4b1d      	ldr	r3, [pc, #116]	; (8045618 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80455a4:	2201      	movs	r2, #1
 80455a6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80455a8:	4b1b      	ldr	r3, [pc, #108]	; (8045618 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80455aa:	2200      	movs	r2, #0
 80455ac:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80455ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80455b2:	4919      	ldr	r1, [pc, #100]	; (8045618 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80455b4:	4819      	ldr	r0, [pc, #100]	; (804561c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80455b6:	f7fe fcad 	bl	8043f14 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80455ba:	4b17      	ldr	r3, [pc, #92]	; (8045618 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80455bc:	2203      	movs	r2, #3
 80455be:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80455c0:	4b15      	ldr	r3, [pc, #84]	; (8045618 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80455c2:	2210      	movs	r2, #16
 80455c4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80455c6:	4b14      	ldr	r3, [pc, #80]	; (8045618 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80455c8:	2208      	movs	r2, #8
 80455ca:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80455cc:	4b12      	ldr	r3, [pc, #72]	; (8045618 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80455ce:	2200      	movs	r2, #0
 80455d0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80455d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80455d6:	4910      	ldr	r1, [pc, #64]	; (8045618 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80455d8:	4810      	ldr	r0, [pc, #64]	; (804561c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80455da:	f7fe fc9b 	bl	8043f14 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80455de:	f44f 7308 	mov.w	r3, #544	; 0x220
 80455e2:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80455e4:	4b0c      	ldr	r3, [pc, #48]	; (8045618 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80455e6:	2204      	movs	r2, #4
 80455e8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80455ea:	4b0b      	ldr	r3, [pc, #44]	; (8045618 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80455ec:	2210      	movs	r2, #16
 80455ee:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80455f0:	4b09      	ldr	r3, [pc, #36]	; (8045618 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80455f2:	2201      	movs	r2, #1
 80455f4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80455f6:	68fb      	ldr	r3, [r7, #12]
 80455f8:	4a07      	ldr	r2, [pc, #28]	; (8045618 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80455fa:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80455fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8045600:	4905      	ldr	r1, [pc, #20]	; (8045618 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8045602:	4806      	ldr	r0, [pc, #24]	; (804561c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8045604:	f7fe fc86 	bl	8043f14 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8045608:	6879      	ldr	r1, [r7, #4]
 804560a:	4804      	ldr	r0, [pc, #16]	; (804561c <BSP_SDRAM_Initialization_sequence+0xbc>)
 804560c:	f7fe fcad 	bl	8043f6a <HAL_SDRAM_ProgramRefreshRate>
}
 8045610:	bf00      	nop
 8045612:	3710      	adds	r7, #16
 8045614:	46bd      	mov	sp, r7
 8045616:	bd80      	pop	{r7, pc}
 8045618:	200001ac 	.word	0x200001ac
 804561c:	20000338 	.word	0x20000338

08045620 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8045620:	b580      	push	{r7, lr}
 8045622:	b090      	sub	sp, #64	; 0x40
 8045624:	af00      	add	r7, sp, #0
 8045626:	6078      	str	r0, [r7, #4]
 8045628:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 804562a:	4b70      	ldr	r3, [pc, #448]	; (80457ec <BSP_SDRAM_MspInit+0x1cc>)
 804562c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804562e:	4a6f      	ldr	r2, [pc, #444]	; (80457ec <BSP_SDRAM_MspInit+0x1cc>)
 8045630:	f043 0301 	orr.w	r3, r3, #1
 8045634:	6393      	str	r3, [r2, #56]	; 0x38
 8045636:	4b6d      	ldr	r3, [pc, #436]	; (80457ec <BSP_SDRAM_MspInit+0x1cc>)
 8045638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804563a:	f003 0301 	and.w	r3, r3, #1
 804563e:	62bb      	str	r3, [r7, #40]	; 0x28
 8045640:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8045642:	4b6a      	ldr	r3, [pc, #424]	; (80457ec <BSP_SDRAM_MspInit+0x1cc>)
 8045644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8045646:	4a69      	ldr	r2, [pc, #420]	; (80457ec <BSP_SDRAM_MspInit+0x1cc>)
 8045648:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 804564c:	6313      	str	r3, [r2, #48]	; 0x30
 804564e:	4b67      	ldr	r3, [pc, #412]	; (80457ec <BSP_SDRAM_MspInit+0x1cc>)
 8045650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8045652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8045656:	627b      	str	r3, [r7, #36]	; 0x24
 8045658:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 804565a:	4b64      	ldr	r3, [pc, #400]	; (80457ec <BSP_SDRAM_MspInit+0x1cc>)
 804565c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804565e:	4a63      	ldr	r2, [pc, #396]	; (80457ec <BSP_SDRAM_MspInit+0x1cc>)
 8045660:	f043 0304 	orr.w	r3, r3, #4
 8045664:	6313      	str	r3, [r2, #48]	; 0x30
 8045666:	4b61      	ldr	r3, [pc, #388]	; (80457ec <BSP_SDRAM_MspInit+0x1cc>)
 8045668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804566a:	f003 0304 	and.w	r3, r3, #4
 804566e:	623b      	str	r3, [r7, #32]
 8045670:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8045672:	4b5e      	ldr	r3, [pc, #376]	; (80457ec <BSP_SDRAM_MspInit+0x1cc>)
 8045674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8045676:	4a5d      	ldr	r2, [pc, #372]	; (80457ec <BSP_SDRAM_MspInit+0x1cc>)
 8045678:	f043 0308 	orr.w	r3, r3, #8
 804567c:	6313      	str	r3, [r2, #48]	; 0x30
 804567e:	4b5b      	ldr	r3, [pc, #364]	; (80457ec <BSP_SDRAM_MspInit+0x1cc>)
 8045680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8045682:	f003 0308 	and.w	r3, r3, #8
 8045686:	61fb      	str	r3, [r7, #28]
 8045688:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 804568a:	4b58      	ldr	r3, [pc, #352]	; (80457ec <BSP_SDRAM_MspInit+0x1cc>)
 804568c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804568e:	4a57      	ldr	r2, [pc, #348]	; (80457ec <BSP_SDRAM_MspInit+0x1cc>)
 8045690:	f043 0310 	orr.w	r3, r3, #16
 8045694:	6313      	str	r3, [r2, #48]	; 0x30
 8045696:	4b55      	ldr	r3, [pc, #340]	; (80457ec <BSP_SDRAM_MspInit+0x1cc>)
 8045698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804569a:	f003 0310 	and.w	r3, r3, #16
 804569e:	61bb      	str	r3, [r7, #24]
 80456a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80456a2:	4b52      	ldr	r3, [pc, #328]	; (80457ec <BSP_SDRAM_MspInit+0x1cc>)
 80456a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80456a6:	4a51      	ldr	r2, [pc, #324]	; (80457ec <BSP_SDRAM_MspInit+0x1cc>)
 80456a8:	f043 0320 	orr.w	r3, r3, #32
 80456ac:	6313      	str	r3, [r2, #48]	; 0x30
 80456ae:	4b4f      	ldr	r3, [pc, #316]	; (80457ec <BSP_SDRAM_MspInit+0x1cc>)
 80456b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80456b2:	f003 0320 	and.w	r3, r3, #32
 80456b6:	617b      	str	r3, [r7, #20]
 80456b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80456ba:	4b4c      	ldr	r3, [pc, #304]	; (80457ec <BSP_SDRAM_MspInit+0x1cc>)
 80456bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80456be:	4a4b      	ldr	r2, [pc, #300]	; (80457ec <BSP_SDRAM_MspInit+0x1cc>)
 80456c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80456c4:	6313      	str	r3, [r2, #48]	; 0x30
 80456c6:	4b49      	ldr	r3, [pc, #292]	; (80457ec <BSP_SDRAM_MspInit+0x1cc>)
 80456c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80456ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80456ce:	613b      	str	r3, [r7, #16]
 80456d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80456d2:	4b46      	ldr	r3, [pc, #280]	; (80457ec <BSP_SDRAM_MspInit+0x1cc>)
 80456d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80456d6:	4a45      	ldr	r2, [pc, #276]	; (80457ec <BSP_SDRAM_MspInit+0x1cc>)
 80456d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80456dc:	6313      	str	r3, [r2, #48]	; 0x30
 80456de:	4b43      	ldr	r3, [pc, #268]	; (80457ec <BSP_SDRAM_MspInit+0x1cc>)
 80456e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80456e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80456e6:	60fb      	str	r3, [r7, #12]
 80456e8:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80456ea:	2302      	movs	r3, #2
 80456ec:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80456ee:	2301      	movs	r3, #1
 80456f0:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80456f2:	2302      	movs	r3, #2
 80456f4:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80456f6:	230c      	movs	r3, #12
 80456f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80456fa:	2308      	movs	r3, #8
 80456fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80456fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8045702:	4619      	mov	r1, r3
 8045704:	483a      	ldr	r0, [pc, #232]	; (80457f0 <BSP_SDRAM_MspInit+0x1d0>)
 8045706:	f7fc f8bb 	bl	8041880 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 804570a:	f24c 7303 	movw	r3, #50947	; 0xc703
 804570e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8045710:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8045714:	4619      	mov	r1, r3
 8045716:	4837      	ldr	r0, [pc, #220]	; (80457f4 <BSP_SDRAM_MspInit+0x1d4>)
 8045718:	f7fc f8b2 	bl	8041880 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 804571c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8045720:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8045722:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8045726:	4619      	mov	r1, r3
 8045728:	4833      	ldr	r0, [pc, #204]	; (80457f8 <BSP_SDRAM_MspInit+0x1d8>)
 804572a:	f7fc f8a9 	bl	8041880 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 804572e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8045732:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8045734:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8045738:	4619      	mov	r1, r3
 804573a:	4830      	ldr	r0, [pc, #192]	; (80457fc <BSP_SDRAM_MspInit+0x1dc>)
 804573c:	f7fc f8a0 	bl	8041880 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8045740:	f248 1333 	movw	r3, #33075	; 0x8133
 8045744:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8045746:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 804574a:	4619      	mov	r1, r3
 804574c:	482c      	ldr	r0, [pc, #176]	; (8045800 <BSP_SDRAM_MspInit+0x1e0>)
 804574e:	f7fc f897 	bl	8041880 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8045752:	2328      	movs	r3, #40	; 0x28
 8045754:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8045756:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 804575a:	4619      	mov	r1, r3
 804575c:	4829      	ldr	r0, [pc, #164]	; (8045804 <BSP_SDRAM_MspInit+0x1e4>)
 804575e:	f7fc f88f 	bl	8041880 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8045762:	4b29      	ldr	r3, [pc, #164]	; (8045808 <BSP_SDRAM_MspInit+0x1e8>)
 8045764:	2200      	movs	r2, #0
 8045766:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8045768:	4b27      	ldr	r3, [pc, #156]	; (8045808 <BSP_SDRAM_MspInit+0x1e8>)
 804576a:	2280      	movs	r2, #128	; 0x80
 804576c:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 804576e:	4b26      	ldr	r3, [pc, #152]	; (8045808 <BSP_SDRAM_MspInit+0x1e8>)
 8045770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8045774:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8045776:	4b24      	ldr	r3, [pc, #144]	; (8045808 <BSP_SDRAM_MspInit+0x1e8>)
 8045778:	f44f 6280 	mov.w	r2, #1024	; 0x400
 804577c:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 804577e:	4b22      	ldr	r3, [pc, #136]	; (8045808 <BSP_SDRAM_MspInit+0x1e8>)
 8045780:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8045784:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8045786:	4b20      	ldr	r3, [pc, #128]	; (8045808 <BSP_SDRAM_MspInit+0x1e8>)
 8045788:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 804578c:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 804578e:	4b1e      	ldr	r3, [pc, #120]	; (8045808 <BSP_SDRAM_MspInit+0x1e8>)
 8045790:	2200      	movs	r2, #0
 8045792:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8045794:	4b1c      	ldr	r3, [pc, #112]	; (8045808 <BSP_SDRAM_MspInit+0x1e8>)
 8045796:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 804579a:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 804579c:	4b1a      	ldr	r3, [pc, #104]	; (8045808 <BSP_SDRAM_MspInit+0x1e8>)
 804579e:	2200      	movs	r2, #0
 80457a0:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80457a2:	4b19      	ldr	r3, [pc, #100]	; (8045808 <BSP_SDRAM_MspInit+0x1e8>)
 80457a4:	2203      	movs	r2, #3
 80457a6:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80457a8:	4b17      	ldr	r3, [pc, #92]	; (8045808 <BSP_SDRAM_MspInit+0x1e8>)
 80457aa:	2200      	movs	r2, #0
 80457ac:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80457ae:	4b16      	ldr	r3, [pc, #88]	; (8045808 <BSP_SDRAM_MspInit+0x1e8>)
 80457b0:	2200      	movs	r2, #0
 80457b2:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80457b4:	4b14      	ldr	r3, [pc, #80]	; (8045808 <BSP_SDRAM_MspInit+0x1e8>)
 80457b6:	4a15      	ldr	r2, [pc, #84]	; (804580c <BSP_SDRAM_MspInit+0x1ec>)
 80457b8:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80457ba:	687b      	ldr	r3, [r7, #4]
 80457bc:	4a12      	ldr	r2, [pc, #72]	; (8045808 <BSP_SDRAM_MspInit+0x1e8>)
 80457be:	631a      	str	r2, [r3, #48]	; 0x30
 80457c0:	4a11      	ldr	r2, [pc, #68]	; (8045808 <BSP_SDRAM_MspInit+0x1e8>)
 80457c2:	687b      	ldr	r3, [r7, #4]
 80457c4:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80457c6:	4810      	ldr	r0, [pc, #64]	; (8045808 <BSP_SDRAM_MspInit+0x1e8>)
 80457c8:	f7fb fcc0 	bl	804114c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80457cc:	480e      	ldr	r0, [pc, #56]	; (8045808 <BSP_SDRAM_MspInit+0x1e8>)
 80457ce:	f7fb fc0f 	bl	8040ff0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80457d2:	2200      	movs	r2, #0
 80457d4:	210f      	movs	r1, #15
 80457d6:	2038      	movs	r0, #56	; 0x38
 80457d8:	f7fb fae9 	bl	8040dae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80457dc:	2038      	movs	r0, #56	; 0x38
 80457de:	f7fb fb02 	bl	8040de6 <HAL_NVIC_EnableIRQ>
}
 80457e2:	bf00      	nop
 80457e4:	3740      	adds	r7, #64	; 0x40
 80457e6:	46bd      	mov	sp, r7
 80457e8:	bd80      	pop	{r7, pc}
 80457ea:	bf00      	nop
 80457ec:	40023800 	.word	0x40023800
 80457f0:	40020800 	.word	0x40020800
 80457f4:	40020c00 	.word	0x40020c00
 80457f8:	40021000 	.word	0x40021000
 80457fc:	40021400 	.word	0x40021400
 8045800:	40021800 	.word	0x40021800
 8045804:	40021c00 	.word	0x40021c00
 8045808:	200001bc 	.word	0x200001bc
 804580c:	40026410 	.word	0x40026410

08045810 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8045810:	b580      	push	{r7, lr}
 8045812:	b084      	sub	sp, #16
 8045814:	af00      	add	r7, sp, #0
 8045816:	4603      	mov	r3, r0
 8045818:	460a      	mov	r2, r1
 804581a:	80fb      	strh	r3, [r7, #6]
 804581c:	4613      	mov	r3, r2
 804581e:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8045820:	2300      	movs	r3, #0
 8045822:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8045824:	4a14      	ldr	r2, [pc, #80]	; (8045878 <BSP_TS_Init+0x68>)
 8045826:	88fb      	ldrh	r3, [r7, #6]
 8045828:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 804582a:	4a14      	ldr	r2, [pc, #80]	; (804587c <BSP_TS_Init+0x6c>)
 804582c:	88bb      	ldrh	r3, [r7, #4]
 804582e:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8045830:	4b13      	ldr	r3, [pc, #76]	; (8045880 <BSP_TS_Init+0x70>)
 8045832:	681b      	ldr	r3, [r3, #0]
 8045834:	2070      	movs	r0, #112	; 0x70
 8045836:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8045838:	4b11      	ldr	r3, [pc, #68]	; (8045880 <BSP_TS_Init+0x70>)
 804583a:	685b      	ldr	r3, [r3, #4]
 804583c:	2070      	movs	r0, #112	; 0x70
 804583e:	4798      	blx	r3
 8045840:	4603      	mov	r3, r0
 8045842:	2b51      	cmp	r3, #81	; 0x51
 8045844:	d111      	bne.n	804586a <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8045846:	4b0f      	ldr	r3, [pc, #60]	; (8045884 <BSP_TS_Init+0x74>)
 8045848:	4a0d      	ldr	r2, [pc, #52]	; (8045880 <BSP_TS_Init+0x70>)
 804584a:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 804584c:	4b0e      	ldr	r3, [pc, #56]	; (8045888 <BSP_TS_Init+0x78>)
 804584e:	2270      	movs	r2, #112	; 0x70
 8045850:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8045852:	4b0e      	ldr	r3, [pc, #56]	; (804588c <BSP_TS_Init+0x7c>)
 8045854:	2208      	movs	r2, #8
 8045856:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8045858:	4b0a      	ldr	r3, [pc, #40]	; (8045884 <BSP_TS_Init+0x74>)
 804585a:	681b      	ldr	r3, [r3, #0]
 804585c:	68db      	ldr	r3, [r3, #12]
 804585e:	4a0a      	ldr	r2, [pc, #40]	; (8045888 <BSP_TS_Init+0x78>)
 8045860:	7812      	ldrb	r2, [r2, #0]
 8045862:	b292      	uxth	r2, r2
 8045864:	4610      	mov	r0, r2
 8045866:	4798      	blx	r3
 8045868:	e001      	b.n	804586e <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 804586a:	2303      	movs	r3, #3
 804586c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 804586e:	7bfb      	ldrb	r3, [r7, #15]
}
 8045870:	4618      	mov	r0, r3
 8045872:	3710      	adds	r7, #16
 8045874:	46bd      	mov	sp, r7
 8045876:	bd80      	pop	{r7, pc}
 8045878:	20000220 	.word	0x20000220
 804587c:	20000222 	.word	0x20000222
 8045880:	20000014 	.word	0x20000014
 8045884:	2000021c 	.word	0x2000021c
 8045888:	20000225 	.word	0x20000225
 804588c:	20000224 	.word	0x20000224

08045890 <__libc_init_array>:
 8045890:	b570      	push	{r4, r5, r6, lr}
 8045892:	4e0d      	ldr	r6, [pc, #52]	; (80458c8 <__libc_init_array+0x38>)
 8045894:	4c0d      	ldr	r4, [pc, #52]	; (80458cc <__libc_init_array+0x3c>)
 8045896:	1ba4      	subs	r4, r4, r6
 8045898:	10a4      	asrs	r4, r4, #2
 804589a:	2500      	movs	r5, #0
 804589c:	42a5      	cmp	r5, r4
 804589e:	d109      	bne.n	80458b4 <__libc_init_array+0x24>
 80458a0:	4e0b      	ldr	r6, [pc, #44]	; (80458d0 <__libc_init_array+0x40>)
 80458a2:	4c0c      	ldr	r4, [pc, #48]	; (80458d4 <__libc_init_array+0x44>)
 80458a4:	f000 f820 	bl	80458e8 <_init>
 80458a8:	1ba4      	subs	r4, r4, r6
 80458aa:	10a4      	asrs	r4, r4, #2
 80458ac:	2500      	movs	r5, #0
 80458ae:	42a5      	cmp	r5, r4
 80458b0:	d105      	bne.n	80458be <__libc_init_array+0x2e>
 80458b2:	bd70      	pop	{r4, r5, r6, pc}
 80458b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80458b8:	4798      	blx	r3
 80458ba:	3501      	adds	r5, #1
 80458bc:	e7ee      	b.n	804589c <__libc_init_array+0xc>
 80458be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80458c2:	4798      	blx	r3
 80458c4:	3501      	adds	r5, #1
 80458c6:	e7f2      	b.n	80458ae <__libc_init_array+0x1e>
 80458c8:	0804744c 	.word	0x0804744c
 80458cc:	0804744c 	.word	0x0804744c
 80458d0:	0804744c 	.word	0x0804744c
 80458d4:	08047450 	.word	0x08047450

080458d8 <memset>:
 80458d8:	4402      	add	r2, r0
 80458da:	4603      	mov	r3, r0
 80458dc:	4293      	cmp	r3, r2
 80458de:	d100      	bne.n	80458e2 <memset+0xa>
 80458e0:	4770      	bx	lr
 80458e2:	f803 1b01 	strb.w	r1, [r3], #1
 80458e6:	e7f9      	b.n	80458dc <memset+0x4>

080458e8 <_init>:
 80458e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80458ea:	bf00      	nop
 80458ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80458ee:	bc08      	pop	{r3}
 80458f0:	469e      	mov	lr, r3
 80458f2:	4770      	bx	lr

080458f4 <_fini>:
 80458f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80458f6:	bf00      	nop
 80458f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80458fa:	bc08      	pop	{r3}
 80458fc:	469e      	mov	lr, r3
 80458fe:	4770      	bx	lr
